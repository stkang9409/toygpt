1일차
- 전반적인 내용
DDD, MSA 전반을 다룬다. MSA를 하기 위해선 도메인 주도 설계가 선행되어야 한다. MSA를 잘 만들기 위한 전반적인 설계 방법을 다룬다.

- 독서 전략
이전 회사들에서 경험했던 모놀리식, 잘못된 MSA에 대해 반성해보고, 지금 회사에서 잘된 MSA를 보며 책을 깊이있게 이해해본다. 지금 구조에서의 문제점도 찾아본다.

- 다짐
더 나은 구조에 대해 항상 고민하는 개발자로 거듭나자

---------------------------

2일차
도메인MSA

# 1.1 성공한 인터넷 기업들과 비즈니스 민첩성

클라우드 환경의 등장과 이를 잘 활용한 기업들은 성공했다. 클라우드 환경이 그것을 어떻게 촉진했는지 보자.

## 1.1.1 성공 사례: 아마존의 배포 속도

빠른 배포 주기는 비즈니스의 민첩성을 간접적으로 보여주는 지표다.

아마존은 초당 1.5번의 배포를 한다. (2019년 기준) 

어떻게 이런 속도를 갖게 되었을지 시스템을 구성하는 인프라와 애플리케이션 측면에서 살펴보자.

## 1.1.2 클라우드 인프라의 등장

- 전형적인 시스템 인프라 구축 과정은 시간, 금전, 관리 비용이 많이 든다.
    
    서비스가 실패한다면 초기 투자 비용도 건질 수 없다.
    
- 클라우드 인프라의 등장으로 이런 문제가 해결되었다.

## 1.1.3 클라우드 인프라에 어울리는 애플리케이션의 조건

- 클라우드 인프라를 사용하면 사용량에 따라 비용을 유연하게 조정할 수 있다.
- 클라우드는 여러 개의 서버 장비가 모여 논리적으로 하나처럼 관리된다. 레고처럼 조각이 모여 하나의 큰 덩어리가 되고 쉽게 분리되기도 한다.
    
    애플리케이션도 이런 형태라면 효율성을 극대화할 수 있다. 애플리케이션 블록이 작으면 작을수록 효율적이다.
    
- 사용량 증가에 따른 인프라 용량 성능과 가용성을 높이는 일반적인 방법
    
    ### 스케일 업과 스케일 아웃
    
    쇼핑몰 타임세일로 특정 기간에 트래픽이 밀려온다면 스케일업이나 스케일 아웃을 고려할 수 있다.
    
    - 스케일 업
        
        아무리 스케일 업해도 예상 트래픽을 초과하면 시스템이 다운될 수 있다.
        
    - 스케일 아웃
        
        한계 수치에 달하면 인스턴스를 복제해서 증가시키고, 사용량이 분산된다.
        
    
    ### 특정 서비스만 탄력성 있게 확장 (스케일 아웃)
    
    세일 기간 중 바쁜 업무는 세일 이벤트를 수행하는 부분이므로, 스케일 아웃 시, 전체를 복제할 필요가 없다. 세일 이벤트를 담당하는 조각만 용량이 증설되고 복제되어 트래픽에 대비하면 된다.
    
    시스템을 작은 단위의 독립적인 서비스 연계로 구성해야 한다.
    
    ### 클라우드 프렌들리와 클라우드 네이티브
    
    - 클라우드 프렌들리
        
        큰 한덩어리도 클라우드 인프라에 올릴 수는 있다. 하지만 특정 기능만 확장하거나 배포할 수 없는 비효율은 감수해야 한다.
        
    - 클라우드 네이티브
        
        독립적으로 분리되어 배포될 수 있는 조각으로 구성된 애플리케이션
        
    
    궁극적으로 클라우드 프렌들리 → 클라우드 네이티브가 되어야 한다.
    

# 1.2 마이크로서비스란 무엇인가?

## 1.2.1 모노리스와 마이크로서비스 비교

- 모노리스는 하나의 단위로 개발되는 일체식 애플리케이션이다.
    
    서버 측 애플리케이션이 논리적인 단일체로서 아무리 작은 변화에도 새로운 버전으로 전체를 빌드해서 배포해야 한다.
    
- 스케일 아웃되면 큰 덩어리가 복제되어 여러 개가 뜬다. 변경이 발생하면 여러 개의 모노리스가 수평으로 확장된 상태이므로 여러 개의 모노리스 시스템 전부를 다시 빌드하고 배포해야 한다.
    
    데이터베이스는 하나이므로 스케일 업을 통해 용량을 증설해야 한다.
    
- 마이크로서비스는 여러 서비스 인스턴스가 모여 하나의 비즈니스 애플리케이션을 구성한다.
    
    각기 저장소가 다르므로 업무 단위로 모듈 경계가 명확하게 구분된다.
    
    확장 시에는 특정 기능별로 독립적으로 확장할 수 있고, 특정 서비스를 변경할 필요가 있다면 해당 서비스만 빌드해서 배포하면 된다.
    

## 1.2.2 SOA와 마이크로서비스

- 특정 서비스를 구축하는 데 사용되는 언어나 저장소를 자율적으로 선택할 수 있는 방식을 `폴리글랏하다`라고 표현한다.
- SOA는 애플리케이션은 모듈별로 분리했지만 저장소까지는 분리하지 못했다.
- MSA는 SOA에는 없던 두 가지 개념으로 모듈화 방식을 강화했고 실현한다.
    1. 서비스별 저장소를 분리해서 다른 서비스가 저장소를 직접 호출하지 못하도록 캡슐화한다. 즉, 다른 서비스의 저장소에 접근하는 수단은 API밖에 없다.
    2. REST API 같은 가벼운 개방형 표준을 사용해 각 서비스가 느슨하게 연계되고 누구나 쉽게 사용할 수 있다.

---------------------------

3일차
도메인MSA

# 1.3 마이크로 서비스를 위한 조건은 무엇인가?

## 1.3.1 조직의 변화: 업무 기능 중심 팀

- 시스템을 개발할 때 항상 시스템의 모양이 팀의 의사소통 구조를 반영한다.
- 예전에 일하는 방식은 기술별로 팀이 나눠져 있고, 하나의 애플리케이션을 만들려면 팀간의 의사소통이 필요하다.
- 마이크로서비스를 만드는 팀은 업무 기능 중심의 팀이어야 한다.
    
    이는 자율적으로 담당 비즈니스에 관련된 서비스를 만들뿐 아니라 개발 이후에 운영할 책임까지 진다.
    

## 1.3.2 관리체계의 변화: 자율적인 분권 거버넌스, 폴리글랏

- 마이크로서비스를 만드는 조직은 중앙의 강력한 거버넌스를 추구하지 않는다.
- 각 서비스 팀이 팀에 맞는 개발 언어 및 저장소를 선택하는 것을 각각 폴리글랏 프로그래밍, 폴리글랏 저장소라고 한다.

## 1.3.3 개발 생명주기의 변화: 프로젝트가 아니라 제품 중심으로

- 기존에는 개발 조직과 운영 조직이 분리돼 있고, 초기에 모든 일정을 계획했다.
- 마이크로서비스팀의 개발은 소프트웨어 전체 생명주기를 책임져야 한다. 즉, 소프트웨어를 완성해야 할 기능의 집합으로 보는 것이 아니라 비즈니스를 제공하는 제품으로 바라본다.
    
    제품 중심의 애자일 개발 방식을 채택한다.
    
    마이크로서비스는 계속 피드백을 받아 지속적으로 변화, 개선되고 향상되는 존재다.
    

## 1.3.4 개발 환경의 변화: 인프라 자동화

- 마이크로서비스는 독립적으로 배포되므로, 이렇게 여러 개로 쪼개진 상태에서는 수동으로 배포하는 방식은 바람직하지 않다. 이를 빠르게 배포하기 위한 자동화된 방법이 필요하다.
- 빌드/배포 파이프라인은 일반적으로 소스코드 빌드 → 개발환경 배포 → 스테이징 환경 배포 → 운영 환경 배포 로 구성된다.
    
    이를 효율적으로 관리하기 위해 인프라 구성과 자동화를 마치 소프트웨어처럼 코드로 처리하는 방식인 Infrastructure as code가 각광받고 있다.
    

## 1.3.5 저장소의 변화: 통합 저장소가 아닌 분권 데이터 관리

- 폴리글랏 저장소 접근법에서는 비즈니스 처리를 위해 일부 데이터의 복제와 중복 허용이 필요하다.
    
    여기서 각 마이크로서비스의 저장소에 담긴 데이터의 비즈니스 정합성을 맞춰야 하는 데이터 일관성 문제가 있다.
    
- 마이크로서비스는 데이터 일관성 문제를 해결하기 위해 두 서비스를 단일 트랜잭션으로 묶는 방법이 아닌 비동기 이벤트 처리를 통한 협업을 강조한다.
    
    이를 결과적 일관성이라고 표현하기도 한다. 여러 트랜잭션을 하나로 묶지 않고 별도의 로컬 트랜잭션을 각각 수행하고 일관성이 달라진 부분은 체크해서 보상 트랜잭션으로 일관성을 맞추는 개념이다.

---------------------------

4일차
도메인MSA

# 2.1 리액티브 선언: 현대 애플리케이션이 갖춰야 할 바람직한 속성들

- 현대 애플리케이션에 대한 기대를 잘 표현한 리액티브 선언문이라는 문서가 있다.
    
    응답성, 탄력성, 유연성, 메시지 기반의 4가지 특성
    
    - 응답성 : 사용자에게 신뢰성 있는 응답을 빠르고 적절하게 제공
    - 탄력성 : 장애에서 빠르게 복구하는 능력
    - 유연성 : 사용량에 변화가 있어도 균일한 응답성을 제공
    - 메시지 기반 : 비동기 메시지 전달을 통해 위치 투명성, 느슨한 결합, 논블로킹 통신 지향
- 리액티브란 급변하는 상황에 적응할 수 있는 시스템을 요구하는 것이다.
- 리액티브 시스템이 반드시 갖춰야 할 공통적인 특성은 아키텍처 유연성이다.

# 2.2 강결합에서 느슨한 결합의 아키텍처로의 변화

- 예전에는 특정 벤더의 제품에 전적으로 의존해서 강결합된 경우가 많았다.
    
    최근에는 클라우드 환경하에서 오픈소스 기반으로 하여 벤더에 의존할 필요가 적어졌다.
    
- 예전에는 검증된 기술이나 솔루션 기반으로 직접 구현하는 폐쇄적인 방식
    
    최근에는 필요한 영역에 적절한 솔루션을 선택하고 조합하는 개방적인 방식
    

# 2.3 마이크로서비스의 외부 아키텍처와 내부 아키텍처

- 인프라, 플랫폼, 애플리케이션 영역
    
    기반이 되는 하드웨어 인프라, 인프라 위에 애플리케이션 운영 및 구동을 위한 플랫폼이 올라가고, 플랫폼 위에 애플리케이션 서비스가 구동된다.
    
- 외부 아키텍처는 마이크로서비스가 운영되는 환경을 정의한다.
- 내부 아키텍처는 실제로 비즈니스가 실행되는 비즈니스 애플리케이션의 구조를 말한다.

# 2.4 MSA 구성요소 및 MSA 패턴

- MSA 구성요소 및 패턴의 유형
    - 인프라 구성요소
        
        MSA를 지탱하는 하부구조 인프라를 구축하는 데 필요한 구성요소
        
    - 플랫폼 패턴
        
        인프라 위에서 MSA의 운영과 관리를 지원하는 플랫폼 차원의 패턴
        
    - 애플리케이션 패턴
        
        MSA 애플리케이션을 구성하는 데 필요한 패턴
        

## 2.4.1 인프라 구성요소

IT 환경 운영, 관리에 필요한 하드웨어, 소프트웨어, 네트워킹 구성요소, 운영체제, 데이터 스토리지 등을 모두 포괄한다.

### 퍼블릭 클라우드와 베어 메탈, 프라이빗 클라우드 환경

인프라 아키텍트는 퍼블릭 클라우드를 사용할 것인지, 베어 메탈에 프라이빗 클라우드 환경을 사용할 것인지 결정해야 한다. 마이크로서비스는 어떠한 환경에서도 유연하도록 구성돼야 하므로 특정 인프라를 고집하지 않는다. 그러므로 인프라로 어떤 것을 선택해도 상관없다.

### VM과 컨테이너

- 가상 인프라 환경에서는 가상 머신과 컨테이너 중 하나를 선택해야 한다.
- 가상머신은 하이퍼바이저라는 소프트웨어로 하나의 시슽메에서 여러 개의 운영체제를 사용할 수 있다. 컨테이너는 하이퍼바이저 없이 컨테이너 엔진으로 가상된 격리 공간을 생성한다.
- 둘의 차이는 게스트 OS 유무이다. 게스트 OS를 사용하는 가상 머신에서는 운영체제 패치 설치나 관련 라이브러리 설치 같은 오버헤드가 지속적으로 발생한다. 따라서 MSA 같은 작은 서비스를 패키지하고 배포하기에는 컨테이너 환경이 더 적합하다.
- 도커 컨테이너는 레이어 단위의 이미지를 포개는 방식으로 구성되며, 밑에서부터 애플리케이션 구동을 위한 기반 이미지, 운영체제, 런타임, 애플리케이션이 이미지로 정의된다.
- 도커 컨테이너의 이점
    - 이식성 : 어떤 커널이나 플랫폼 버전에 상관없이 도커만 실행할 수 있으면 사용 가능하며 동일하게 동작된다.
    - 신속성 : 크기가 작고 가벼워 빠르게 배포 가능
    - 재사용성 : 동일한 환경 재사용이 쉬워서 개발, 테스트, 스테이징, 프로덕트 환경을 동일한 환경으로 구축 가능