Date,User,Message
2023-03-11 17:48:11,"강민규","강민규님이 들어왔습니다.
운영정책을 위반한 메시지로 신고 접수 시 카카오톡 이용에 제한이 있을 수 있습니다."
2023-03-11 17:48:17,"오픈채팅봇","오픈채팅봇님이 들어왔습니다."
2023-03-11 17:48:18,"오픈채팅봇","앞으로 오픈채팅봇의 자동응답을 이용하실 수 있습니다. 지금 오픈채팅봇 소개를 확인해보세요!"
2023-03-11 17:52:11,"김연정","김연정님이 들어왔습니다."
2023-03-11 17:52:11,"오픈채팅봇","안녕하세요 책너두 2기 운영방입니다. 앞으로 여기서 독서 스케줄 공지, 리마인드, 독서 일지 제출 등이 이뤄집니다~ 상세한 일정 공지 3월 12일 일요일에 공지드리도록 하겠습니다. 앞으로 9주 간 즐거운 독서 경험하시길 바랍니다. 화이팅~~"
2023-03-11 19:55:00,"김동욱","김동욱님이 들어왔습니다."
2023-03-11 19:55:00,"오픈채팅봇","책너두 2기 운영방에 오신 것을 환영합니다!

앞으로 여기서 독서 스케줄 공지, 리마인드, 독서 일지와 같은 각종 과제 제출 등이 이뤄집니다.

프로그램에 대한 상세 일정은 3월 12일 일요일에 공지드릴 예정입니다. 그 전까지는 신청하신 도서를 미리 준비해주세요.

앞으로 9주 동안 서로 자극 받으며 성장하는 시간이 되길 기대합니다!"
2023-03-11 19:55:20,"김동욱","김동욱님이 나갔습니다."
2023-03-11 19:57:56,"강민규","수정했어"
2023-03-11 20:00:49,"김채욱","김채욱님이 들어왔습니다."
2023-03-11 20:00:49,"오픈채팅봇","책너두 2기 운영방에 오신 것을 환영합니다!

앞으로 여기서 독서 스케줄 공지, 리마인드, 독서 일지와 같은 각종 과제 제출 등이 이뤄집니다.

프로그램에 대한 상세 일정은 3월 12일 일요일에 공지드릴 예정입니다. 그 전까지는 신청하신 도서를 미리 준비해주세요.

9주 동안 서로 자극 받으며 성장하는 시간이 되길 기대합니다!"
2023-03-11 20:01:08,"길인식","길인식님이 들어왔습니다."
2023-03-11 20:01:20,"김채욱","안녕하세요! 9주 동안 잘 부탁드립니다 ㅎㅎ"
2023-03-11 20:02:08,"길인식","안녕하세요 반갑습니다 ㅎㅎ"
2023-03-11 20:03:50,"강민규","반갑습니다~"
2023-03-11 20:03:54,"강민규","잘부탁드려요"
2023-03-11 20:08:10,"김현진","김현진님이 들어왔습니다."
2023-03-11 20:08:10,"오픈채팅봇","책너두 2기 운영방에 오신 것을 환영합니다!

앞으로 여기서 독서 스케줄 공지, 리마인드, 독서 일지와 같은 각종 과제 제출 등이 이뤄집니다.

프로그램에 대한 상세 일정은 3월 12일 일요일에 공지드릴 예정입니다. 그 전까지는 신청하신 도서를 미리 준비해주세요.

9주 동안 서로 자극 받으며 성장하는 시간이 되길 기대합니다!"
2023-03-11 20:09:30,"Seo","Seo님이 들어왔습니다."
2023-03-11 20:09:30,"오픈채팅봇","책너두 2기 운영방에 오신 것을 환영합니다!

앞으로 여기서 독서 스케줄 공지, 리마인드, 독서 일지와 같은 각종 과제 제출 등이 이뤄집니다.

프로그램에 대한 상세 일정은 3월 12일 일요일에 공지드릴 예정입니다. 그 전까지는 신청하신 도서를 미리 준비해주세요.

9주 동안 서로 자극 받으며 성장하는 시간이 되길 기대합니다!"
2023-03-11 20:20:34,"ㅈㅁㅁ","ㅈㅁㅁ님이 들어왔습니다."
2023-03-11 20:20:34,"오픈채팅봇","책너두 2기 운영방에 오신 것을 환영합니다!

앞으로 여기서 독서 스케줄 공지, 리마인드, 독서 일지와 같은 각종 과제 제출 등이 이뤄집니다.

프로그램에 대한 상세 일정은 3월 12일 일요일에 공지드릴 예정입니다. 그 전까지는 신청하신 도서를 미리 준비해주세요.

9주 동안 서로 자극 받으며 성장하는 시간이 되길 기대합니다!"
2023-03-11 20:55:55,"김효선","김효선님이 들어왔습니다."
2023-03-11 20:55:55,"오픈채팅봇","책너두 2기 운영방에 오신 것을 환영합니다!

앞으로 여기서 독서 스케줄 공지, 리마인드, 독서 일지와 같은 각종 과제 제출 등이 이뤄집니다.

프로그램에 대한 상세 일정은 3월 12일 일요일에 공지드릴 예정입니다. 그 전까지는 신청하신 도서를 미리 준비해주세요.

9주 동안 서로 자극 받으며 성장하는 시간이 되길 기대합니다!"
2023-03-11 21:29:44,"이강욱","이강욱님이 들어왔습니다."
2023-03-11 21:29:44,"오픈채팅봇","책너두 2기 운영방에 오신 것을 환영합니다!

앞으로 여기서 독서 스케줄 공지, 리마인드, 독서 일지와 같은 각종 과제 제출 등이 이뤄집니다.

프로그램에 대한 상세 일정은 3월 12일 일요일에 공지드릴 예정입니다. 그 전까지는 신청하신 도서를 미리 준비해주세요.

9주 동안 서로 자극 받으며 성장하는 시간이 되길 기대합니다!"
2023-03-11 21:43:06,"소재훈","소재훈님이 들어왔습니다."
2023-03-11 21:43:07,"오픈채팅봇","책너두 2기 운영방에 오신 것을 환영합니다!

앞으로 여기서 독서 스케줄 공지, 리마인드, 독서 일지와 같은 각종 과제 제출 등이 이뤄집니다.

프로그램에 대한 상세 일정은 3월 12일 일요일에 공지드릴 예정입니다. 그 전까지는 신청하신 도서를 미리 준비해주세요.

9주 동안 서로 자극 받으며 성장하는 시간이 되길 기대합니다!"
2023-03-11 21:57:53,"이현주","이현주님이 들어왔습니다."
2023-03-11 21:57:53,"오픈채팅봇","책너두 2기 운영방에 오신 것을 환영합니다!

앞으로 여기서 독서 스케줄 공지, 리마인드, 독서 일지와 같은 각종 과제 제출 등이 이뤄집니다.

프로그램에 대한 상세 일정은 3월 12일 일요일에 공지드릴 예정입니다. 그 전까지는 신청하신 도서를 미리 준비해주세요.

9주 동안 서로 자극 받으며 성장하는 시간이 되길 기대합니다!"
2023-03-11 22:11:50,"정소영","정소영님이 들어왔습니다."
2023-03-11 22:11:50,"오픈채팅봇","책너두 2기 운영방에 오신 것을 환영합니다!

앞으로 여기서 독서 스케줄 공지, 리마인드, 독서 일지와 같은 각종 과제 제출 등이 이뤄집니다.

프로그램에 대한 상세 일정은 3월 12일 일요일에 공지드릴 예정입니다. 그 전까지는 신청하신 도서를 미리 준비해주세요.

9주 동안 서로 자극 받으며 성장하는 시간이 되길 기대합니다!"
2023-03-11 23:26:00,"김민수","김민수님이 들어왔습니다."
2023-03-11 23:26:00,"오픈채팅봇","책너두 2기 운영방에 오신 것을 환영합니다!

앞으로 여기서 독서 스케줄 공지, 리마인드, 독서 일지와 같은 각종 과제 제출 등이 이뤄집니다.

프로그램에 대한 상세 일정은 3월 12일 일요일에 공지드릴 예정입니다. 그 전까지는 신청하신 도서를 미리 준비해주세요.

9주 동안 서로 자극 받으며 성장하는 시간이 되길 기대합니다!"
2023-03-12 00:53:30,"최창훈","최창훈님이 들어왔습니다."
2023-03-12 00:53:30,"오픈채팅봇","책너두 2기 운영방에 오신 것을 환영합니다!

앞으로 여기서 독서 스케줄 공지, 리마인드, 독서 일지와 같은 각종 과제 제출 등이 이뤄집니다.

프로그램에 대한 상세 일정은 3월 12일 일요일에 공지드릴 예정입니다. 그 전까지는 신청하신 도서를 미리 준비해주세요.

9주 동안 서로 자극 받으며 성장하는 시간이 되길 기대합니다!"
2023-03-12 05:52:59,"박예린","박예린님이 들어왔습니다."
2023-03-12 05:52:59,"오픈채팅봇","책너두 2기 운영방에 오신 것을 환영합니다!

앞으로 여기서 독서 스케줄 공지, 리마인드, 독서 일지와 같은 각종 과제 제출 등이 이뤄집니다.

프로그램에 대한 상세 일정은 3월 12일 일요일에 공지드릴 예정입니다. 그 전까지는 신청하신 도서를 미리 준비해주세요.

9주 동안 서로 자극 받으며 성장하는 시간이 되길 기대합니다!"
2023-03-12 12:51:51,"강민규","여러분 오늘 참여자분들 다 들어오면 한번에 일정 관련하여서 공지하겠습니다~"
2023-03-12 19:10:04,"강민규","ㅈㅁㅁ님은 성함이 어떻게 되시나요"
2023-03-12 19:12:35,"ㅈㅁㅁ","금정민입니다~"
2023-03-12 19:14:50,"강민규","감사합니다~~"
2023-03-12 19:19:45,"영동","영동님이 들어왔습니다."
2023-03-12 19:19:45,"오픈채팅봇","책너두 2기 운영방에 오신 것을 환영합니다!

앞으로 여기서 독서 스케줄 공지, 리마인드, 독서 일지와 같은 각종 과제 제출 등이 이뤄집니다.

프로그램에 대한 상세 일정은 3월 12일 일요일에 공지드릴 예정입니다. 그 전까지는 신청하신 도서를 미리 준비해주세요.

9주 동안 서로 자극 받으며 성장하는 시간이 되길 기대합니다!"
2023-03-12 19:22:56,"김형우","김형우님이 들어왔습니다."
2023-03-12 19:22:56,"오픈채팅봇","책너두 2기 운영방에 오신 것을 환영합니다!

앞으로 여기서 독서 스케줄 공지, 리마인드, 독서 일지와 같은 각종 과제 제출 등이 이뤄집니다.

프로그램에 대한 상세 일정은 3월 12일 일요일에 공지드릴 예정입니다. 그 전까지는 신청하신 도서를 미리 준비해주세요.

9주 동안 서로 자극 받으며 성장하는 시간이 되길 기대합니다!"
2023-03-12 19:53:51,"이미정","이미정님이 들어왔습니다."
2023-03-12 19:53:51,"오픈채팅봇","책너두 2기 운영방에 오신 것을 환영합니다!

앞으로 여기서 독서 스케줄 공지, 리마인드, 독서 일지와 같은 각종 과제 제출 등이 이뤄집니다.

프로그램에 대한 상세 일정은 3월 12일 일요일에 공지드릴 예정입니다. 그 전까지는 신청하신 도서를 미리 준비해주세요.

9주 동안 서로 자극 받으며 성장하는 시간이 되길 기대합니다!"
2023-03-12 20:43:05,"오홍근","오홍근님이 들어왔습니다."
2023-03-12 20:43:05,"오픈채팅봇","책너두 2기 운영방에 오신 것을 환영합니다!

앞으로 여기서 독서 스케줄 공지, 리마인드, 독서 일지와 같은 각종 과제 제출 등이 이뤄집니다.

프로그램에 대한 상세 일정은 3월 12일 일요일에 공지드릴 예정입니다. 그 전까지는 신청하신 도서를 미리 준비해주세요.

9주 동안 서로 자극 받으며 성장하는 시간이 되길 기대합니다!"
2023-03-12 20:43:19,"오홍근","안녕하세요"
2023-03-12 20:43:28,"오홍근","잘부탁드립니당"
2023-03-12 20:43:52,"정소영","반갑습니다 ~!!! 📚"
2023-03-12 20:46:57,"강민규","전체 일정에 관한 공지 및 독서 스케줄을 안내드립니다. "
2023-03-12 20:46:59,"강민규","https://breakbook.notion.site/2-e5e7247a7cd944a6b3becc98e3c20d4f"
2023-03-12 20:47:06,"강민규","읽어보시고 궁금한 점 있으시면 언제든지 질문해주세요~"
2023-03-12 20:47:12,"강민규","그 외에 앞으로 책너두 진행 중 개선했으면 좋겠다 싶은 것들은 가감없이 말씀 부탁드립니다."
2023-03-12 20:48:01,"강민규","오늘은 아직 시작 전날이라 과제는 없습니다! 대신 닉네임이 이름이 아니신 분들이 계셔서 출석체크에 어려움이 조금 있을 것 같으니, 각자 이름을 포함한 자기소개 한마디씩 해주시면 감사하겠습니다."
2023-03-12 20:49:31,"강민규","저부터 자기소개를 해보겠습니다.

저는 책너두 운영하고있는 강민규라고 합니다! 선릉역 근처에서 현재 2년차 개발자로 일하고있습니다. 많은 가르침 부탁드립니다. 반갑습니다~"
2023-03-12 20:49:39,"강민규","톡게시판 '공지': https://breakbook.notion.site/2-e5e7247a7cd944a6b3becc98e3c20d4f"
2023-03-12 20:51:12,"김연정","안녕하세요! 저는 개발자는 아니고 교육 컨설턴트로 일하고 있는 김연정이라고 합니다! 책너두 운영 매니저이고, 독서 열심히 하려고 노력 중입니다! 다들 너무 반갑습니다 :)"
2023-03-12 20:51:22,"김연정","이모티콘"
2023-03-12 20:54:37,"김채욱","안녕하십니까, 저는 신입 백엔드 개발자 김채욱입니다. 아직 많이 부족하지만 잘 부탁드립니다! "
2023-03-12 20:58:47,"김형우","안녕하세요~ 2년차 백엔드 개발자 김형우 라고 합니다. 만나서 반갑습니다~!"
2023-03-12 20:59:12,"최창훈","안녕하세요. 신입 백엔드 개발자 최창훈입니다~ 잘 부탁드립니다~!!"
2023-03-12 21:00:34,"정소영","안녕하세요!! 저는 개발자는 아니고, 저도 선릉 근처 it기업에 있어요 현재 2년차 마케터 입니다 반갑습니다 🦦 "
2023-03-12 21:00:48,"오홍근","안녕하세요 n년차 백엔드 개발자 오홍근입니다. 잘부탁드립니다."
2023-03-12 21:03:44,"김효선","안녕하세요 IT스타트업에서 HR을 담당하고 있는 김효선입니다. 반갑습니다🙇‍♀️"
2023-03-12 21:05:24,"김민수","안녕하세요 김민수입니다.
대기업에서 IT 기획, 관리, 데이터 업무하고있습니다.
반갑습니다~"
2023-03-12 21:06:33,"이강욱","안녕하세요! 2주 전에 프론트엔드 개발자가 된 이강욱이라고 합니다. 스터디 하면서 많이 성장하고 싶습니다. 그럼 잘 부탁드리겠습니다..!! 😊"
2023-03-12 21:09:43,"ㅈㅁㅁ","안녕하세요~
프론트엔드 개발자 금정민입니다 :)
반갑습니다~"
2023-03-12 21:16:33,"박예린","안녕하세요. 신입 프론트엔드 취준생 박예린입니다. 잘부탁드립니다 🥰"
2023-03-12 21:19:24,"소재훈","안녕하세요. 신입 백엔드 취준생 소재훈입니다. 잘 부탁드립니다.🙋🏻‍♂️🙋🏻‍♂️"
2023-03-12 21:21:38,"길인식","안녕하세요~ 신입 백엔드 취준생 길인식입니다. 잘 부탁드립니다!"
2023-03-12 21:25:39,"이현주","안녕하세요! 신입 프론트엔드 개발자 이현주입니다. 반갑습니다 :)"
2023-03-12 23:28:56,"영동","안녕하세요 김영동입니다. devops 직무로 일하고 있습니다. 반갑습니다🙏🏻"
2023-03-13 00:06:08,"Seo","안녕하세요. 백엔드 개발자 원서연입니다. 잘부탁드립니다~"
2023-03-13 00:23:42,"이미정","안녕하세요! 이미정이라고 합니다. 잘 부탁드립니다( ◡̉̈ ) "
2023-03-13 07:50:43,"강민규","안녕하세요 여러분 좋은 아침입니다. 오늘은 책너두 2기의 첫날이네요! "
2023-03-13 07:51:05,"강민규","제가 어제 공유드린 링크는 들어가서 읽어보셨나요? 혹시 아직 못 읽으신 분은 공지로 고정해두었으니 확인해주세요!"
2023-03-13 07:51:32,"강민규","첫날은 공지드린대로 다짐 작성을 할겁니다. 준비하신 도서의 머리말, 서문 그리고 목차를 꼼꼼히 보고 앞으로의 계획을 세워보세요~"
2023-03-13 07:51:53,"강민규","첫날은 특별 규정으로 결석 시 바로 탈락입니다! 그럼 다들 화이팅입니다~ 😊"
2023-03-13 07:55:05,"김민수","책 아직 못 샀는데 점심시간에 서점 다녀와야겠네요~ 이른시간부터 고생 많으십니다 "
2023-03-13 12:27:37,"김채욱","김채욱_컴퓨터 네트워킹 하향식 접근(제7판)

[전반적인 내용]
이 서적은 컴퓨터 네트워킹의 기본 개념을 TCP/IP 5계층 모델의 애플리케이션 계층부터 링크 계층까지 상세하게 설명합니다. 저자는 상세한 실제 예시와 사진으로 네트워크를 처음 접한 독자도 쉽게 이해할 수 있도록 도와줍니다. 각 장에서는 과제와 프로그래밍 문제 및 와이어 샤크 문제까지 있어서 이론적 학습과 실습을 병행이 가능합니다. 저자가 하향식 접근 방법으로 설명하는 이유는 ‘…물리적 데이터 통신을 설명하기 전에 컴퓨터 네트워킹의 전체 구조와 모델 및 용어를 설명해야 하는 경우가 많다…‘라고 합니다. 

[독서 전략]
중요한 개념을 위주로 블로그에 정리하면서 공부하려고 합니다. 여기서 중요한 개념이란, 3개월 뒤에도 기억해야 하는 내용을 의미합니다. 운영체제를 공부할 때 이론적 학습이 아닌 PINT OS를 만들면서 지식을 체화한 경험이 있기에, 이와 유사하게, 서적의 각 장에서 주어진 과제와 프로그래밍을 해결하면서 진행할 계획입니다.

[다짐]
미래에 데이터 엔지니어로 성장하고 싶은 욕구가 있는데, 대용량 처리 시 각 서버에서 분산처리 후 네트워크를 통해 데이터 병합이 이러난다고 배웠습니다. 메모리 계층구조에서 가장 하단에 있는 네트워크에 대한 이해가 있어야만, 데이터 분산 및 병합 시, 성능을 올릴 때 도움이 될 것이라고 생각합니다. 9주간 ‘컴퓨터 네트워킹 하향식 접근’을 공부하면서 한층 더 기본기가 탄탄한 개발자로 성장하고 싶습니다."
2023-03-13 12:48:07,"ㅈㅁㅁ","도서명: 인간본성의 법칙
참여자: 금정민

[요약 및 다짐]
사회에 처음 발을 내디뎠을 때는 나 자신의 감정과 행동에만 집중하면 됐지만, 시간이 흘러 사회에 적응할 때쯤 타인의 감정에 행동에 집중해야 함을 알게 된다.

타인과 소통하는 데 이해가 어려운 경우가 종종 발생한다.

그리고 이해가 없는 기간 동안 오해가 발생하며 감정, 행동 제어가 어려워진다.

이 책은 인간이 항상 의식적으로 행동하지 않는다고 말한다.

그도 맞는 말인 게 분노를 예로 들었을 때 동의할 수 있다.

분노가 발생하면 사람은 이성적 판단은 물론, 원인조차 파악하기 어렵다.

하지만 분노가 발생하게 된 이유를 이성적으로 파악해본다면(외부, 내부적 요인), 나 자신을 이해하고 감정을 통제할 수도 있다.

결론적으로 나는 이 책을 통해 사람들의 행동은 물론 나 자기 행동을 이해하고자 한다.

[독서 전략]
가볍게 훑어보면서 정리하되, 정리된 내용을 정독해보는 방식을 취하고자 한다."
2023-03-13 13:57:19,"김연정","채욱님 책 사자마자 올려주셨네요👍"
2023-03-13 14:02:09,"김연정","타인과 나의 행동을 이해하고자 한다는 다짐 멋진 것 같아요~!"
2023-03-13 15:17:29,"김민수","도서명 : 바바라 민토 논리의 기술
참여자 : 김민수

[전반적인 내용]
멕킨지* 최초의 여설 컨설턴트인 바바라 민토가 쓴 논리적 글쓰기 방법론이다.
그녀는 글이란 생각을 전달하는 도구라고 생각했고, 따라서 문장을 만드는 법보다 생각을 어떻게 구성해야 하는지를 더 중요하게 생각했다.
생각을 구성하는 방법론으로 찾아낸 것이 바로 민토 피라미드 원칙이다.
이 책은 민토 피라미드 원칙을 중심으로 그녀가 중요하게 생각하는 글쓰기 방법이 기술되어 있다.
1. 피라미드 구조를 사용하는 이유
2. 수직적 및 수평적 생각을 정리하는 데에 피라미드가 주는 도움
3. 도입부의 중요성과 그 역할
4. 피라미드 구조가 만들어지는 과정
5. 피라미드 내 그루핑된 생각들에 핵심 메시지의 반영 여부를 확인하는 방법

또한 위 내용을 아래와 같은 구성으로 전달하고 있다.
1부 논리적으로 글쓰기 : 민토 피라미드 원칙의 기본 원리와 구성 방법
2부 논리적으로 생각하기 : 생각을 세밀한 부분까지 비판적으로 살펴보는 기술
3부 논리적으로 문제 해결하기 : 복잡한 문제를 분석하여 그 결과를 바탕으로 행동을 제안하는 데 필요한 내용
4부 논리적으로 표현하기  : 피라미드 구조로 구성된 생각을 상대에게 명확하게 전달하는 기술

*멕킨지 앤 컴퍼니 : 세계적으로 손꼽히는 전략컨설팀 펌으로서 각종 대기업 및 정부 등에 컨설팅을 제공

[독서 전략]
책에서 얻은 방법론을 내가 과거에 쓴 글에 적용시켜서 재구성 후 전후를 비교하여 독후감에 첨부하고자 한다.
독후감이 이 책의 예제 모음이 되게 하는 것이 목표이다.
그렇게 읽기를 끝마치면 이 책의 내용들을 보다 잘 기억하고 앞으로 다양한 글쓰기에 활용될 것이다.

[다짐]
최근 독서하는 시간의 가장 큰 지분을 차지하는 것은 출퇴근 시간 및 점심시간이며 스마트폰을 이용하여 간단하게 블로그에 독후감을 남기고 있다. 따라서 들고 다닐 만큼 무게와 내용이 가벼운 책들이 주가 되어있다.
하지만 이번 독서는 따로 시간을 내어 책상 앞에 앉아서 읽는 글이 되고자 한다.

글을 읽을 때 책상에 앉는다는 것은 대중교통에 읽는 것에 비하여 다음과 같은 이점이 있다.

첫 번째로 환경을 통제할 수 있다. 책상에는 내가 지금까지 써온 글들과 내가 북마크 해둔 글에 쉽게 접근할 수 있고 읽은 것을 활용하여 글을 쓰기에 유리한 환경이다.

두 번째로 원하는 만큼 읽을 수 있다. 본 글은 각 챕터별로 글쓰기에 도움을 주는 바가 있고, 각각을 내 글쓰기에 사용할 수 있다. 따라서 한 번의 독서에서는 하나의 챕터를 읽고 하나의 글을 쓰는 것을 반복해야 한다.
지하철이나 업무시간 전, 점심시간에 하는 독서는 제한 시간이 명확하게 있기 때문에 정해진 시간 동안 최선을 다해서 글을 읽게 된다. 하지만 책상에서 읽는 책은 내가 정해둔 분량을 지킬 수 있다.

마지막으로 글을 진지하게 읽을 마음가짐을 가질 수 있다.
회사 식당이나 카페에서 흘러나오는 음악과 내가 음악을 듣기 위해 방문한 공연장에서 듣는 음악은, 집안일을 하면서 무심하게 랜덤으로 재생시킨 MP3와 조심스레 먼지를 털고 바늘을 올린 LP의 소리는 듣는 이로 하여금 태도를 다르게 한다.

요즘 회사에서는 업무를 더 긴말하게 한다는 이유로 보고서나 이메일보다는 메신저로 하게 하는 추세이다.
갈수록 긴 글을 읽고 쓰는 빈도가 줄어들고 있는데 이 책을 읽으며 긴 글을 읽고 쓰는 연습이 되었으면 좋겠다.
모든 글을 책상에 앉아서 읽는다면 글을 읽는 것이 힘들어져 자주 읽지 않게 되겠지만 진지하게 읽는 법을 잊게 된다면 다시 습관을 들이기 어려울 것이다.

마지막으로 나는 현재 야간대학원 졸업논문 작성과 여행 가이드북 집필을 하고 있는데 이 책이 일련의 글쓰기들에 도움이 되었으면 좋겠다."
2023-03-13 15:53:31,"길인식","도서명: 데이터 중심 애플리케이션 설계
참여자: 길인식

목차 
데이터시스템의 기초, 분산데이터, 파생데이터

역자서문에서의 책
어떻게 데이터를 잘 보관하고 효율적으로 쓸수있는지 설명하는 책
데이터 처리의 기본기를 다지기 좋은 참고서

머리말에서의 책
1. 데이터중심과 계산중심의 애플리케이션이 있음
2. 지난 10년간 데이터 분야에서 분산 시스템이 크게 발전해왔고 데이터 중심 애플리케이션은 현재 기업 환경에 잘 맞음
3. 이러한 기술 변화에서 변하지 않는 원리를 이해해야함
*구글이나 아마존이 아니니 그냥 rdbm써라는 말은 진실이기도 하다. 하지만 작업에 걸맞는 도구를 선택하는것도 중요함

다짐
모르는 부분도 있어 이해를 잘 못할 수는 있지만 빠지지는 않고 해보겠습니다. 화이팅"
2023-03-13 19:05:48,"김현진","도서명: 데이터중심 애플리케이션 설계
참여자: 김현진

## 전반적인 내용

세 파트 -데이터 중심 애플리케이션, 데이터 분산, 데이터 파생 에 걸쳐 데이터와 관련된 문제를 해결하기 위한 방법을 설명합니다. 데이터 자체도 중요하지만, 데이터를 어떻게 활용하느냐가 더 중요합니다. 어떻게 많은 데이터를 잘 보관할 것인지, 보관된 데이터는 어떻게 효율적으로 사용할 수 있는지를 상세하게 설명하고 있습니다.

## 독서 전략

기억할만한 내용을 정리합니다.
실제 서비스에 도움이 될만한 부분을 집중하여 봅니다.
질문거리를 던지며, 질문을 해결해 봅니다.

## 다짐

책을 능동적으로 읽고 싶습니다. 서비스에 어떻게 적용할 수 있는지, 유용한 방법이 무엇인지 상기하며 책을 읽도록 노력하겠습니다."
2023-03-13 19:31:11,"최창훈","도서명 : 컴퓨터 네트워킹 하향식 접근 
참여자 : 최창훈

## 전반적인 내용

대부분의 네트워크 책이 물리 → 어플리케이션으로 가는데, 이 책은 책 이름 처럼 어플리케이션 → 물리로 하향식으로 설명이 되어 있습니다. 처음에 좀 더 와닿는 공부를 할 수 있을것 같습니다. 또한 각 장이 끝나면 연습문제와 실습문제로 구성되어있습니다.

## 독서 전략

- 네트워크가 큰 틀에서 어떻게 돌아가는구나를 이해하기
- 새로운 용어를 많이 접할텐데 너무 꽂히지 말기 (→ 어짜피 중요한 용어는 계속 나올테니..!)
- 개념적인 내용은 notion에 정리
- 각 장별로 실습문제 위주로 블로그에 정리

## 다짐

정글에서 네트워크에 대해서는 깊게 배울 시간이 없어서 아쉬웠습니다. 이번 기회에 파편화된 부분 공부가 아닌 네트워크 전체 흐름을 이해하고자 합니다. 
최우선 목표는 포기하지않고 완독하는 것이고, 두번째 목표는 완독하였을 때, 각 파트의 흐름이 기억 나는 독서를 하고자합니다.  파이팅입니다!!"
2023-03-13 20:02:18,"Seo","3/13 월 
https://lead-countess-db7.notion.site/DAY1-ee5d351558ba4725a90c253966164807"
2023-03-13 20:50:08,"박예린","쏙쏙 들어오는 함수형 코딩 _ 박예린
### 전반적인 내용

이 책은 함수형 프로그래밍을 통해 복잡한 코드를 유지 보수하기 쉽고, 안전하게 작성하는 방법에 대해서 설명하고 있다. 많은 글에서 함수형 프로그래밍이란 부수 효과를 제한하고 순수 함수를 이용해서만 프로그래밍을 작성하는 것이라고 말하지만, 이 책에서는 이러한 설명은 오해를 불러일으킬 수 있다고 말하며, 함수형 프로그래밍을 ‘부수효과를 잘 관리해서 코드의 아무 곳에나 있지 않도록 하는 것’이라고 정의했다. 또한 부수효과를 일으키는 코드와 그렇지 않은 코드, 데이터를 잘 구분하는 법부터 시작하여, 부수효과가 있는 코드를 잘 다루는 방법에 대하여 예시와 함께 설명하고 있다. 

### 독서 전략

새로 배운 점을 노션에 정리하면서 나중에 다시 찾아볼 수 있도록 기록을 남길 것이다.

또한 책은 함수형 프로그래밍을 실무에 도입할 수 있도록 예시와 연습문제를 제공하고 있다. 따라서 제시되어있는 예시를 깊게 이해하고, 연습문제를 스스로 풀어보며 배운 것을 실제로 활용할 수 있도록 체화하고 싶다. 

### 다짐

학부 때부터 함수형 프로그래밍 패러다임에 대해서 많이 들어왔고, ‘좋으니까 써라!’라는 말도 많이 들어서 어렴풋이 함수형 프로그래밍의 존재에 대해서 알고 있었다. 그러나 누군가가 ‘함수형 프로그래밍이 뭔데?’라고 물어보면 제대로 설명해주지 못했다. 나도 함수형 프로그래밍을 그저 ‘부수효과 없이 순수함수만으로 코드를 작성하는 것’ 이라고만 이해하고 있었는데, 사실 스스로도 ‘부수효과가 없는 프로그램이라는게 말이 되는건가?’라는 의문을 가진 채 그냥 들은 대로만 대충 이해하고 있었던 것 같다. 이 책을 읽고 나면 스스로 가졌던 그런 의문점이 많이 해소될 것 같다. 또한 개념적으로만, 글로만 이해하는 것이 아니라, 실무에서 직접 함수형 프로그래밍을 도입하여 도 좋은 코드를 작성할 수 있도록, 예제를 통해서 함수형 프로그래밍을 학습하고 싶다."
2023-03-13 21:22:08,"소재훈","📕 도서명: 컴퓨터 네트워킹 하향식 접근

🙋🏻 참여자: 소재훈

👨🏻‍🏫 전반적인 내용

네트워킹 하양식 접근 책은 챕터 1 ~ 6까지 네트워크의 각 계층별 설명, 챕터 7 ~ 9까지 네트워크의 보안 등 보다 넓게 네트워크에 대해서 다루는 책입니다.

네트워크에 대한 책 추천을 할 때 가장 많은 사람들이 해당 책을 추천할 만큼 좋은 책이며 수많은 대학의 네트워크 강의에서 해당 책을 참고하여 강의를 하는 등, 네트워크 관련해서는 필독서 중 하나인 책입니다.

💁🏻‍♂️독서 전략

- 해당 책의 각 쳅터 별로 노션에 주요 내용을 정리하기
- 책너두의 휴식 기간(일요일)에 해당 책과 관련된 강의 살펴보기
- 운영 중인 블로그에 정리 내용을 정리하여 올리기

👦🏻 다짐

- 보다 네트워크의 개념들을 정리하기 위해 시작한 만큼, 중간에 포기하지 않고 마지막까지 완독을 위해 달리고자 합니다."
2023-03-13 21:27:09,"이미정","# [쏙쏙 들어오는 함수형 코딩] DAY 1

다짐/전반적인 내용:

초반 프로젝트를 할 때 함수형 코딩이 대세라고 해서 개념에 대한 정확한 이해 없이 그냥 모든 것들을 함수형으로 작성했었다. 면접 준비를 하면서 약간의 개념 정도는 잡혔지만 아직은 깊이가 부족하기 때문에 이 책을 통해 함수형 프로그래밍과 조금 더 친해져보려고 한다. 이 책은 특히 마지막 부분에 자바스크립트 기반의 함수형 코딩 예제들이 많이 있기 때문에 참고하기도 좋을 것이라고 생각한다. 적어도 다음의 키워드는 꼭 얻어가기를 바란다. 

#불변성 #부수효과 #동시성

독서 전략:

한문장이라도 좋으니까 나의 언어로 요약해보자.

이루고 싶은 목표: 책너두 2기 완!주!

책을 다 읽을 때 쯤에는 함수형 프로그래밍의 본질과 개념을 잘 이해한 상태였으면 좋겠다. 

함수형 프로그래밍의 좋은 예시와 안 좋은 예시에 대한 개념이 잡혀있었으면 좋겠다.

책너두 1기를 통해 기초 루틴을 만들었기 때문에 그에 탄력을 받아 책너두 2기도 무사히 완주할 수 있기를"
2023-03-13 22:12:17,"강민규","여러분 다들 퇴근하셨나요? 오늘 꼭 다짐 쓰는 것 잊지마세요? 첫날 어떤 마음으로 시작했는가에 따라 나중의 결과가 많이 차이가 납니다. 오늘 하루 잘 마무리하세요~

@김형우 @김효선 @영동 @오홍근 @이강욱 @이현주 
원래 이틀 결석하면 이맘 때쯤 이렇게 멘션 해드립니다!
오늘은 첫날이라 특별히 아직 다짐 작성하지 않으신 분들 모두 태그드립니다~~"
2023-03-13 22:13:30,"김형우","https://engineer-diary.tistory.com/158"
2023-03-13 22:43:38,"영동","외국 다녀오느라 방금 한국 도착했습니다 얼른 이북 구매해서 보고 최대한 빠르게 공유드릴게요!"
2023-03-13 22:46:22,"강민규","넵~ 고생 많으시네요"
2023-03-13 22:46:27,"강민규","출장 갔다오셨나요"
2023-03-13 22:47:32,"영동","해외에서 공부중인 조카들 보러 갔다왓숩니다"
2023-03-13 22:47:39,"영동","따라 나가고 싶네요^~^"
2023-03-13 22:51:12,"정소영","와 지치실텐데 대단하십니다,, 🤧💪"
2023-03-13 22:55:11,"김효선","[2023.03.13] 팩트풀니스


# 전반적인 내용
1. 작가 : 한스 로슬링 - 소개글 중 사람의 잘못된 인식을 바꾸기 위해 평생을 헌신해온 그는 이라는 문구가 인상적이다.
2. 작가의 말 : 사실에 근거한 세계관으로 심각한 무지와 싸운다, 이 책은 천재 사람의 발명품이 아니라 재능/지식/관점 모두 다른 세사림의 끊임없는 토론과 논쟁 그리고 협력의 결과다. 나 혼자서는 불가능했을 일이다. 


# 독서 전략
작가의 관점과 배경을 온전하게 이해해보기

# 다짐
책 제목 그대로 완독 했을 때, 팩트에 근거해 세계를 바라보고 이해하는 사람이 되어 있기를 바란다"
2023-03-13 23:58:47,"강민규","소영님도 안하셨네요~ 빨리 하세요"
2023-03-13 23:59:25,"오홍근","[쏙쏙 들어오는 함수형 코딩][오홍근][day1]

전반적인 내용
- 부수효과를 잘 처리해야한다.
- 액션과 계산을 분리하는 것이 함수형 프로그래밍의 기본이다.

독서 전략
- 중요 문장에 줄쳐가면서 읽기!

다짐
1. OOP와 함수형 프로그래밍의 차이를 남들에게 간단히 설명할 수 있는 정도가 되기
2. 실무에 적용해보기"
2023-03-14 00:00:53,"강민규","혹시 공지 안읽으신 분 계실까봐 말씀드리는데, 출첵은 다음날 8시까지입니다. 혹여 00시가 지났다고 포기해버리시면 안됩니다"
2023-03-14 00:51:47,"정소영","[넛지:파이널 에디션]
### 내용

- 선택설계라는 개념을 만들어낸 넛지. 비이성적인 인강 행동의 비밀을 밝힌 저자가 다시 한 번 시대 변화에 따른 새로운 사례들을 내놓은 ‘nudge for good’ 
사람의 행동은 실제로 이성적이고 합리적인 선택지로만 행동하지 않는다. 하지만 공급자는 항상 올바른 경로로만 사람이 움직이는 것을 생각한다. 이 책을 통해 부드러운 개입으로 선택을 이끌어 낼 수 있는 ‘장치’, 선택설계에 대한 인사이트와 조언을 얻을 수 있을 것이라 기대한다.

### 독서 전략

- 저자가 말하는 인간행동과 선택에 대한 관점, 사례들을 북마크하고 생각해볼 것. 다양한 사례들을 습득한다는 생각으로 크게 한판을 읽고, 북마크한 것들을 다시 살펴보며 적용해본다면 어떻게 할 수 생각해볼 것.

### 다짐

- 이 책과 함께 데이터 분석에 대한 책도 읽고 있는데, 넛지에서 말하는 행동경제학이 함께 시너지가 나길 기대하고 있다. 바로 실무에 적용하는 것은 어렵겠지만, 사고력을 기르고 싶다. 단순히 숫자(지표)를 넘어 사용자 즉 사람에 대한 이해를 하고 싶고 이 책을 완독할 때 쯤에는 기대하는 모습에 한층 다가가 있는 모습을 기대해본다."
2023-03-14 01:21:42,"영동","전반적인 내용
함수형에 대한 개념부터 시작해 함수들의 성질을 기준으로 액션과 계산이라는 것으로 분류하고 개선하고 패턴화하는 방대한 내용을 다루는 책인 거 같다.
함수형 언어를 사용하는 것을 넘어 모든 프로그래머에게 도움이 되는 지혜를 담고 있다고 한다.


독서 전략
- 기존에 작성하던 객체지향 코드와 비교하고 저자가 설명하는 개념과 매칭 해보기
- 기존 코드 리팩토링하면서 해보기
- 유치원생에게 설명할 수 있도록 다 알도록 노력하기

다짐
코딩을 꽤 했다고 생각했지만, 쓱 훑어서는 이해되지 않는 내용들이 몇 가지 있어서 재밌게 읽어보도록 하겠습니다. 고통스럽겠지만 성장하겠죠. 뭐~"
2023-03-14 02:02:59,"이강욱","https://velog.io/@rivolt0421/%EC%B1%85-%EC%8F%99%EC%8F%99-%EB%93%A4%EC%96%B4%EC%98%A4%EB%8A%94-%ED%95%A8%EC%88%98%ED%98%95-%EC%BD%94%EB%94%A9-%EC%B2%AB%EB%82%A0%EB%8B%A4%EC%A7%90"
2023-03-14 02:14:59,"이현주","책: 소프트웨어 아키텍처 101

**전반적인 내용**
하나의 소프트웨어를 구성하는 전체와 부분들을 어떻게 설계해야 하는지, 그리고 그 설계는 시대에 맞춰 어떻게 변화해가야 하는지에 대한 방법론을 다루는 책인 것 같다. 빠르게 변화하는 특성을 가진 소프트웨어 엔지니어링 분야에 대해 타 공학과 마찬가지로 분석적이고 근본 있는(?) 접근을 하겠다는 저자의 포부가 드러난다. 어렴풋이 들어본 용어가 많이 나와서 반가운 한 편, 이게 다 작고 큰 방법론들이라는 게… 적응이 안 된다.

**독서 전략**
부담없이 훑어보고 모르는 것은 챗지피티와 회사 사람들과 논의해보기

**다짐**
키워드는 설명할 수 있을 정도의 지식을 건지고 끝내자.

https://codefordance.tistory.com/10"
2023-03-14 07:54:21,"강민규","삭제된 메시지입니다."
2023-03-14 07:54:46,"오홍근","저..요?"
2023-03-14 07:55:02,"강민규","제가 놓쳤네요;; 죄송합니다"
2023-03-14 07:55:43,"강민규","좋은 아침입니다. 오늘부터 본격적으로 독서를 시작하네요~ 오늘의 독서 스케줄입니다."
2023-03-14 07:56:07,"강민규","사진"
2023-03-14 07:56:24,"강민규","(참고)💡독서일지 작성 팁입니다.

1. 요약은 짧게 작성하세요.
2. 가장 중요한 부분만 발췌하세요.
3. 메모는 톡방에서 적극적으로 공유하세요.

요약 작성 시, 당일 독서 분량의 핵심을 간결하게 요약하고, 모든 내용을 다 적으려 하지 마세요. 요약을 너무 길게 쓰면 시간이 많이 들고 내용에 대한 소화를 충분하지 못할 수 있습니다. 

책에서 가장 중요한 부분을 인용하면 해당 부분의 중요성을 파악하는 데 도움이 됩니다. 발췌한 것을 완독 후에 빠르게 읽으면 복습에 큰 효과가 있습니다.

메모에는 독서 중 떠올랐던 아이디어나 주제, 이해하지 못한 내용에 대해 작성하고 공유하세요. 활발한 소통으로 책너두 동료들의 성장을 도와주세요. "
2023-03-14 08:15:21,"김연정","홍근님ㅋㅋㅋㅋㅋ당황쓰"
2023-03-14 14:06:48,"김민수","[화요일] 바바라 민토 논리의 기술
1부 논리적으로 글쓰기 - 1장 왜 피라미드 구조인가 - 피라미드 형태로 구성하기
[요약]
글을 통하여 상대방을 이해시키기 위해서는 상대방이 글을 어떻게 읽는지 알아야 한다.
1. 모든 사람들은 다른 경험과 지식을 가지고 있기 때문에 다른 방법으로 정보를 받아들인다.
2. 독자는 한 번에 한 가지 개념만 받아들일 수 있다.
3. 주제를 명확히 하지 않으면 독자는 내용을 이해하기 어렵다.
따라서 필자는 독자가 이해하기 쉽도록 생각을 구체적으로 표현하여 독자가 글을 쉽게 이해할 수 있도록 해야 한다.
이를 위하여 핵심이 먼저 나온 다음에 부수적인 내용이 나오도록 해야 한다.

[발췌]
""독자나 청중은 자연의 섭리에 따라 항상 자신의 눈과 귀로 받아들이는 사항을 연결할 수 있는 체계를 찾는다. 자기 생각을 의도한 바대로 전달하기 위해서는 사전에 독자에게 의도를 알려주어 이해하는 구조를 통일시켜야 한다."" (33p)
바바라 민토는 자신이 주장하는 바와 반대 방향으로 작성된 예시문을 통하여 문장과 문장 사이에 독자가 이해한 바를 상기시킨다. 그 뒤 글을 마지막까지 보여준 뒤에는 독자가 이해한 바는 글의 주제와 전혀 관련이 없었다는 것을 보여준다.

[메모]
바바라 민토는 끝까지 듣지 않아도 주제를 알 수 있어야 한다고 생각한다. 또한 글이 진행되면서 주제를 뒷받침하는 내용을 제시할 때 사고의 순서대로 기술할 것을 권한다."
2023-03-14 14:27:03,"길인식","삭제된 메시지입니다."
2023-03-14 14:28:16,"길인식","[화요일] 데이터 중심 애플리케이션 설계
[요약]
최근 많은 애플리케이션은 데이터 중심적이고 이에 맞는 시스템은 저마다 다른 특성을 갖습니다. 이러한 시스템을 설계할때는 신뢰성, 확장성, 유지보수성을 갖어야합니다. 그 중 오늘은 신뢰성을 설명합니다.
[발췌]
대개 결함으로 인해 장애가 발생하지 않게끔 내결함성 구조를 설계하는것이 가장 좋다. (7p)
[메모]
사람의 실수를 방지하기 위해서는 추상화, API, 관리 인터페이스를 적절히 사용하는것이 좋다고 합니다."
2023-03-14 16:02:14,"김채욱","
[화요일] 컴퓨터 네트워킹 하향식 접근
[내용 요약]
[컴퓨터 네트워크와 인터넷]
설명 : 1장에서는 네트워크 전반적인 내용을 훑어보면서 앞으로 공부할 내용을 익힙니다.
전체 내용 :
인터넷이란 무엇인가
네트워크 가장자리
네트워크 코어
패킷 교환 네트워크에서의 지연, 손실과 처리율
프로토콜 계층과 서비스 모델
보안 및 역사


[인터넷이란 무엇인가]
설명 : 인터넷의 정의를 2가지로 답할 수 있는데, 인터넷의 구성요소와 네트워킹 인프라 구조 관점에서 설명합니다.


[구성요소로 본 인터넷]
정의 : 물리적 호스트가 연결된 네트워크입니다.
호스트 : 컴퓨터 네트워크에 연결된 장치입니다. 이는 컴퓨터, 콘솔, 워크스테이션 등을 모두 포함합니다.
네트워크 : 장치들이 서로 연결이 되어서 소통을 할 수 있는 상태를 의미합니다. 소통이란, 데이터 혹은 자원을 주고 받을 수 있는 것을 의미합니다.
추가 설명 : 호스트가 있는 종단시스템은 통신 링크와 패킷 스위치로 네트워크 연결이 됩니다. 이후 데이터는 패킷 단위로 전송과 수신합니다. 이때 종단 시스템은 ISP를 통해서 인터넷에 연결됩니다.
종단시스템 : 네트워크에서 데이터 소스가 있는 위치 혹은 도착지를 의미합니다. 대부분 데스크톱이 종단 시스템에 위치합니다.
통신 링크 : 2개 이상의 호스트가 네트워크에서 물리적 혹은 논리적 연결을 하는 매개체입니다.
패킷 스위치 : 네트워크 장치로 패킷 데이터를 수신하고 도착지 주소로 전달하는 역할을 합니다.
패킷 : 네트워크로 데이터를 전송하는 단위입니다.
ISP : Internet Service Provider, 인터넷 접근을 제공하는 기관 혹은 회사를 의미합니다. 한국 같은 경우는 SKT, LG, KT가 대표적인 ISP입니다.

[서비스 측면에서 본 인터넷]
정의 : 인터넷이란 애플리케이션에 서비스를 제공하는 인프라 구조입니다.
추가 설명 : 개발자는 인터넷에 연결된 각 종단 시스템에서 실행되는 애플리케이션 서비스를 제공합니다. 이때 데이터를 전송, 수신하는 소켓 인터페이스를 정의합니다.
소켓 인터페이스 : 송신 프로그램이 따라야 하는 규칙의 집합입니다. '규칙'을 다른 말로 프로토콜로 표현하는 것 같습니다.
프로토콜 : 2개 이상의 개체간의 데이터 전송, 수신 시에 정해진 규칙을 의미합니다.

[네트워크 가장자리]
정의 : 가장자리를 다른 말로, 접속 네트워크로 표현합니다. 이는 종단시스템에 있는 호스트가 코어 네트워크에 연결을 제공합니다.
코어 네트워크 : 전체 네트워크에서 데이터 송수신을 담당하는 장치들의 집합을 의미합니다.
추가 설명 : 가장 대표적인 WIFI 외에 DSL, FTTH가 있지만, 오늘날 와이파이와 광역 무선 접속이 대표적인 접속 네트워크의 역할을 합니다.
WIFI : 물리적 케이블이 필요 없는 LAN, local area network,입니다. 라디오 웨이브를 이용해 공유기 주변에 인터넷을 연결합니다.
광역 무선 접속 : 무선 인터넷 연결 기술로 와이파이보다 더 넓은 범위의 연결이 가능합니다.

[발췌]
'''오늘날의 인터넷은 틀림없이 인류가 창조한 가장 거대한 공학적 시스템이며, 이는 수억개의 연결된 컴퓨터, 통신링크…자동차 등을 포함한 새롭게 인터넷에 연결된 ""사물들""로 구성된다'''

[메모]
[네트워크를 공부해야하는 이유]
디바이스간의 소통과 협업 : AI가 유행하는 현시대에 빅데이터 관리를 위해 서버간의 데이터 송수신이 필수이다. 이때 네트워크를 통해 데이터가 흐르기에, 필수적으로 공부해야하는 분야라고 생각합니다.
보안 : 네트워크는 해킹과 서버 공격에 취약한 점이 있습니다. 서버 개발자로써 네트워크를 이해해 유저 데이터를 보호할 의무가 있다고 생각합니다.

PS)네트워크 공부 중이니, 궁금하거나 부족한 점이 있으면 바로 말해주세요!
"
2023-03-14 16:02:34,"김채욱","https://blog.naver.com/health2297/222648333766"
2023-03-14 16:09:53,"영동","1일차 1-13 page

[요약]
함수형 프로그래밍은 코드를 액션, 계산, 데이터로 구분하며, 일급 추상이라는 개념을 통해 코드를 재사용하고자 하는 목표로 한다.
기존의 코드를 액션, 계산, 데이터로 잘 구분할 수 있다면 MSA에 적용할 수 있는 부분들이 많다. 

[발췌]
함수형 프로그래밍의 중요한 개념은 객체지향 프로그래밍이나 절차지향 프로그래밍을 가리지 않고 모든 프로그래밍 언어에서 사용할 수 있다는 것입니다. 함수형 프로그래밍의 진정한 아름다움은 코드 어느곳에나 적용 할 수 있는 유익한 내용이라는 점입니다. (5p)

[메모]
- 학문적 관점
1. 수학함수를 사용하고 사이드 이펙트를 피하는 것
2. 사이드 이펙트 없이 순수함수만 사용하는 프로그래밍 스타일(순수함수를 수학함수라고 볼 수 있다)
- 실용적인 측면
1. 사이드이펙트는 필요하다. 필요할땐 써야함.
2. 함수형 프로그래밍은 사이드이펙트의 문제를 알고 있기 때문에 잘 다루기 위한 도구를 알고 있다.
---

- 액션
   - 호출 가능, 시점 및 회수에 의존
     시간이 지남에 따라 안전하게 상태를 바꿀 수 있는 방법
     순서를 보장하는 방법
     액션이 정확히 한번만 실행되게 보장하는 방법

- 계산
   - 호출 가능, 언제나 같은 값 반환
   정확성을 위한 정적 분석
   소프트웨어 에서 쓸 수 있는 수학적 지식
   테스트 전략

- 데이터
   - 이벤트에 대한 사실을 기록
    효율적으로 접근하기 위해 데이터를 구성하는 방법
    데이터를 보관하기 위한 기술
    데이터를 이용하여 중요한 것을 발견하는 원칙

---
- MSA에서 다음 3가지를 항상 염두해야 한다.
1. 메시지 순서가 바뀔 수 있다.
2. 메시지는 한 번 이상 도착 할 수도 있고 도착하지 않을 수 있다.
3. 응답을 받지 못하면 무슨일이 생겼는지 알 수 없다.
액션과 계산, 데이터를 분리해내면 확장 가능한 시스템을 만들기 쉽다."
2023-03-14 16:20:26,"박예린","쏙쏙 들어오는 함수형 프로그래밍
DAY1 : 1~13p

### 요약

1. 기존의 함수형 프로그래밍 정의는 실용적이지 않으며, 학문적으로 바라보기보다는 엔지니어링적인 관점에서 함수형 프로그래밍을 바라봐야 함. 
2. 함수형 프로그래머는 코드를 액션, 계산, 데이터로 구분함
3. 액션, 계산, 데이터를 구분하면 분산 시스템과 같이 시간에 따라 바뀌는 값을 모델링할 때 발생하는 불확실성을 다루기 쉬워짐.

### 발췌

함수형 프로그래머는 부수 효과가 실제로 필요하지만 문제가 될 수 있다는 것을 알기 때문에 부수 효과를 잘 다루기 위한 도구를 많이 알고 있습니다. 정의에는 순수 함수만 쓰라는 것처럼 되어 있지만, 함수형 프로그래머는 순수하지 않은 함수도 사용합니다. (3p)

### 메모

함수형 프로그래밍에서 코드의 분류
1. 액션 : 실행 시점이나 횟수, 또는 둘 다에 의존함
2. 계산 : 입력값으로 출력값을 만드는 것. 같은 입력값을 가지고 계산하면 항상 같은 결과값을 가져옴. 실행 시점 / 횟수에 의존하지 않으며, 외부에 영향을 주지 않음. → 테스트하기 쉽고 안전함
3. 데이터 : 이벤트에 대해 기록한 사실"
2023-03-14 19:02:24,"강민규","여러분 다들 퇴근하셨나요? 오늘은 독서 첫날인만큼 결석하지않도록 해봅시다. 화이팅입니다~"
2023-03-14 19:11:01,"ㅈㅁㅁ","도서명: 인간 본성의 법칙
참여자: 금정민

1. 요약
- 인간은 이성적인 판단을 내리는 존재가 아니다.
- 감정을 기반으로 한 판단은 개인에게 당장 득이 될지라도, 조직에겐 큰 도움이 되지 않는다.
- 감정에 치중하면, 더 나은 생각과 잠재력이 막히게 된다.

- 인간은 실패의 원인을 외부에서 찾곤 한다.
- 이는 자기연민에 빠지게 하고, 무력감을 강조하게 된다.
- 실패를 일으키는 원인은 사실, 비이성적 성향 때문이기도 하다.
- 그 이유는 우리가 같은 실수를 반복하고 부정적 패턴을 만들어내는 건, 진짜 원인을 들여다보지 않기 때문이다.

2. 메모
- 이성적이 되기 위해선?

~장기적인 영향을 고려해서 판단할 것
~객관적 지표를 바탕으로 결정할 것
~장기적 목표를 가질 것
~자신이 비이성적인 성향임을 인정하고, 경계를 늦추지 않을 것
~순간의 감정이 아닌, 자신만의 기준(더 나은 조직문화, 개인의 발전을 위해)을 세워 의사결정할 것"
2023-03-14 19:55:54,"Seo","3/14 화
https://lead-countess-db7.notion.site/DAY1-0617567e637744358c8599b12aa1c599"
2023-03-14 21:15:30,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]1~13pg

1. 요약

side effects: anything function does other than returning a value 

ex) sending email & modifying global state & reading a file 

pure functions: always produce the same return value

→ easier to understand & control

actions depend on when they are called & how many times they are called

 

distinguish actions calculations data

use first-class abstractions - reactive architecture & onion architecture

1. 발췌

1. 메모"
2023-03-14 22:06:23,"김효선","3/14 팩트풀니스

https://www.notion.so/2023-03-14-35-41p-7d438a0993554b829de5374c8f035491?pvs=4"
2023-03-14 23:24:13,"최창훈","3/14 컴퓨터 네트워킹 하향식 접근 

https://cautious-ocarina-cca.notion.site/Chapter1-f46318161f8b439d9e7a889dd8fad3b2"
2023-03-15 00:07:22,"소재훈","(3/14) 컴퓨터 네트워킹 하양식 접근입니다!"
2023-03-15 00:07:42,"오홍근","[쏙쏙 들어오는 함수형 코딩][오홍근][day2]
1-13p

<요약>
함수형 프로그래밍에서는 코드를 액션, 계산, 데이터 세 가지로 분류한다.
- 액션은 호출하는 시점과 횟수에 의존한다.
- 데이터와 계산은 실행 시점이나 횟수에 의존하지 않는다.
-> 코드를 데이터와 계산으로 바꿀수록 분산 시스템에서 생기는 여러가지 문제를 해결할 수 있다.

함수형 프로그래밍에서 중요한 두 가지 개념
1. 액션, 계산, 데이터를 구분해서 생각하는 것
2. 일급 추상"
2023-03-15 00:07:44,"소재훈","https://geode-drizzle-777.notion.site/1-0c86381b1d2b4858b8f26479a480d823"
2023-03-15 00:07:56,"소재훈","https://geode-drizzle-777.notion.site/2-NetWork-Edge-2f87d6ae3d23466abbfc3fa0ef74418c"
2023-03-15 00:23:48,"김형우","https://engineer-diary.tistory.com/159"
2023-03-15 02:59:29,"이현주","https://codefordance.tistory.com/11"
2023-03-15 07:12:35,"김현진","데이터중심애플리케이설계

https://ongoingjin.notion.site/Day02-3-10p-9315a8bf221c433aa0542a2c51d4273e"
2023-03-15 07:56:04,"강민규","안녕하세요 여러분! 오늘 날씨가 너무 좋네요~ 오늘도 즐거운 하루 보내세요 ㅎㅎ"
2023-03-15 07:56:10,"강민규","사진"
2023-03-15 08:00:41,"강민규","팩트풀니스 스케줄이 잘못되어있네요 42페이부터 보시면 됩니다~
일간 그리고 주간 독서 스케줄은 아래 링크에서도 확인하실 수 있습니다!"
2023-03-15 08:00:43,"강민규","https://www.notion.so/breakbook/542c38689d104a2db4fdf2b04211db4c?pvs=4"
2023-03-15 08:06:17,"강민규","https://breakbook.notion.site/542c38689d104a2db4fdf2b04211db4c"
2023-03-15 08:37:15,"김민수","[수요일] 바바라 민토 논리의 기술
1부 논리적으로 글쓰기 - 1장 왜 피라미드 구조인가 - 아래에서 위로 생각하기
[요약]
글이 정확히 피라미드 형태로 구성되어 있는지를 확인하기 위해서는 다음의 세 가지 규칙을 점검해야 한다.
1. 메시지는 하위 계층의 메시지를 요약
2. 그룹 내의 메시지는 일정 종류
3. 그룹 내 메시지는 항상 논리적 순서로 배열

[발췌]
""어떤 순서에 따라 배열하는가는 어떤 분석 프로세스를 통해 그루핑을 했는가에 따라 결정된다."" (38p)
글을 구성하는 방법에 따라 배열하는 방법도 달라야 함을 언급

[메모]
바바라 민토는 배열의 방법을 연역 구조 시간 비교 4가지로 정의하였는데 정말 다른 방법은 없는 걸까?"
2023-03-15 20:19:47,"강민규","여러분 오늘도 좋은 하루 보내셨나요~ 첫 독서일지는 대부분 제출해주셨군요! 시작이 반입니다. 이 기세를 몰아 남은 9주 끝까지 해봅시다!"
2023-03-15 20:20:14,"강민규","@정소영 @이강욱 두분은 오늘 이틀치 분량으로 제출해주세요~ "
2023-03-15 20:25:57,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]14~26pg

요약

1)  distinction between actions calculations and data.

2) using higher-order abstractions 

actions: roll out dough, deliver pizza, order ingredients

calculations: double a recipe, determine a shopping list

data: customer orders, receipts, recipes 

top: changes frequently - recipe for weekly special

bottom: changes seldom - object, arrays

→ stratified design (creates layers: business rules, domain rules, tech stack)

distributed system: 

- need to coordinate timeline
- timelines need to be independent of order
- no matter how busy it is, get a good result
- use timeline diagram to understand the system

→ cut timeline - make robots wait for each other

발췌

메모"
2023-03-15 20:40:23,"김채욱","@최창훈, @소재훈. 매주 일요일에 컴퓨터 네트워킹 하향식 접근으로 1시간 정도 스터디 가지는거에 어떻게 생각하세요? 글로 쓰고 나서 말로 상대방에게 전달하면 기억에 더 오래 남는데, 혹시 괜찮으시면 스터디 같이 하실래요?"
2023-03-15 20:46:31,"최창훈","넵 저는 좋습니다!  어떻게 공부하면 좋을지 고민하고 있었거든요.
주1회로 시간은 유동적으로 진행해도 괜찮을까요?"
2023-03-15 20:49:13,"김채욱","넵! 시간은 유동적으로해요"
2023-03-15 20:54:41,"영동","함수형 프로그래밍 14-16

요약
코드를 계층형으로 구분

가장 빈번히 바뀌는 것, 액션
------------------------- 
항상 같은 값을 주는 것, 계산
-------------------------
종속성이 강하지만 잘 바뀌지 않는것, 데이터와 언어관련

액션은 시간에 영향을 받는다 다른 말로 다른액션순서에 영향을 받는다

액션들의 순서는 매우 중요하며, 시스템이 확장되어 분산 시스템으로 갈때에도 액션의 실행 순서는 보장 되어야한다

하지만 확장된 시스템에서는 액션들의 실행 순서는 보장되지 않는다. 이러한 문제를 해결하기 위해서는 타임라인 커팅을 사용한다. 커팅은 액션의 흐름에서 액션들의 결과가 모두 나올때 까지 대기 하기 때문에 이후 액션들에서 문제가 생기지 않는다.

발췌

메모
"
2023-03-15 21:06:20,"ㅈㅁㅁ","제목: 인간 본성의 법칙
참여자: 금정민
회차: 2회차

### 요약
- 이성적으로 가기 위해 3단계
 
[1단계] 내 안의 편항을 자각할 것
 a. 확증 편향: 나는 증거를 살펴보고 대체로 이성적인 의사결정을 내린다는 착각
 b. 확신 편향: 내가 이렇게 확신하니까 틀림없는 사실이라는 착각
 c. 겉모습 편향: 내가 이렇게 확신하니까 틀림없는 사실이라는 착각
 d. 집단 편향: 내가 가진 생각은 집단의 말에 동조된 게 아니라는 착각
 e. 탓하기 편향: 자신의 실수를 들여다보는 걸 피하면서, 경험과 실수에서 배우고 있다는 착각
 f. 우월성 편향: 자신이 남보다 더 이성적이고 윤리적이라는 착각

[2단계] 자신의 심리적 방아쇠를 확인할 것
- 자신을 흥분하게 하여 이성적 판단을 흐리게 하는 요인을 파악할 것
- 심리적 방아쇠가 당겨지는 경우는, 심리적 압박, 감정을 자극하는 사람, 집단효과이 있음

[3단계] 이성적 상태에 다가갈 것
 - 이성적 상태에 다가가기 위해 해야할 것
  > 자신을 이해할 것 (감정적 자아는 무지를 기반으로 함)
  > 감정의 끝을 확인할 것(자신의 분노의 출처가 시기심인가 피해망상인지 확인해야 함)
 > 대응시간을 늘릴 것
 > 사람을 하나의 현상으로 볼 것
   (사람은 나 만의 정답으로 보지말고, 작은 우주로 생각해라)
   (사람(소우주)들이 무슨 말이나 행동을 하면, 저항하거나 바꾸려 들지 말고 분석하고 이해해라)


### 메모
- 내가 잘 알고 있다는 착각에 유의해야 한다.
- 흥분했을 때 어떤 판단도 내리지 말고, 한 발 물러서서 분석해야 한다.
- 사람을 하나의 현상으로 보면 상대를 이해하는데 거부를 줄일 수 있다."
2023-03-15 22:40:52,"강민규","@정소영 소영님 확인하셨죠? 오늘 꼭 하셔야합니다~"
2023-03-15 23:04:10,"김채욱","[컴퓨터 네트워킹 하양식 접근]

[내용 요약]
[네트워크 코어]

설명 : 종단 시스템이 접속 네트워크를 통해 데이터 전송하면, 해당 데이터들이 코어 네트워크의 통신 링크와 패킷 스위치를 통해 도착지의 호스트로 전송됩니다.


[패킷 교환 방식]

설명 : 대부분의 패킷 스위치는 저장-후-전달 전송 방식으로 패킷을 송수신합니다. 데이터를 패킷으로 나눈 후 전송하고 나면, 중간 노드(라우터 혹은 스위치)의 버퍼에 임시적으로 저장되고 도착지로 가는 다음 노드에게 전송합니다.

특징 :

효율적인 네트워크 자원 사용 : 패킷이 다수의 노드를 통해 전송되면서, 네트워크 로드가 균형적으로 사용됩니다.

확장성 : 다수의 유저가 네트워크에 연결되고 사용하더라도, 이를 수용할 수 있는 방식입니다.

Fault Tolerance : 특정 노드가 네트워크 오류가 생겨도 다른 루트로 전송이 가능합니다.


[출력 버퍼]

정의 : 패킷 스위치 안에 임시로 패킷을 임시로 저장하는 버퍼로, 다른 노드로 전송하기 전에 저장을 먼저 합니다.

추가 설명 : 출력 버퍼는 다음과 같은 역할을 합니다

혼잡 제어 : 패킷 스위치의 수신량이 전송량보다 클 경우, 패킷을 저장할 공간이 필요합니다.

링크 속도 관리 : 코어 네트워크 상에서 각 노드들의 전송률 차이가 있는데, 패킷 전송시 다음 노드의 전송률에 따라 데이터 전송률을 조절합니다

QoS : Quality of Service, 패킷의 중요도에 따라 다른 스케줄링 기법을 사용할 수 있습니다.


[큐잉 지연과 패킷 손실]

큐잉 지연 정의 : 데이터 전송하기 전에 패킷이 노드에 저장되어 있는 시간을 의미합니다.

패킷 손실 정의 : 패킷이 도착지에 가기전에 네트워크 오류를 만나 실패한 것입니다.

손실 원인 :

네트워크 혼잡 : 버퍼가 꽉 찬 경우, 들어오는 패킷을 'drop'합니다

물리 링크 문제 : 물리적인 링크가 손상되어 패킷이 손실됩니다.


[전달 테이블과 라우팅 프로토콜]

전달 테이블 정의 : 주로 라우터나 스위치에서 사용하는 데이터 구조로, 패킷을 적절한 경로로 전송하는 역할을 합니다.

라우팅 프로토콜 정의 : 주로 라우터에서 전달 테이블을 이용해 동적으로 최적의 경로 탐색을 합니다.


[회선 교환과 패킷 교환]

회선 교환 정의 : 전통적인 통신 연결 방식으로 2개의 장치를 회선연결을 통해 데이터를 송수신합니다.

패킷 교환 정의 : 데이터를 패킷으로 분리시켜 송수신하는 방식입니다. 도착지에서는 모든 패킷을 받아서 기존 데이터 형태로 재형성합니다.

패킷 교환이 회선 교환 방식에게 갖는 상대적 장점 :

더 많은 사용자 수용 : 회선 교환은 사용자의 수에 따라 링크가 비례해서 사용되기에, 최대 사용자 수용에 있어서 한계가 있지만, 패킷 교환은 더 많은 사용자를 허용한다

대등한 성능 : 회선 교환 방식은 종단간 일정한 전송률을 보장하지만, 패킷 교환에서도 사용자의 수가 적을 경우, 회선 교환 방식과 대등한 성능을 냅니다.


대역폭 : 링크 혹은 채널에서 최대 데이터 전송률을 의미합니다.


[ISP 계층 구조]

설명 : 네트워크의 네트워크로 그물망(mesh) 형태로 전세계 ISP가 연결된 것을 계층적으로 나누어 표현합니다.

1-계층 ISP : 글로벌 네트워크입니다. 이는 전체 인터넷을 틀을 구성하는 ISP입니다.

2-계층 ISP : 지역 혹은 국가적 ISP입니다. 지역적으로 하나의 나라 혹은 주요 지점의 네트워크입니다.

3-계층 ISP : 로컬 ISP입니다. end-users와 직접적으로 연결되는 네트워크입니다.

IXP : Internet Exchange Point, ISP 계층구조로 통해 트래픽을 교환하지 않고 직접 통신이 가능합니다. 다른 말로 표현하면, 1계층 ISP까지 데이터가 상위한 후 다른 ISP을 통해 데이터를 흐르는 것보다 IXP끼리 직접 통신이 가능해 성능 혹은 자원적인 면에서 유리합니다.

Content Provider Networks : 회사에 의해 운영 및 관리되어지는 네트워크입니다. 거대한 콘텐츠를 실시간 전송, 클라우드 서비스 제공 등을 위해 사용됩니다. ISP 직접 연결이 되어 있거나 자체 네트워크를 통해 사용자에게 데이터를 전송합니다.


[패킷 교환 네트워크에서의 지연, 손실과 처리율]

설명 : 패킷이 한 호스트에서 여러 라우터들을 통해 도착지 호스트까지 가는데 있어서 생기는 지연들입니다.

처리 지연 : 패킷 헤더를 조사하고 다음 노드로 보내는데 결정하는 시간입니다.

큐잉 지연 : 버퍼 혹은 큐에서 전송되기까지 기다리고 있는 시간입니다. 다른 패킷이 전송 중인 상태가 아니고 버퍼나 큐가 비워있으면 큐잉 지연은 0입니다.

전송 지연 : 버퍼 혹은 큐에 있는 데이터를 링크로 밀어넣는데 걸리는 시간입니다.

전파 지연 : 다음 노드까지 전파되는데 걸리는 시간입니다.

﻿[발췌]
""""""인터넷에서 패킷이 실제로 거쳐 가는 종단간의 경로를 실제로 보고 싶은가? 이제 Traceroute 프로그램을 사용해 보자""""""

[메모]

[애플리케이션부터 물리매체까지]

네트워크의 네트워크가 있을 정도로 인터넷 공간은 방대한 곳인 것 같습니다. 공부해야하는 양이 많고 깊이 팔 수록 끝이 없다고 생각이 듭니다. 제 목표는 핵심 개념을 위주로 익히고, 자세한 것은 실무에서 혹은 대학원에서 공부 해야하지 않을가 싶습니다.

https://blog.naver.com/health2297/222648333766"
2023-03-15 23:39:08,"김효선","3/15 팩트풀니스

https://heady-dinghy-922.notion.site/2023-03-15-42-52p-da734a0a280d4fa2ac385b14b8aeef69"
2023-03-16 00:10:51,"오홍근","[쏙쏙 들어오는 함수형 코딩][오홍근][day3]
14-26p

<요약>
- 계층화 설계 : 비즈니스 규칙, 도메인 규칙, 기술 스택 계층으로 나눔
- 액션은 실행 시점에 의존. 타임라인 다이어그램을 사용하여 액션이 어떻게 수행되는지 확인.
- 커팅 : 여러 타임라인의 시간을 맞추는 작업"
2023-03-16 00:25:42,"길인식","[화요일] 데이터 중심 애플리케이션 설계
[요약]
확장성 : 부하가 증가해도 좋은 성능을 유지하기 위한 전략
유지보수성 : 운영성, 단순성, 발전성 (추상화 필요)
[발췌]
적합한 확장성을 갖춘 아키텍처는 주요 동작이 무엇이고 잘 하지 않는 동작이 무엇인지에 대한 가정을 바탕으로 구축한다. 18p
[메모]
주요동작이 무엇인지 잘 파악하는것이 중요!"
2023-03-16 00:46:51,"정소영","🫡🫡
<넛지 : 파이널 에디션> day1-2

- 요약 
우리는 천재인 동시에 바보다. - 인간은 비현실적인 행동을 하며 지나치게 낙관한다. “나도 정답을 알지만..” 

-내용
[어림짐작 : 유용하지만 체계적 편향으로 이어질 수 있다.]
 • 기준점 효과 : 자기가 알고 있는 숫자를 기준으로 삼아 최초로 추정했던 내용을 자기가 생각하기에 적당한 방향으로 조정함. 
     • 기준점이 곧 넛지 역할을 할 수 있음. - 합리적인 기준/범위을 제시한다면 득을 볼수도, 반발효과가 있을 수도 있음

• 가용성 - 비슷한 사례가 머리에 얼마나 금방 떠오르는지 따져서 가능성을 평가
• 대표성 - 유사성. 고정관념과 얼마나 닮았는지

[지나치게 낙관]
[손실회피] - [현상유지편향]
• 이미 가진 것을 포기하는 쓰라림은 같은 것을 얻을 때의 행복감보다 2배
• 이월효과. 최상의 기본설정값으로 무의식적 선택과 손실회피를 곱하는 넛지.

[자동시스템과 숙고시스템]

- 메모
현대사회에서는 사람들이 끊임없이 선택하면서도 그 선택 하나하나를 깊고 오래 생각할 여유가 없다. 주의력이 제한되어 있기도 하다. 질문이 제기 될때, 질문을 변형할 때 곧이곧대로 받아들이고 자기의 답이 달라질 지 따져보지 않는다. 넛지로 얼마든지 바꿔놓을 수 있다."
2023-03-16 01:42:48,"이강욱","https://velog.io/@rivolt0421/%EC%B1%85-%EC%8F%99%EC%8F%99-%EB%93%A4%EC%96%B4%EC%98%A4%EB%8A%94-%ED%95%A8%EC%88%98%ED%98%95-%EC%BD%94%EB%94%A9-23"
2023-03-16 03:26:56,"이현주","https://codefordance.tistory.com/12"
2023-03-16 03:49:04,"최창훈","컴퓨터 네트워킹 하향식 접근 ~1.3.2
https://cautious-ocarina-cca.notion.site/Chapter1-f46318161f8b439d9e7a889dd8fad3b2"
2023-03-16 07:31:36,"박예린","쏙쏙 들어오는 함수형 프로그래밍
DAY2: 14 ~ 26p

요약
1. 액션과 계산, 데이터를 구분하는 일이 함수형 프로그래머에게 가장 중요하다.
2. 함수형 프로그래머는 유지보수를 잘 하기 위해 계층형 설계를 사용한다.
3. 타임라인 다이어그램을 그리면 시간에 따라 변하는 액션을 시각화 할 수 있다.
4. 타임라인 커팅은 여러 타임라인이 동시에 진행될 때 서로 순서를 맞추는 방법이다.


"
2023-03-16 07:52:47,"강민규","안녕하세요 여러분 좋은 아침입니다. 벌써 목요일이네요. 날씨 너무 좋아요. 오늘은 일찍 퇴근 하고 책 읽어요 ㅎㅎ"
2023-03-16 07:55:34,"김현진","데이터중심 애플리케이션 셜계
https://ongoingjin.notion.site/Day02-11-26p-6b03088cfd234e6288c2c7a112f9a7c4"
2023-03-16 07:56:18,"강민규","사진"
2023-03-16 07:58:03,"김민수","[목요일] 바바라 민토 논리의 기술
2부 피라미드 내부 구조 살펴보기
[요약]
1. 피라미드 내 메시지는 질의응답식으로 독자로부터 질문을 유도할 수 있도록 작성한다. (수직적)
2. 메시지는 연역적 혹은 귀납적 추론을 통해 독자의 질문에 답변한다 (수평적)
3. 도입부는 질문을 유발하게 하며 본문은 답변할 수 있는 구조로 전개되어야 한다.

[발췌]
""피라미드 구조의 가장 큰 장점은 메시지의 수직적 관계를 살펴보면 자연스럽게 생각을 정리할 수 있다는 것이다. 여기서 중요한 것은 당신의 메시지를 통해 유발된 독자의 질문은 한 단계 하위 계층에서 수평적으로 답변되어야 한다는 점이다."" (47p)
수직적으로 단계를 내려갈수록 더 자세한 내용이 나오게 된다. 따라서 상위 단계에서 발생된 질문은 하위 단계에서 답변되고, 하나 혹은 여러 질문과 답변이 모여 하나의 상위 단계가 구성된다.

[메모]
'수직적인'이라는 표현이 많이 나오는데 만약 내가 쓴 글이었다면 '선형적인'이라는 표현이 적합했을 문장도 있다.
하지만 하나의 글에 동일한 표현을 반복해서 사용하는 것은 이점이 많기 때문에 무엇이 옳고 그르다고 하기는 어렵다."
2023-03-16 09:55:46,"영동","함수형코딩 27-41p

요약
함수형 코딩의 1차 목표인 액션 계산 데이터를 나누는 것을 이야기한다.

해결하고자 하는 문제를 간략히 나누다 보면 온통 액션으로 이루어져 있다(그렇게 보인다)

실제로는 액션안에는 계산과 데이터를 분리 해낼 요소들이 굉장히 많고 끝없이 분리 할 수 있다. 책에서는 분리를 어느 단계까지 해야하는지 아는것이 중요하다고 말한다.

액션을 잘게 분리를 하다보면 데이터는 잘 분리 되는데 생각보다 계산이 잘 보이지 않을 수 있다. 문제를 해결하기 위해 생각을 할때 계산은 머리속에서 알아서 처리해서 데이터를 내기 때문이라고 책은 말한다.

책에서는 장보기를 예시로 든다. 냉장고에 있는 재고와 필요한 재고를 가지고 내가 사야할 물건을 결정하게 되는데(계산) 실제 우리가 행동 할 때 장을 보다가 중간에 멈춰서 필요한 물건을 계산하지 않고 바로바로 결정하기 때문에 계산이 눈에 잘 띄지 않는다고 말한다. 

발췌
- 사실 계산 단계가 있지만 잘 보이지 않는 이유는 계산이 우리 사고에 녹아 있기 때문 입니다
- 어떤 단계에서 무엇인가 결정해야 할 것이 있는지 또는 무엇인가 계획해서 방법을 찾아야할 것이 있는지 스스로에게 물어보면 됩니다. 결정과 계획은 계산이 될 가능성이 높기 때문입니다.(36p)

메모
액션의 분리는 어느 단계까지 해야하는 걸까?"
2023-03-16 09:59:08,"영동","메모에 대한 답

액션의 분리는 문제를 이해하고 해결하는데 필요한 정도로만 수행하는 것이 좋다. 과도한 분리는 코드의 가독성과 효율성을 저해할 수 있으므로, 적절한 수준에서의 분리를 통해 문제 해결에 집중하는 것이 중요하다.
"
2023-03-16 10:15:04,"김채욱","[3/16(목)_컴퓨터 네트워킹 하향식 접근]

[내용 요약]

[병목 링크]

정의 : 특정 링크의 성능이 저조해 전체 네트워크 성능을 떨어트리는 부분 네트워크 세그먼트입니다.

원인 :

불충분한 Bandwidth : 수용 가능한 공간과 데이터 전송률이 낮을 시에, 링크에 통하는 데이터의 양이 데이터 전송량 보다 많아지면서 버퍼에 대기 혹은 패킷 drop 현상이 일어납니다.

네트워크 혼잡 : 다수의 유저로부터 대량의 트래픽이 특정 링크로 전달되면, 전송률에 유저의 수를 나누어 적은 전송률이 된다

해결책 :

Load Balancing : 네트워크 트래픽을 분산 처리해서 다수의 링크로 전송하게 끔하여서 병목 구간의 영향을 줄입니다.

네트워크 모니터링과 최적화 : 정기적으로 병목 구간을 확인해 문제가 발생하는 이슈를 점검합니다.


[프로토콜 계층화]

정의 : 데이터 송수신 프로토콜을 계층 구조로 나눈것을 의미합니다.

추가 설명 : 각 계층마다 특정 기능을 분리함으로써, 컴"
2023-03-16 12:52:04,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]27~41pg

요약

how to identify actions, calculations, data?

actions: functions with side-effects, side-effecting functions, impure functions .

depends on how many times / when they are run 

ex) send an email, read from a database

calculations: pure functions, mathematical functions , also called referentially transparent b/c replaced by its result 

ex) find maximum number

data: facts about events

ex) email address

breaking down actions, calculations, data:

data can be composed of more data- data is just data

발췌

actions can be complex miasmas of actions, calculations, and data. don’t be statisfied until you’ve broken them apart

data is useful mostly because of what it can’t do. it is inert, that is what lets it be so well understood. Data has no meaning without interpretation, it’s just bytes. 

메모

actions , calculations 대조되는 개념? calculations은 side-effects가 없는가?

copy-on-write, defensive copying ?"
2023-03-16 13:42:18,"길인식","[목요일] 데이터 중심 애플리케이션 설계
[요약]
관계형 모델은 오늘날 대부분 서비스에서 사용되고 문서모델은 관계형 모델보다 확장성, 무료, 특수 질의동작을 지원하기위해 생겼다
[발췌]
Json표현은 다중테이블 스키마보다 더 나은 지역성을 갖는다. p32
[메모]
엔티티에 문자열을 쓸수도 있지만 링크나 추가정보를 참조하면 다양한 기능을 포함시킬수 있습니다."
2023-03-16 20:43:17,"Seo","3/15 수
https://lead-countess-db7.notion.site/DAY2-94326c69707d44729bee32a4b363daa3
3/16 목 
https://lead-countess-db7.notion.site/DAY3-f33934c8209747429aec68f6ec6c8c24"
2023-03-16 20:57:13,"ㅈㅁㅁ","제목: 인간 본성의 법칙
참여자: 금정민
회차: 3회차

## 요약
### 사람은 관심받는 걸 좋아한다.
- 사람은 관심을 받는 것을 좋아하며, 이를 얻기 위해 자아성을 만들어 갈증을 해소한다. 
- 하지만 자아성이 잘못 형성될 경우, 심한 자기도취자가 될 수 있다. 
- 건강한 자기도취자가 되기 위해서는 변신이 필요하다.
### 공감적 태도는 중요하다.
- 공감은 타인과 관계를 맺는 새로운 방식이다.
- 우리는 순간적 판단으로 타인을 판단하는데, 무지와 타고난 편향으로 타인을 잘 못 판단할 수 있다.

## 메모
### 심한 자기도취에 빠지지 않는 법

1. 심한 자기도취자에 대해 온전히 이해해야 한다.
- 제일 위험한 유형은 자기도취적 리더다.

2. 자기 본성에 정직해야 한다.우리는 누구나 자기도취자다.
- 정도의 차이가 있을 뿐, 우리는 누구나 자기 안에 빠져있다.
- 단지 우리는 심한 자기도취자가 되지 않기 위해, 스스로에게 정직해야 한다.

3. 건강한 자기도취자가 되기 위해 변신을 시작해야 한다.
-  건강한 자기도취자는 더 강인하고 회복력 있는 자이를 가지고 있다.
-  건강한 자기도취자는 모욕이나 상처를 받아도 빨리 회복하며, 남들의 인정에 매달리지 않는다.
- 자신에게 한계가 있고 단점이 있음을 깨달고 있다.
- 내면이 단단하기에 모욕적인 말도 인신공격으로 받아들이지 않는다.

### 올바른 공감능력을 기르는 법
- 일상대화에서, 내 의견을 말하고 싶은 충돌을 거슬러 상대의 관점을 열렬히 듣을 것
- 공감적 태도를 취할 수 있는 가 여부는 자기애가 어느정도 있는지와 연관되어 있다.
- 내가 남보다 우월하다고 느끼거나 불안에 사로잡혀 있다면 공감의 깊이는 얕을 수밖에 없다.
- 당신은 자신의 흠결까지 포함해 자신을 온전히 받아들어야 한다.

### 공감을 늘리는 방법은?
- 만나는 사람이 많을 수록 높아진다.
- 생각을 유동적으로 가져라.
- 사람에 대한 판단은 단 한번으로 끝내지 마라"
2023-03-16 21:07:20,"김효선","3/16 팩트풀니스

https://www.notion.so/2023-03-16-53-60p-6e5fbe84688148a7b0aad7cd4f70664e"
2023-03-16 21:26:45,"강민규","여러분 퇴근하시고 다들 독서 하고 계신가요? 이번 주도 이제 거의 끝이났군요! 주말이면 조금 쉬엄쉬엄 할 수 있으니 화이팅입니다!!"
2023-03-16 21:27:18,"강민규","@김형우 @소재훈 두분은 수요일 분량을 제출하지 않은 것으로 확인이 되네요~ 오늘 이틀치 분량 꼭 올려주세요!!"
2023-03-16 21:54:09,"김민수","사진"
2023-03-16 21:54:12,"김민수","퇴근하고 한권 끝냈네요
다들 좋은하루 보내세요~"
2023-03-16 21:54:42,"정소영","👍👍"
2023-03-16 22:00:46,"김채욱","@소재훈 재훈님 혹시 스터디 관심 있으시면 말씀해 주세요! "
2023-03-16 22:24:21,"소재훈","3월 15일(수) , 3월 16일(목) 컴퓨터 네트워킹 하양식 접근Day2, Day3 입니다!
제출자: 소재훈
2. 네트워크의 가장자리- 물리매체 부분 추가

https://geode-drizzle-777.notion.site/2-NetWork-Edge-2f87d6ae3d23466abbfc3fa0ef74418c

3. 네트워크 코어

https://geode-drizzle-777.notion.site/3-Core-b1db7225c50743ef9adc9f17c2917d7b

4. 패킷 교환 네트워크에서의 지연, 손실과 처리율

https://geode-drizzle-777.notion.site/4-06bacaac42934c92bdc4ef058b1e8879

5. 프로토콜 계층과 서비스 모델

https://geode-drizzle-777.notion.site/5-74da4a11f3fc4b97b2c3e3987ba9932b

6.공격받는 네트워크
https://geode-drizzle-777.notion.site/6-8fbe414789314b24a38a0b2a162e156d"
2023-03-16 22:25:48,"강민규","재훈님은 정리를 상당히 잘하시는군요!"
2023-03-16 22:27:06,"소재훈","@강민규 감사합니다!👦🏻👦🏻"
2023-03-17 00:36:48,"김형우","https://engineer-diary.tistory.com/160"
2023-03-17 00:36:59,"김형우","https://engineer-diary.tistory.com/161"
2023-03-17 00:57:14,"오홍근","[쏙쏙 들어오는 함수형 코딩][오홍근][day4]
27-41p

<요약>
- 액션에 숨어있는 다른 액션/계산/데이터를 발견하기 위해 문제를 최대한 나누는 것이 좋다.
  함수형 프로그래밍에서는 액션을 어디까지 나눌지 아는 것이 중요하다.
- 계산은 우리 사고 과정에 녹아있어 잘 발견되지 않을 수 있다. > 결정과 계획은 계산이 될 가능성이 높다."
2023-03-17 06:15:18,"김현진","데이터중심 애플리케이션 셜계
https://www.notion.so/ongoingjin/acc1adfa77b9446ab3248846e1b61d4e?p=de84100491fd4f279533e5e30013f100&pm=s"
2023-03-17 07:44:11,"최창훈","컴퓨터 네트워킹 하향식 접근(Day4 ~53pg)
https://cautious-ocarina-cca.notion.site/Chapter1-f46318161f8b439d9e7a889dd8fad3b2"
2023-03-17 07:53:31,"강민규","사진"
2023-03-17 07:54:19,"강민규","여러분 좋은 아침입니다. 오늘 금요일이네요. 몸과 마음이 가벼운 느낌이 듭니다 ㅎㅎ 좋은 하루 보내세요"
2023-03-17 07:57:12,"김민수","[금요일] 바바라 민토 논리의 기술
1부 논리적으로 글쓰기 - 3장 피라미드 구조는 어떻게 만드는가 - 위에서 아래로 내려가는 접근법

[요약]
글은 최종적으로 하나의 문장이 글 전체의 주제가 되어야 한다.
피라미드 구조를 만드는 방법은 상향식과 하향식이 있는데 하향식 접근법이 보다 쉽다.
<하향식 접근법>
1. 피라미드 정상에 주제를 적는다.
2. 질문을 결정하고, 답변을 적는다.
3. 상황을 명확하게 파악한다.
4. 전개를 기술한다.
5. 질문과 답변을 다시 확인한다.

[발췌]
""(글의 주제와 독자의 배경지식과 같이) 도입부에서는 이처럼 쉽게 확신할 수 있는 사항을 독자에게 상기시키는 단계부터 시작해야 한다.""
회사에서 일을 하다보면 항상 독자의 배경지식이 어느 수준인지 고민하게 되는데 항상 어려운 지점인 것 같다.

[메모]
하나의 글을 발표자료, 문서, 구두, 발표 등 다양한 형태로 가공할 때 독자의 배경지식에 대한 전제가 어떻게 변화하는지에 대해서도 고민해볼 필요가 있겠다."
2023-03-17 10:19:26,"영동","삭제된 메시지입니다."
2023-03-17 10:27:59,"영동","함수형 코딩 42-55p

요약
액션을 쪼개는 내용을 다룬다. 
db에서 값을 읽는 행위는 액션, 거기서 나온 자료는 데이터로 구분한다. 데이터를 조합해서 새로운 데이터를 만드는 것이 계산이다. 계산의 정의는 실행 시점에 상관없이 같은 입력에 대해서는 항상 같은 결과를 리턴하는 것인데 변하지 않는 데이터를 입력으로 사용하니 당연한 이야기다.
그렇기에 테스트 하기도 좋다.

계산을 더 나눌 수 있다. 계산을 나누면 구현도 쉽다. 하지만 충분히 구현하기 쉽다고 생각 되는 지점에서 더 나누는것을 멈춰야한다.

성능 이슈가 발생 할 것 ""같아서"" 미리 최적화하는건 좋지 않다 (뇌피셜금지)
계산을 수정하지 않고 액션의 양을 수정 하면 된다.(데이터를 한 번에 계산하지 않고 나눠서 수행)

계산의 결과는 미리 알 수 없고 실행을 해야만 알 수 있다. 그게 싫으면 데이터를 사용해야한다.

액션은 코드 전체로 퍼진다. 액션을 부르는 함수도 액션이다.

액션으로 모든 기능을 하나로 묶으면 된다.

발췌
중요한 것은 (액션에 사용될 데이터를) 계획할 것들을 미리 계획했다는 것이다(43p)

계산을 더 나눌 수 있다. 계산을 나누면 구현도 쉽다. 하지만 충분히 구현하기 쉽다고 생각 되는 지점에서 더 나누는것을 멈춰야한다.(46p)

액션으로 모든 기능을 하나로 묶으면 된다.(51p)

메모"
2023-03-17 10:28:46,"영동","딱 출근하면서 읽고 정리하기 좋은 양입니다. 잘 운영해주셔서 감사합니다"
2023-03-17 10:28:58,"영동","이모티콘"
2023-03-17 10:57:35,"강민규","감사합니다. 너무 조금이라 조바심날 수도 있지만, 천천히 매일 조금씩 소화하시면 급하게 읽는 것보다 남는게 훨씬 많습니다! 꾸준히~ 화이팅입니다!!"
2023-03-17 14:58:50,"김채욱","[컴퓨터 네트워킹 하향식 접근_3/17(금)]
[내용]
이번 장은 문제 풀이 공간이라서 질문과 해답을 적었습니다.

1.1절

1) 호스트와 종단 시스템의 차이는 무엇인가, 여러 종단 시스템의 유형을 나열하라, 웹서버는 종단 시스템인가?


호스트와 종단 시스템의 차이는 없고 둘이 interchangeable하다

종단 시스템으로는 웹서버, 이메일서버, PCs 등등이 존재한다


2) 전화로 대화를 하는 두 사람이 대화를 시작하고 마치기 위해 사용할 수 있는 프로토콜을 기술하라


외교적 프로토콜이 국제 통화 룰로 적용되어 있다


3) 프로토콜에 대한 표준이 왜 중요한가?


일정한 표준이 있어야만 상호 소통이 가능한 네트워크 시스템과 product을 만들 수 있다


1.2절

1) 여섯 가지 접속 기술을 나열하라. 각각을 가정 접속, 기업 접속, 장거리 무선 접속으로 분류하라


다이얼 모뎀은 가정의 전화 선으로 사용된다, DSL은 전화선 혹은 작은 오피스에 사용,

케이블 혹은 HFC은 가정, 이더넷은 기업, 와이파이는 가정 및 기업 범용적 사용


2) HFC 전송속도는 사용자들 간에 공유되는가 아니면 전용으로 지정되는가?

다운스트림 HFC 채널에서 충돌이 발생할 수 있는가? 그 이유는?


HFC bandwidth는 유저간에 공유가 가능하다, 다운스트림 채널에서는 모든 유저 혹은 호스트에게 패킷이 전달되는데 이 과정에서 충돌은 없다


3) 시골 지역에 인터넷 접속을 제공하기 위한 가장 적절한 네트워크 접속 기술은 무엇인가?


다이얼 모뎀, DSL, 케이블 모뎀, fiber-to-the-home이 적절하다


4) 다이얼-업 모뎀과 DSL 모두 전송 매체로 전화선(꼬임쌍 동선)을 이용한다. 그런데 왜 DSL이 다이얼 업 접속

빠른가?


이더넷 LANs의 전송률이 다음과 같기 때문이다 : 10Mbps, 100Mbps, 1Gbps, 10Gbps


5) 이더넷 이용할 수 있는 물리 매체로는 어떤 것들이 있는가?


이더넷이 사용하는 거로는 꼬임쌍선이 있고 광섬유에서도 가능하다


6) 다이얼업 모뎀, HFC, DSL, FTTH 모두 가정 접속에 사용된다. 이들 각각의 접속 기술에 대해 전송속도의 범위와 전송속도를 공유하는지 아니면 전용으로 이용되는지 기술하라


다이얼업 모뎀과 DSL은 전용 bandwidth를 이용

HFC는 bandwidth 공유

FTTH는 bandwidth를 공유하지 않는다


7) 하루 동안 당신이 사용하는 서로 다른 무선 기술과 그들의 특성에 대하여 기술하라. 왜 다른 것에 비해 그것을

사용하는지 기술하라


와이파이 : 유저가 베이스 센터안에서 패킷을 주고 받는다, 베이스 센터는 와이어 인터넷으로 연결된다

3g/4g : 넓은 범위 wireless 접속 네트워크로, 네트워크 안에서 패킷을 주고 받을 수 있다. 베이스 센터는

telecommunications 제공자에 의해 관리된다



1.3절

1) 길이가 L인 패킷을 전달하는데 필요한 종단간의 총지연 시간을 계산하라(저장후 전달)


L/R1 + L/R2 (처리,규잉,전파 지연은 제외한다)


2) 회선 교환 네트워크가 패킷 교환 네트워크에 대해 어떠한 장점을 갖고 있는가?

패킷 교환에서 출력 큐의 역할은 무엇인가?, TDM은 FDM에 비해 어떠한 장점이 있는가?



~~

중간에 내용이 날라갔음…




1.4절


~~

중간에 내용이 날라갔음…


3) How long does it take a packet of length 1,000 bytes to propagate over a link of distance

2,500 km, propagation speed 2.5⋅108 m/s, and transmission rate 2 Mbps? More generally, how

long does it take a packet of length L to propagate over a link of distance d, propagation speed

s, and transmission rate R bps? Does this delay depend on packet length? Does this delay

depend on transmission rate?


1,000 bytes /2,500 km /propagation speed 2.5⋅108 m/s /transmission rate 2 Mbps


계산은 데이터크기/시간으로 10msec 이다

지연은 패킷의 길이 및 전송률와는 상관이 없다


4) Suppose Host A wants to send a large file to Host B. The path from Host A to Host B has

three links, of rates R1=500 kbps, R2=2 Mbps, and R3=1 Mbps.


https://ko.wikihow.com/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EC%86%A1-%EC%86%8D%EB%8F%84%EB%A5%BC-%EA%B3%84%EC%82%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95


데이터 전송 속도를 계산하는 방법
데이터 전송 속도는 특정 시간 안에 전송되는 데이터의 양으로 측정되는 속도이다. 인터넷에서 무언가를 다운로드하거나 다른 사람에게 데이터를 전송하려고 할 때 전송 속도가 어떨지 확인하고 싶을 수 있다. 이런 경우 먼저 파일 크기와 전송 속도가 비트 혹은 동일한 단위(킬로바이트, 메가바이트, 기가바이트 등)의 바이트로 일치할 수 있도록 단위를 변환한다. 그리고 S(속도) = A(데이터의 양) ÷ T(전송 속도) 공식에 숫자를…

ko.wikihow.com


4-1) Assuming no other traffic in the network, what is the throughput for the file transfer?


최소단위 링크가 R1이기에 500 kbps


4-2) Suppose the file is 4 million bytes. Dividing the file size by the throughput, roughly how

long will it take to transfer the file to Host B?


4,000,000/ 1024를 하면 kbps이기에 => 대략 4,000kps이다


t=4∗106∗8500∗103=61t=4∗106∗8500∗103=64sec.



4-3) Repeat (a) and (b), but now with R reduced to 100 kbps.


가장 느린 링크가 병목 기준점이기에 R2를 기준으로 한다

Time to transfer t=4∗106∗8100∗103=320t=4∗106∗8100∗103=320sec.


5) Suppose end system A wants to send a large file to end system B. At a very high level,

describe how end system A creates packets from the file. When one of these packets arrives to

a router, what information in the packet does the router use to determine the link onto which the

packet is forwarded? Why is packet switching in the Internet analogous to driving from one city

to another and asking directions along the way?


종단 시스템에서 파일을 작은 단위로 나누어 헤더를 붙이고 패킷을 만든다. 각 패킷안에는 도착지 주소 IP를 지니고 있어서 스위치로 이동시에 가장 빠른 방법으로 도착지에 간다


6) Visit the Queuing and Loss applet at the companion Web site. What is the maximum

emission rate and the minimum transmission rate? Wi"
2023-03-17 16:06:55,"김형우","https://engineer-diary.tistory.com/162"
2023-03-17 16:37:05,"길인식","[금요일] 데이터 중심 애플리케이션 설계
[요약]
관계형 조인, 다대일 및 다대다 관계지원이 장점인 쓰기 스키마
문서형 데이터베이스는 스키마유연성, 지역성, 커스텀 구조가 장점인 읽기 스키마
서로 같아지고 있다.

[발췌]
관계형과 문서의 혼합 모델은 미래 데이터베이스들이 가야 할 올바른 길이다. p42

[메모]
관계형 모델 안에서 선언형과 질의형으로 나뉘는데 선언형이 더 좋다고 합니다. (웹브라우저도 선언형 css)"
2023-03-17 16:38:30,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]42~55pg

요약

action: fetching subscribers from the database, sending emails

- > different data when fetching them tomorrow

data: a list of customer records

Functional programmers avoid actions general if they can, and replace them with calculations.

- > helps testing, very hard to test a system whose output is send emails, it is much easier to test something that outputs a lost of data.
- > calculations won’t have any effect- can test million times

Dividing into smaller calculations

Ex) list of subscribers -> select good coupons -> list of good coupons

Calculations. you don’t have to worry about:

- what else is running
- what has run in the past and what will run in the future
- how many times you have already run it

발췌

메모"
2023-03-17 16:43:01,"소재훈","3월 17일(금) 컴퓨터 네트워킹 하양식 접근 Day4 입니다!
제출자: 소재훈
7. 컴퓨터 네트워킹과 인터넷의 역사
https://geode-drizzle-777.notion.site/7-6ec65dfddc8b48248ddc77e4aa59db7d"
2023-03-17 19:56:18,"김효선","3/17 팩트풀니스

https://heady-dinghy-922.notion.site/2023-03-17-61-70p-76b55aef1c874277a010e8f9457f2d16"
2023-03-17 20:23:04,"ㅈㅁㅁ","제목: 인간 본성의 법칙
참여자: 금정민
회차: 4회차

## 요약
### 자기도취자의 여러 유형
- 통제광 자기도취자
: 더 큰 야망과 에너지가 있음.
: 불안이 심함:
상대의 약점을 알기 위해 예민하여 깊은 주의로 남을 말을 듣거나 공감을 흉내냄
- 과장된 자기도취자
: 극적 장치를 이용해 관심에 대한 욕구를 숨김
: 극적인 상황을 만들어 타인의 관심을 가짐

### 건강한 자기도취적 리더는?
- 본인의 태도가 미치는 영향을 알고, 행동에 신중하다.
- 개인과 집단 모두에게 주의를 기울인다.
- 부정적 기류가 있을 때 부드러운 태도를 취한다.


## 메모
### 심한 자기 도취자가 되는 이유?
- 공감이 부족하기 때문
- 공감이 없으면 자기 입장에 빠져 방어적이 됨
- 공감이 없기에 자신의 가치관으로 상대를 바라봄"
2023-03-17 21:14:55,"강민규","안녕하세요 불금라 다들 놀러가셨나요?"
2023-03-17 21:15:17,"강민규","노는 날도 있어야겠지요 ㅎㅎ"
2023-03-17 21:15:31,"강민규","그렇지만 오늘 책을 읽으셔야만 하는 분들이 있습니다 ㅎㅎ"
2023-03-17 21:16:15,"강민규","@박예린 @이강욱 @이현주 @정소영 선생님들은 오늘 목, 금요일 분량 꼭 올려주시길 바랍니다~ 화이팅!!"
2023-03-17 22:05:24,"정소영","책너두와 불금입니다 확인했습니다 🦦🫡 "
2023-03-17 23:00:52,"영동","함수형코딩 56-69

[요약]

팝업, 콘솔, 공유변수 조작 등은 액션으로 간주된다.
액션은 가능한 작게 만들어야 하고 액션과 관련 없는 코드는 모두 제거해야 한다. 결정이나 계획 관련된 부분은 계산으로 분리 할 수 있다.
액션에서 계산을 분리할때는 지켜야할 것들이 있다.

명시적인 입력과, 명시적인 출력이 필수이다.
암시적인 입력(공유변수의 사용) 및 암시적인 출력(콘솔 출력, 공유변수 조작)등은 외부에 영향을 주기 때문에 계산으로 분류 할 수 없다.
이러한 암묵적인 입력과 출력을 부수효과(side effect)라고 한다.

[발췌]

[메모]"
2023-03-17 23:20:31,"Seo","3/17 금 
https://lead-countess-db7.notion.site/DAY4-b3352a69f2a9476cb2441c4bedd3e95b"
2023-03-18 02:21:44,"이강욱","https://velog.io/@rivolt0421/Grokking-Simplicity-45"
2023-03-18 03:08:32,"박예린","DAY 4, 5
쏙쏙 들어오는 함수형 코딩 27~55p

### 요약

1. 단순해보이는 액션도 또 다른 액션이나 계산, 데이터로 나눌 수 있으며, 계산도 더 작은 계산과 데이터로 나누거나 연결할 수 있다.
2. 계산은 때때로 우리 머릿속에서 일어난다. 결정과 계획은 계산이 될 가능성이 높다
3. 데이터는 어떤 이벤트에 대한 사실이다. 데이터는 해석이 필요하다.
4. 계산은 테스트하기 쉬우며, 기계적인 분석이 쉽고, 조합하기 좋다는 점에서 액션보다 좋다. 

### 발췌

사실 계산 단계가 있지만 잘 보이지 않는 이유는 계산이 우리 사고 과정에 녹아있기 때문입니다. 장을 보는 상황에서 무엇을 사야 할지는 그냥 머릿속에서 저절로 생겨납니다. …(중략)… 하지만 이 사실을 알면 계산을 더 쉽게 찾을 수 있습니다. 어떤 단계에서 무엇인가 결정해야 할 것이 있는지 또는 무엇인가 계획해서 방법을 찾아야 할 거이 있는지 스스로에게 물어보면 됩니다. 결정과 계획은 계산이 될 가능성이 높기 때문입니다. (36p)

### 메모

데이터 : 이벤트에 대한 사실. 일어난 일의 결과를 기록한 것

- 데이터의 불변성을 유지하기 위해, 두 가지 원칙을 사용함
    1. 카피 온 라이트
    2. 방어적 복사
- 데이터의 장점
    1. 직렬화 : 직렬화된 데이터는 전송하거나 디스크에 저장했다가 읽을 수 있음
    2. 동일성 비교 : 계산이나 액션은 비교하기 어려우나, 데이터는 비교하기 쉬움
    3. 자유로운 해석 : 여러 가지 방법으로 해석이 가능함
- 단점 : 해석이 반드시 필요하다는 것

계산 : 입력값으로 출력값을 만드는 것. 실행 시점과 횟수에 관계없이 항상 같은 입력값에 대해서는 같은 출력값을 돌려줌

- 액션보다 계산이 좋은 점
    1. 테스트하기 쉽다
    2. 기계적인 분석이 쉽다
    3. 조합하기 좋다 
- 계산을 쓰면서 걱정하지 않아도 되는 것
    1. 동시 실행
    2. 과거의 실행, 미래의 실행
    3. 실행 횟수
- 계산의 단점 : 실행하기 전에 어떤 일이 발생할 지 알 수 없다는 것
- 계산을 순수 함수 또는 수학 함수라고도 함
"
2023-03-18 06:34:25,"정소영","Day 3-4
넛지 파이널에디션


자유지상주의적 간섭주의
다른 사람의 행동을 보여주고, 알려주는 가장 쉬운 방법으로도 사회적 규범에 대한 강력한 넛지가 가능하다. 또 사람들은 스스로도 냉정한 상태와 흥분의 영향을 받고 있을 때 얼마나 다르게 바뀔지 모른다. 

• 시간의 흐름에 따른 비일관성 - 유혹은 매우 개인적이나 흥분상태가 시간이 흐름에 따라 바뀐다. 쉽게 무너진다. 또 흥분의 효과를 과소평가한다.
• 감각적으로 명백한 증거가 있는데도 인간은 동조한다. 자신감 간편 추론법.
• 계획하는 자아와 행동하는 자아의 싸움. 예시) 이자가 거의 붙지 않는 불이익은 크리스마스 때 선물을 살 돈을 확실하게 마련할 수 있다는 편익에 비하면 아무것도 아님.
• 사회적 영향은 어떻게 작동하나. 정보의 폭포와 또래 압력 
• 다원적 무지 - 오랜관행을 거부하는 극적인 변화는 폭포효과, 편승효과를 촉발하는 넛지에서 시작. 바깥으로 쏟아내도 된다는 신호.

메모
사람들이 어떤 관행이나 전통을 따르는 이유는 그것을 좋아하거나 그것이 옹호할 가치가 있어서가 아니라 다른 사람 대부분이 그것을 좋아한다고 생각하기 때문이다. "
2023-03-18 07:37:57,"이현주","https://codefordance.tistory.com/13"
2023-03-18 07:56:23,"강민규","사진"
2023-03-18 07:57:50,"강민규","즐거운 주말입니다~ 이번 주 그 누구도 탈락을 하지않아 매우 기쁘군요! 원래 첫주 둘째 주가 가장 많이 탈락하는 것을 생각해보면 매우 고무적입니다. 저희 끝까지 함께해요~"
2023-03-18 07:58:25,"김민수","[토요일] 바바라 민토 논리의 기술
1부 논리적으로 글쓰기 - 3장 피라미드 구조는 어떻게 만드는가 - 아래에서 위로 올라가는 접근법

[요약]
글의 주제나 질문이 명확하지 않은 경우 상향식 글쓰기를 시도해야 한다. 상향식 글쓰기는 아래의 절차를 따른다.
1. 말하고자 하는 포인트를 모두 적는다
2. 포인트 사이에 어떤 관계가 있는지 파악한다.
3. 이를 통해 결론을 도출한다.

[발췌]
""독자가 30초 이상 읽어도 요지를 파악할 수 없다면 그 글은 다시 써야 한다.""
이 책을 통해 배울 수 있는 것은 설득력있고 이해하기 쉬운 글이다. 세상의 모든 글이 그럴 필요가 있는 것은 아니지만 여기서 배워야하는 글은 그렇다.

[메모]
내가 지금까지 써왔던 글들과 앞으로 써나갈 글들 중에서 이 책에서 배운대로 써야하는 글은 무엇일까? 아닌 글들은 무엇이고, 그 글들은 어떻게 써야할까?
발췌의 내용을 읽고 이 글에서 배운 것들을 적용할 범위를 고민하게 되었다."
2023-03-18 14:07:41,"ㅈㅁㅁ","제목: 인간 본성의 법칙
참여자: 금정민
회차: 5회차

## 요약
### 말이 온전히 의도를 드러내주진 않는다.
- 인간관계에서 우리가 주위를 기울이는 건 거의 ‘말’이다.
- 말은 무언가를 숨기는 의도로 쓰일 때가 있다.
- 하지만 비언어적 신호가 사람의 기분과 정서를 직접적으로 반영한다.
- 상대의 표정, 목소리, 자세에서 흘러나오는 숨은 긴장감 등 비언어적 요인에 집중해야한다.

### 사회는 공연장이고 사람은 연극을 취한다.
- 사람은 원하는 걸 얻기위해 동정이나 애정을 자아내는 표정을 짓거나, 자신을 보호하기 위해 기분을 감춘다.
- 그렇다면 이 연극은 나쁜 것인가? 사회를 살아감에 있어 연극은 필수적이다.
- 삶에 연극적 속성이 있음을 인정해야한다.
- 사람의 겉모습을 실제라고 맹신해선 안된다.


## 메모
- 상대를 이해하기 위해 언어적 요소가 아닌 비언어적 요소에도 집중해야한다.
- 사람의 겉모습에 맹신해선 안된다."
2023-03-18 14:51:50,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]56~68pg

요약
actions spread through code 
- form: function calls ,  methods, constructors, expressions ..
-also called impure functions, side-effecting functions
* does it depend on how many times it runs?

Tip:
1. use fewer action as possible 
2. keep your actions small
3. restrict your actions with ouside interactions
4. limit how dependent on time action is 

ch4 extracting calculations from actions
- observe how information enters and leaves functions
- discover functional techniques to make code more testable and reusable 
- learn how to extract calculations from actions

except for arguments and return value, any other inputs , outputs are implicit
-> if implicit inputs and outputs are eliminated , it becomes calculations


발췌
DOM is in-memory representation of HTML page in a browser 
"
2023-03-18 14:57:44,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]56~69pg

요약
actions spread through code 
- form: function calls ,  methods, constructors, expressions ..
-also called impure functions, side-effecting functions
* does it depend on how many times it runs?

Tip:
1. use fewer action as possible 
2. keep your actions small
3. restrict your actions with ouside interactions
4. limit how dependent on time action is 

ch4 extracting calculations from actions
- observe how information enters and leaves functions
- discover functional techniques to make code more testable and reusable 
- learn how to extract calculations from actions

except for arguments and return value, any other inputs , outputs are implicit
-> if implicit inputs and outputs are eliminated , it becomes calculations

-separate business rules from DOM updates
-get rid of global variables
-don't depend on global variables
-don't assume answer goes in the DOM
- directly use explicit outcome



발췌
DOM is in-memory representation of HTML page in a browser 
"
2023-03-18 17:27:03,"길인식","[토요일] 데이터 중심 애플리케이션 설계
[요약]
그래프형 데이터 모델은 속성 그래프 모델과 트리플 저장소 모델 등이 있고 질의언어는 사이퍼, 스파클, 데이터로그, 그렘린 등이 있다. 다대다 관계에서 그래프 데이터 모델을 하는 것이 자연스럽다.

[발췌]
세 가지 모델(문서, 관계형, 그래프) 모두 현재 널리 사용되고 있으며 각 모델은 각자의 영역에서 훌륭하다. 다른 모델을 흉내 낼 수 있지만 그 결과는 대부분 엉망이다. 65p

[메모]
관계형 그래프 모델로 4줄로 작성된 질의가 SQL로 29줄이 되었습니다."
2023-03-18 17:39:35,"Seo","삭제된 메시지입니다."
2023-03-18 17:41:05,"Seo","3/18 토
https://lead-countess-db7.notion.site/DAY5-adab00c1e47543da844009f893955c2a"
2023-03-18 21:45:40,"김효선","3/18 팩트풀니스

https://heady-dinghy-922.notion.site/2023-03-18-71-76p-52c6bb7b082b49348f3187f3cf0f1127"
2023-03-18 21:57:09,"정소영","Day 5
넛지 파이널에디션


•자동시스템과 숙고시스템 
자동시스템은 빠르고 본능적이며, 직감
숙고시스템은 ‘의식적인’ 사고 방식
보통 직감은 꽤 정확할 수 있지만 흔히 의존하다가 실수를 한다

적어도 숙고시스템은 조금이라도 동원한다면 오답과 실수를 하지 않을테지만, 현실의 인간은 때로 깊이 생각하지 않는다. 
예) 2등을 추월했다, 몇 등인가? 

•자, 그렇다면 어떻게?
쉽게 오류를 저지르는 인간의 성향
까다롭거나 낯선 상황에서는 어림짐작이 더 잘 빗나간다 

자동시스템은 학습이 가능하다. 다만 오래걸리고 숙고시스템은 느리다. 운전자에게 물리적인 방법으로 속도를 줄이게 하는 것이 아닌, 시각적인 넛지로 자동시스템을 건들이게 하는 것. "
2023-03-18 22:21:33,"김현진","데이터중심 애플리케이션 설계

https://ongoingjin.notion.site/W01-5-38-49p-91cffe16527d4b9ba62e6c3acf800575

https://ongoingjin.notion.site/W01-6-50-70p-0ea9130639a147efa082ca3c5d1c9442"
2023-03-18 22:41:51,"강민규","안녕하세요 여러분 즐거운 주말 보내고 계신가요? 토요일 분량은 월요일 아침에 체크합니다~ 그래도 할일이 남아있으면 스트레스니 오늘 첫주차를 마무리 해보도록 해요~"
2023-03-18 23:46:10,"김채욱","[컴퓨터 네트워킹 하향식 접근_3/18(토)]

내용 요약
[클라이언트-서버 구조]

정의 : 분산 처리 모델로 다수의 클라이언트의 요청을 중장 통제된 서버에서 응답합니다.

장점 :

중앙 관리 : 서버는 특정 리소스를 관리 및 공유하는데 유리합니다.

확장성: 클라이언트와 서버가 분리 됨으로써 확장에 유리합니다.

데이터 지속성 : 데이터가 중앙에서 관리 됨으로써 데이터 탐색 및 업데이트 시 일관성을 보장합니다.

단점 :

Single Point of Failure : 특정 서버가 다운되면, 전체 client에 영향

네트워크 의존성 : 클라이언트와 서버 모두 안정된 네트워크가 필요합니다.

서버 성능 : 다수의 클라이언트의 요청은 서버에게 과부하가 걸려 성능의 발목이 될 수 있습니다.


[소켓]

정의 : 다른 호스트의 프로세스 간의 연결을 위한 인터페이스입니다.

추가 설명 : 애플리케이션이 이용 가능한 서비스를 나열한 것이다. 자세한 트랜스포트 프로토콜은 다음 장에서 설명합니다.

주요 타입 :

TCP : 신뢰적 데이터 전송, 처리율, 시간, 보안 서비스를 제공합니다.

UDP : 비신뢰적인 데이터 전송 서비스를 제공합니다. 최소의 서비스 모델로 적은 트래픽을 전달하기에 오버헤드가 적습니다.


[애플리케이션 계층 프로토콜]

설명 : 클라이언트와 서버가 네트워크를 통해 소통하기 위해 정해진 규칙입니다.

구성 요소 :

교환 메세지 타입

에러 메세지 타입의 문법

필드의 의미, 즉 필드에 있는 정보의 읨

언제, 어떻게 프로세스가 메시지를 전송하고 메시지에 응답하는지 결정하는 규칙
"
2023-03-19 00:10:02,"박예린","삭제된 메시지입니다."
2023-03-19 00:12:45,"박예린","쏙쏙 들어오는 함수형 코딩 DAY6 56~69p

### 요약

1. 액션을 부르는 함수가 있다면 그 함수도 액션이 된다. 따라서 액션은 사용할 때 조심해야 한다.
2. 함수에는 입력과 출력이 있다. 인자는 명시적 입력, 리턴값은 명시적 출력이다. 이 외의 입력은 암묵적 입력/출력이다. 암묵적 입력과 출력이 있는 함수는 액션이다.
3. 함수에서 암묵적 입력과 출력을 없애면, 액션을 계산으로 바꿀 수 있다.
4. 다음 사항을 개선하여 테스트의 용이성과 코드의 재사용성을 높일 수 있다
    - DOM 업데이트와 비즈니스 규칙의 분리
    - 전역변수에 의존하지 않는 함수 만들기
    - 암묵적인 출력 대신 명시적인 출력을 사용하는 함수 만들기
    

### 발췌

함수에 암묵적 입력과 출력이 있으면 액션이 됩니다. 함수에서 암묵적 입력과 출력을 없애면 계산이 됩니다. 암묵적 입력은 함수의 인자로 바꾸고, 암묵적 출력은 함수의 리턴값으로 바꾸면 됩니다.  (68p)

### 메모

액션 : 외부 세계에 영향을 주거나 받는 것, 실행 시점과 횟수에 의존함

- 순수하지 않은 함수, 부수 효과 함수라고도 부름
- 액션을 잘 다루는 방법
    - 가능한 적게 사용하기
    - 가능한 작게 만들기. 액션에서 액션과 관련 없는 코드는 모두 제거 (결정이나 계획은 계산으로 빼낼 수 있음)
    - 외부 세계와 상호작용하는 것을 제한하기. 내부에 계산과 데이터만 있고 가장 바깥쪽에 있는 구조가 이상적
    - 액션이 호출 시점에 의존하는 것을 제한하기"
2023-03-19 03:01:58,"이현주","https://codefordance.tistory.com/14"
2023-03-19 12:12:07,"김효선","매주 일요일은 휴식? 일인가요? "
2023-03-19 12:13:08,"김연정","네 효선님 일요일은 휴식입니다. 공지에 있는 링크에 내용이 있네요~ :) 좋은 주말 보내세요!"
2023-03-19 12:13:44,"김효선","넵 안내 감사합니다 :)"
2023-03-19 18:27:26,"김형우","https://engineer-diary.tistory.com/163"
2023-03-19 18:54:34,"강민규","컴퓨터 네트워킹 하시는 여러분 저 오늘 알게되었는데 8판이 22년도에 나왔네요! 여러분들이 쓰시는 책은 7판인가요 8판인가요? 8판은 680페이지 쯤 있고 7판은 740페이지 있습니다"
2023-03-19 19:03:26,"김채욱","저는 7판입니다. "
2023-03-19 19:22:15,"김민수","사진"
2023-03-19 19:22:22,"김민수","Computer Networking, 6/e A Top-down Approach
저는 학부때 이걸로 했었네요 ㄹㄹ"
2023-03-19 19:53:20,"김채욱","Chatgpt한테 물어보니깐 핵심 이론은 동일하고 후반부에 나오는 부분만 개선했다고 했어요. "
2023-03-19 19:54:52,"강민규","민수님은 어떻게 하고 계신가요? 페이지가 조금 다를 것 같은데"
2023-03-19 20:14:51,"김민수","저는 학부생때요... 아주 오래전"
2023-03-19 20:15:39,"김민수","사진"
2023-03-19 20:15:40,"김민수","영어라서 워드에 번역하면서 했었어요"
2023-03-19 21:00:54,"강민규","아 민수님은 그 책이 아니군요 ㅎㅎ 다행입니다..."
2023-03-19 21:01:33,"강민규","요즘에는 deepl이라는 번역 서비스 쓰면 pdf 통으로 파일 번역이 가능하더라고요"
2023-03-19 21:01:43,"강민규","놀라운 기술의 발전입니다"
2023-03-19 22:59:30,"오홍근","[쏙쏙 들어오는 함수형 코딩][오홍근][day5-6]
42-69p
<요약>
- 액션을 잘 사용하기 위한 방법
  1. 가능한 액션을 적게 사용
  2. 가능한 액션을 작게 만들기(결정이나 계획은 계산으로 빼낼 수 있음)
  3. '내부에 계산과 데이터만, 가장 바깥쪽에 액션이 있는 구조'가 이상적
  4. 액션이 호출 시점에 의존하는 것을 제한
- 암묵적 입력은 함수의 인자로, 암묵적 출력은 함수의 리턴 값으로 바꾸자
- 부수효과 : 암묵적 입려과 출력 

<메모>
- 값을 참조하거나 할당하는 것도 액션으로 볼 수 있음"
2023-03-19 23:13:42,"강민규","여러분 좋은 주말 보내셨나요! 아직 토요일 분량 안하신 분들 조금 계시는데 하루 밀려있으면 굉장히 심적 부담감이 심하니 빠릴 해치워봅시다"
2023-03-19 23:13:53,"강민규","@최창훈 창훈님 오늘 금 토요일 분량 다 올려주세요! 화이팅입니다~~"
2023-03-19 23:14:05,"강민규","이모티콘"
2023-03-19 23:14:49,"정소영","💪💪"
2023-03-20 02:36:28,"최창훈","컴퓨터 네트워킹 하향식 접근(6일차 ~p88)

이번 진도가 1장 2장이 같이 있어서 링크 2개 공유드립니다.

1장 링크
https://cautious-ocarina-cca.notion.site/Chapter1-f46318161f8b439d9e7a889dd8fad3b2

2장 링크
https://cautious-ocarina-cca.notion.site/Chapter2-c6f6be28c027499087f155f5223a1918"
2023-03-20 02:47:26,"이강욱","https://velog.io/@rivolt0421/Grokking-Simplicity-6"
2023-03-20 07:53:04,"강민규","사진"
2023-03-20 07:54:22,"강민규","좋은 아침입니다 여러분 2주차가 시작되었어요. 오늘부터 대중교통에서도 마스크를 안써도 된다고 하더라고요. 코로나는 이제 옛추억으로 남게되려나봅니다 ㅎㅎ 좋은 하루 보내세요~"
2023-03-20 12:52:27,"ㅈㅁㅁ","제목: 인간 본성의 법칙
참여자: 금정민
회차: 6회차

## 요약
### 상대의 신호를 관찰하는 법
- 표정에 초점을 맞춰라(ex. 억지미소, 긴장감 등)
- 표정 다음으로 목소리에서 신호를 감지해라(속도, 톤)
- 보디랭귀지를 관찰해라
- 말수를 줄이고 상대가 더 많은 말을 하게 해라
- 상대에 대한 나의 호불호, 선입견을 모두 배제하려고 노력해라

### 주의깊게 관찰해야할 3가지
(1) 호/불호의 신호
- 적대행위, 저항은 결코 뜬금없이 나타나지 않는다.
- 반감이나 적대감이 있는 사람은 보디랭귀지로 징후를 내보낸다.
  (눈살 찡그리기, 입술 오므렸다 펴기, 대화 중 몸이 멀리 떨어진 경우)
- 누군가 당신을 시기한다고 의심되면, 최근 당신에게 있었던 좋은 일을 이야기해라
  (떠벌리는 듯이는 금지!)
- 적대감이나 부정적 감정은 일찌 감지하는 게 좋다.
   (우리가 취할 수 있는 전략이나 선택이 많아지기 때문)

(2) 지배/복종의 신호
- 사회적으로 우월하다고 느끼는 사람은 보디랭귀지를 통해 자신감을 뿜어낸다.
- 비언어적 신호에서 긴장감이나 주저함이 보이는 리더는 권력이 확고하지 못하며 권력이 위협받는다고 느낀다.
- 리더가 자기확신과 운명 의식으로 떠오르는 스타라면 그들과 함께 하는 것이 현명하나, 
 거만하고 좀스러운 폭군은 언제나 최선을 다해 피해야한다.

(3) 기만의 신호
- 인간은 천성적으로 믿고 싶은 것들이 있기 때문에, 잘 속는다.
  (ex. 공짜, 새로운 비법으로 건강찾기, 회춘하기, 죽음 피하기 등)
- 할 수 있는 최선은 누군가 기만을 시도를 알아채는 법을 배우고, 회의적인 태도를 유지하며 더 많은 증거를 확인하는 것이다.
- 무언가를 은폐하려는 사람은 더 열렬해지고 옳은 척하고 말이 많아지는 경항이 있다.
- 상대의 말에 흥미가 있는 것처럼 행동하면서, 상대가 행동을 계속하게 만들어라
- 상대가 무언가를 강조할 때 비언어적 신호를 어떻게 사용하는지 보라.


## 메모
- 상대를 관찰하는 법을 배워야 한다. (특히 비언어적 신호)
- 주의깊게 관찰해야할 3가지(호/불호, 지배/복종, 기만)"
2023-03-20 16:58:40,"영동","[요약]

액션을 계산으로 바꾸기
1. 서브루틴 추출하기 : 동작을 유지하며 코드를 바꾸는 것 (지역변수를 입력으로 받고 지역변수를 리턴한다)

함수 추출하기 :
쇼핑카트.push() 보다는 쇼핑카트를 명확한 객체로 설정하고 쇼핑카드.addItem()로 작성하여 명확한 의미를 전달한다.
복사본을 만들어서 값을 변경하고 반환한다.

Q: 액션을 계산으로 변경하면서 입력된 값을 직접 사용하지 않고 복사해서 사용하는 이유

A: 함수형 프로그래밍에서는 불변성(Immutability)과 순수 함수(Pure Functions) 개념이 중요합니다. 이를 따르면, 함수는 부수 효과(Side Effects)를 최소화하고 입력에 대한 출력만을 반환해야 합니다. 이를 통해 코드의 예측 가능성과 테스트 용이성이 향상됩니다.

function addItem(cart, name, price) {
  var newCart = cart.slice();
  newCart.push({ name, price });
  return newCart;
} 
장점:
입력 배열을 직접 수정하지 않고 복사본을 생성하여 불변성을 유지합니다.
순수 함수(Pure Function)이므로 동일한 입력에 대해 항상 동일한 출력을 반환합니다.
테스트가 용이하고 예측 가능한 결과를 제공합니다.

단점:
배열을 복사하므로 메모리 사용량과 성능에 약간의 영향을 미칠 수 있습니다.

function addItem(cart, name, price) {
  cart.push({ name, price });
  return cart;
}
장점:
메모리 사용량과 성능 면에서 더 효율적일 수 있습니다.

단점:
입력 배열을 직접 수정하므로 불변성을 깨뜨립니다.
부수 효과(Side Effects)가 있어 동일한 입력에 대해 동일한 출력을 보장하지 않습니다.
테스트가 어렵고 예측 가능성이 낮아집니다.
결론적으로, 함수형 프로그래밍에는 1번 함수가 더 적합하며, 코드의 예측 가능성과 테스트 용이성을 향상시킵니다. 하지만 성능과 메모리 사용량이 중요한 경우에는 2번 함수를 고려해볼 수 있습니다.

[발췌]

[메모]

연습문제1

function update_tax_dom(){
  set_tax_dom(shopping_cart_total * 0.1);
}
->

function update_tax_dom(cart_total){
  value = calc_tax(cart_total)
  set_tax_dom(value);
}

function calc_tax(value){
 return value * 0.1
}
연습문제2


function updateShippingIcons(shoppingCartTotal){
  var buyButtons = getButBottonDom()
  for (var i = 0; i<buyButtons.lenth; i++){
    
   if (isFreeShippingWhenAddItem(shoppingCartTotal,buyButtons[i].item)){
       button.showFreeShippingIcon();
    }else{
         button.hideFreeShippingIcon();
    }

  }
  
}

function isFreeShippingWhenAddItem(shoppingCartTotal, item){
  return item.price + shoppingCartTotal >=20
}"
2023-03-20 17:42:47,"길인식","[월요일] 데이터 중심 애플리케이션 설계
[요약]

로그구조 : 가장 간단, set - 추가 전용, get - O(n), 꽤 좋은 성능

색인 : trade off(읽기 향상, 쓰기 저하)

해시색인 : (키-값 데이터 경우) 사전타입과 매우 유사, byte-offset 방식(키를 바이트 오프셋에 매핑해 저장, 간단, key당 쓰기 수가 많지만 고유키가 많지않은 경우), 세그먼트 방식(특정 크기에 도달하면 새로운 세그먼트 사용, 컴팩션 수행), 범위 질의에 비효율

SS테이블 : 정렬된 문자열 테이블, 세그먼트 병합이 사용 가능한 메모리보다 크더라도 간단 효율적, 해당 레코드들을 블록으로 그룹화, 멤테이블 사용(디스크 보기전 메모리 사용)

블룸필터 : 없는 키를 찾기 위해 가장 오래된 세그먼트까지 찾아올라가는 비효율을 개선

[발췌]

해시색인 동시성제어 부분

… 일반적인 구현 방법은 하나의 쓰기 스레드만 사용하는 것이다. 데이터 파일 세그먼트는 추가 전용이거나 불변이므로 다중 스레드로 동시에 읽기를 할 수 있다. 77p
블룸필터는 집합 내용을 근사한(approximating) 메모리 효율적 데이터 구조다. 키가 데이터베이스에 존재하지 않음을 알려준다. 81p

[메모]
가장 단순한게 상황에 따라 가장 효율적인 방법이 될 수 있을것 같다."
2023-03-20 20:27:18,"이미정","# # [쏙쏙 들어오는 함수형 프로그래밍]70~84pg

[요약]

extracting a calculation from an action

extract subroutine: 

- isolation the calculation code, then convert inputs and outputs to arguments and return values

converting action to calculation:

- identify its implicit inputs and outputs

*copy a mutable value before modifying, it’s a way to implement immutability

Q) if array was passed as an argument & and this array was modified- still be calculation?

** keep arguments and return values as immutable values. 

[발췌]

[메모]

when does DOM updates occur?

[https://adhithiravi.medium.com/react-virtual-dom-explained-in-simple-english-fc2d0b277bc5#:~:text=First things first%2C DOM stands,affects performance%2C making it slow](https://adhithiravi.medium.com/react-virtual-dom-explained-in-simple-english-fc2d0b277bc5#:~:text=First%20things%20first%2C%20DOM%20stands,affects%20performance%2C%20making%20it%20slow)."
2023-03-20 20:51:27,"김효선","3/20 팩트풀니스
https://heady-dinghy-922.notion.site/2023-03-20-77-85p-4023593880b947e8ad93d3cbdf43d868"
2023-03-20 21:13:25,"강민규","여러분 주말에 쉬다가 다시 하시려니 힘들진 않으신가요~ 이주차가 심적으로 가장 힘들 때입니다. 이번주만 잘 넘기시면 통계적으로 약 90프로 완주하니 힘내봅시다!"
2023-03-20 21:57:37,"소재훈","3월 18일(토) 컴퓨터 네트워킹 하양식 접근 Day6 입니다!
+) 내일 Day7, Day8 같이 올리겠습니다!
제출자: 소재훈
https://geode-drizzle-777.notion.site/1-cb9b7c5652c548258206bb3502fc4dd8"
2023-03-21 00:08:48,"김채욱","[컴퓨터 네트워킹 하향식 접근_3/20(월)]
[내용 요약]
[HTTP]
정의 : HyperText Transfer Protocol, 종단 시스템의 웹클라이언트와 웹서버간의 HTTP 메세지를 교환시켜주는 애플리케이션 프로토콜입니다. 서버는 클라이언트의 정보를 유지하지 않기에 비상태 프로토콜입니다.

추가 설명 : 요청/응답 프로토콜로 클라이언트는 자원을 요청하고, 웹은 응답으로 요청한 자원을 전달합니다. HTTP는 정해진 행위로 자원에 대한 행위를 정의합니다. TCP/IP 프로토콜기반에서 작동하고 포트로는 80번을 사용합니다.

웹 클라이언트 : 웹 브라우저(chrome, firefox)로 클라이언트에게 웹 페이지를 보여주고 요청을 가능케합니다.

웹 페이지 : 다른 말로 문서라고 하며, 객체들로 구성됩니다. 해당 객체들은 URL로 지정할 수 있는 하나의 파일(HTML,JPEG)입니다.

URL : 서버의 호스트 네임과 객체의 경로로 되어 있습니다.

웹 서버 : HTTP의 서버측을 구현하는데, URL로 웹 객체를 저장하고 있습니다.

비상태 연결 HTTP : 각 요구/응답에 분리된 TCP 연결상에서 보내는 방식입니다.

방식 : 클라이언트가 서버에 자원을 요청하기 위해서는 소켓 연결을 진행합니다. 서버가 필요한 자원을 응답하고 나면, 연결된 소켓을 해제합니다.

총 시간 : 2RTT + 자원 전송 시간입니다. 소켓 연결에 1 RTT, 소켓 해제에 1RTT, 자원 전달 시간입니다.

RTT : round trip time, 왕복 시간입니다.

지속 연결 HTTP : 클라이언트와 서버간의 연결된 소켓을 통해 지속적으로 요청/응답을 합니다. 이로 인해 매 요청/응답의 TCP연결을 줄일 수 있어, 네트워크 상의 오버헤드를 줄입니다. HTTP2에서는 같은 TCP 연결상에서 다중 요청/응답을 가능케 합니다."
2023-03-21 00:21:23,"Seo","3/20 월
https://lead-countess-db7.notion.site/DAY6-b1fc7d65fdac4fd9a6b8b6e425b3ab75"
2023-03-21 00:23:09,"김형우","https://engineer-diary.tistory.com/164"
2023-03-21 00:24:44,"이강욱","https://velog.io/@rivolt0421/Grokking-Simplicity-7"
2023-03-21 00:58:37,"강민규","@김현진 @정소영 여러분 이틀치 분량을 아직 제출을 안하셨네요~ 어서 빨리 하시고 마음에 평화를 찾아봅시다!! 화이팅입니다~"
2023-03-21 01:09:36,"정소영","저 토요일은 진행했습니다요! 월요일 독서 공유만 지금 바로 할게요!"
2023-03-21 01:18:23,"강민규","아 현진님도 두개를 같이 올려주셨군요 확인했습니다~"
2023-03-21 01:18:28,"강민규","좋은 밤 보내세요"
2023-03-21 01:32:53,"정소영","삭제된 메시지입니다."
2023-03-21 01:45:08,"정소영","Day 6 (83-90)
넛지 파이널에디션

유혹과 흥분의 영향에 대해 과소평가하는 경향이 있다. 그것의 영향으로 다르게 행동한다는 것을 알면서도 그렇게 행동한다. 이를 이용해 계획하는 자아가 행동하는 자아를 통제할 수도 계획하는 자아에 도움을 줄 수도 있다. 

•유혹에 저항하기
인간은 경제학적으로 말하면 동태적으로 일관성이 없는 행동을 한다. 
-> 시간의 흐름에 따른 비일관성
예) 아침에 조깅을 해야겠다고 마음먹는다. 오후가 되면 드라마 정주행을 한다.

이유는 ‘유혹’
- 유혹이 존재한다는 것을 알고 극복할 조치를 취한다. 하지만 자제력의 문제를 예측하지 못한다. 흥분이 유발하는 효과를 과소평가하기 때문. 
- 자제력에 관한 문제는 2개의 자아를 가지고 있다는 발상으로 이어짐.
- 원시안적인 계획하는 자아 : 숙고시스템
- 근시안적인 행동하는 자아 : 우리 마음 속 호머 심슨! "
2023-03-21 01:46:36,"정소영","오늘(화요일) 분량까지 함께 남기겠습니다 :)


Day 7 (91-100)
넛지 파이널에디션

• 계획하는 자아와 행동하는 자아
- 기업의 사례 : 크리스마스 시즌 만기 저축. 
- 경제학적으로 상품의 매력도가 전혀 없는 적금상품이 불티나게 팔림 이유. > 크리스마스 선물을 마련할 여유가 없는 사람 타겟. > 당장의 불이익(금리, 귀찮음 등)보다 크리스마스 시즌에 확실히 목돈을 돌려받을 수 있다는 편익 

• 심리적 회계
사람들이 가계의 예산을 평가하고 조정하고 처리하는 데 사용하는 시스템. 
예) 돈은 대체 가능한 지불수단. 다만 같은 돈을 심리적 회계의 다른 항목으로 설정해두는 경우 - 문화비/식비. 

<메모>
타임어택, 시즌세일 같은 경우. 알면서도 행동하는 이유또한 계획하는 자아가 행동하는 자아를 제어하지 못한 경우일 것. 이를 이용하되, 사람마다 다른 심리적회계에서 특정 항목을 늘릴려면 어떻게 하면 좋을까? 오히려, 행동하는 자아에 명분을 준다면? "
2023-03-21 06:12:26,"박예린","삭제된 메시지입니다."
2023-03-21 06:13:21,"박예린","쏙쏙들어오는 함수형 코딩 DAY7

### 요약

액션에서 계산을 빼내는 법

1. 계산 코드를 찾아 빼내기
    - 코드를 추출해 새로운 함수를 만듦
    - 원래 코드에서 빼낸 부분이 새 함수를 부르도록 함
2. 새 함수에서 암묵적 입력과 출력을 찾기
3. 암묵적 입력은 인자로, 암묵적 출력은 리턴값으로 바꾸기

### 메모

원래 코드

function update_tax_dom() {
 	set_tax_dom(shopping_cart_total * 0.10); 


1. 계산 코드 찾아 빼내기

function update_tax_dom() {
 	set_tax_dom(calc_tax()); 
}

function calc_tax() {
	return shopping_cart_total * 0.10;
}


2 . 암묵적 입력, 출력을 인자와 리턴값으로 바꾸기


function update_tax_dom() {
	set_tax_dom(calc_tax(shopping_cart_total)); 
}

function calc_tax(total) {
	return total * 0.10;
}
"
2023-03-21 06:34:36,"김민수","삭제된 메시지입니다."
2023-03-21 06:34:59,"김민수","[월요일] 바바라 민토 논리의 기술
1부 논리적으로 글쓰기 - 3장 피라미드 구조는 어떻게 만드는가 - 초보자를 위한 충고

[요약]
1. 글을 쓰기 전에 먼저 생각을 정리
2. 도입부를 쓸 때는 상황 설명에서부터 시작하라
3. 도입부를 구상하는 절차를 생략하지 마라
4. 과거의 사건은 항상 도입부에 적어라
5. 도입부에는 독자가 사실이라고 인정하는 내용만 담아라
6. 선택할 수 있다면 핵심 단계에서는 연역법보다 귀납법을 사용하라

[발췌]
""생각은 일단 글로 표현해놓으면 마치 황금 조각이 완성된 것처럼 아름답고 근사하게 보여 이를 수정해야 할 경우 대단한 용기가 필요하다""
생각 정리와 글쓰기를 분리하는 방법에 대한 고민이 필요하다.

[메모]
독자가 사실이라고 인정하는 내용의 범주를 정하는 것은 (특히 회사에서 사용하는 글은) 난해한 작업이 되기도 한다."
2023-03-21 07:52:59,"강민규","사진"
2023-03-21 07:54:10,"강민규","안녕하세요 여러분 좋은 아침입니다. 저는 어제 개발 좀 하다 늦게 잤더니 매우 피곤하네요 ㅎㅎ 하루 여덟시간은 자라고 합니다. 여러분들도 꼭 충분한 수면하시길 바랍니다"
2023-03-21 08:04:00,"김민수","[화요일] 바바라 민토 논리의 기술
1부 논리적으로 글쓰기 - 4장 도입부는 어떻게 구성하는가 - 스토리형식

[요약]
도입부는 항상 스토리 형식을 따라야 한다.
글의 도입부는 독자가 이미 아는 내용을 요약해주고 본문에서 답해야하는 질문이 무엇인지 밝혀야 한다.
모든 글은 상황, 전개, 질문, 답변의 구조를 기본으로 한다.

[발췌]
""도입부에서는 독자에게 주제와 관련된 이야기를 해주고 주제에 대한 흥미를 유발해야 한다.""
(마셜 맥루언 같은 특이한 사람이 아닌 이상) 글은 선형적이고 독자가 선을 따라 읽어야만 의미를 십분 살릴 수 있다. 읽기를 시작한 독자의 이탈율을 줄이기 위한 방법을 고민해야 한다.

[메모]
글은 여러 독자를 상정할 수 있다. 잘 쓰여진 글 중에서 여러 독자를 고려하며 친절해지고, 전제를 설명하는 글들이 있다.

이 책을 읽다보니 그런 글들은 글쓰기를 시작하기 전에 생각을 충분히 한 것 같다. 만약 글쓰기부터 시작했다면 그런 글을 쓰기 어려웠을 것이다."
2023-03-21 12:44:15,"ㅈㅁㅁ","제목: 인간 본성의 법칙
참여자: 금정민
회차: 7회차

[ 요약 ]
1. 사람은 진정성을 만들어낸다.
- 무/의식적이든 사람은 자신의 역할에 기대되는 사항을 충실히 이행하려 한다.
- 진정성이 있는 사람은 진정성을 보여주는 능력이 남보다 뛰어난 사람이다.
- 인상 관리를 잘하는 법
  : 비언어적 신호에 통달하라
  : 메소드 연기를 해라
  : 듣는 이에게 맞춰라
  : 첫인상을 잘 만들어라
  : 성인군자 같은 모습을 보여라

2. 실패의 패턴에 대해
- 성격이 곧 운명이다.
  : 상대의 성격은 행동 패턴, 의사결정, 문제 해결 방식, 협업하는 모습 등 수많은 신호에서 드러난다.
  : 우리는 우리가 가진 맹점 때문에 여러 실패를 하게 된다.
  : 그래서 우리는 무슨 수를 써서든 관점을 바꿔야 한다.
  : 상대의 진짜 성격을 살피는 것을 최고의 관심사로 삼아라

[ 메모 ]
- 진정성있는 모습을 위해 인상관리에 주의해라
- 태생적 성격으로 인해 여러 실패를 맞을 수 있으니, 우리는자신의 관점을 바꾸려 노력해야한다."
2023-03-21 14:23:46,"영동","함수형코딩 85-94

요약
암묵적 입출력을 줄여 설계를 개선한다.

함수의 동작을 바꿨기 때문에 엄밀히 말하면 리팩터링이라고 할 수 없다.

복사본을 사용하여 변수를 조작하는게 잃는것보다 얻는게 많다. 코드가 느리면 나중에 최적화 하면된다. 섣부른 최적화는 하지 않는다.

계산에서도 암묵적 입출력을 줄였다. 액션에서도 암묵적인 입출력이 없으면 좋다. 암묵적 입출력이 많다면 다른 컴포넌트와 강하게 연결되어 있고 의존적이다. 이런것은 모듈이 아니다.

암묵적 입출력이 있는 것은 아무때나 실행 할 수 없기 때문에 테스트 하기가 어렵다."
2023-03-21 19:33:33,"Seo","3/21 화
https://lead-countess-db7.notion.site/DAY7-5f8b53e534c84fe69966ab4fce1ded97"
2023-03-21 19:47:13,"이미정","# # [쏙쏙 들어오는 함수형 프로그래밍]85~95pg

[요약]

Chapter 5: Improving the design of actions

- sometimes you can’t eliminate all the actions and convert them into calculation
- how can we improve designs of actions by eliminating some of the inputs and outputs?
    - align design with business requirements
    - avoid duplications- code smell: indicator of potential problem

Q) everytime we run add_item() - making a copy of the cart array - isn’t this expensive?

Yes and No: modern runtimes and garbage collectors handle this very well

& benefits outweight the cost, being able to make modified copies without changing the original is very useful. if the code gets too slow we can optimize it later.

*Minimize implicit inputs and outputs

[발췌]

[메모]"
2023-03-21 20:22:09,"김채욱","[컴퓨터네트워킹하향식접근_3/21(화)]

[내용 요약]
[HTTP 요청 메시지]

구성 :

요청 라인 : 매소드(sp)URL(sp)HTTP버전(crlf), Ex) GET animal?dog&cat HTTP/1.1

헤더 라인 : 헤더필드(sp)값(crlf), Ex) Connection : close, User-agent : Mozilla/5.0

key-value형태를 가지며, 요청에 담을 메타데이터를 포함합니다. 이 메타데이터는 웹 프록시 캐시, 캐싱 정책, client 정보 등이 있습니다.

공백 라인 : crlf

개체 몸체 : POST 매소드에 자원을 서버에 전달할 때만 사용됩니다.

​

[HTTP 응답 메세지]

구성 :

상태 라인 : 버전(sp)상태코드(sp)문장(crlf), Ex) HTTP/1.1 200 OK

헤더 라인 : 요청 메세지의 헤더라인과 동일한 포맷으로, 메타데이터가 다깁니다.

개체 몸체 : client가 요청한 자원을 개체 몸체에 담습니다.

​

[사용자와 서버간의 상호작용 : 쿠키]

정의 : 클라이언트가 가지고 있는 상태 데이터입니다. 

추가 설명 : 서버는 상태를 유지하지 않기에, 사용자 상태를 유지해야하는 경우 쿠키를 사용합니다. 이를 활용해 서비스 접근을 제한 혹은 지속적 제공할 수 있기에 유저 경험이 증가합니다.

방식 : 

유저가 서버에 요청을 보냅니다

서버는 사용자에 대한 고유 ID를 생성 후 응답의 헤더에 보냅니다. 이때 ID는 유효기간을 가지며 DB에 저장됩니다.

유저가 요청 헤더라인에 쿠기 정보를 담습니다.

서버는 쿠키 ID를 확인하고 적절한 응답을 합니다."
2023-03-21 20:53:29,"길인식","[화요일]
[데이터 중심 애플리케이션 설계]
[요약]
B트리 : 4Kb 크기의 고정 크기 블록이나 페이지로 나누고 한 번에 하나의 페이지에 작업, 덮어쓰기 작업, LSM 트리보다 쓰기가 느리고 읽기가 빠름

기타색인 : 색인 안에 값 저장(클러스터드 색인, 비클러스터드 색인, 커버링 색인), 다중 칼럼 색인(단일 숫자 변환, R트리), 전문 검색과 퍼지색인(루씬), 인메모리 데이터베이스

온라인 트랜잭션 처리 vs 온라인 분석 처리 : 전자는 적은 수의 레코드를 낮은 지연시간으로 기록, 데이터의 최신 상태 중심, 후자는 대규모 불러오기, 의사결정을 위한 내부 분석 → 데이터 웨어하우징

[발췌]
트랜잭션 처리는 주기적으로 수행되는 일관 처리 작업과 달리 클라이언트가 지연 시간이 낮은 읽기와 쓰기를 가능하게 한다는 의미이다. 93p

[메모]
B트리, LSM트리별, 기타 색인별, OLTP와 OLAP별 특징이 있다.."
2023-03-21 20:56:41,"김현진","데이터중심 애플리케이션 설계

월요일
https://www.notion.so/ongoingjin/W02-1-71-84p-5636e3e991454dd985d2f4020119e6fe
화요일
https://www.notion.so/ongoingjin/W02-2-85-97p-76f9fd79c38542ac86260459268c50fc
"
2023-03-21 21:48:02,"김효선","3/21 팩트풀니스

https://heady-dinghy-922.notion.site/2023-03-21-86-94p-c0c5cc967b6045769baaeb25173d351f"
2023-03-21 21:51:40,"소재훈","3월 20,21일(월,화) 컴퓨터 네트워킹 하양식 접근 Day7,Day8 입니다!
제출자: 소재훈
https://geode-drizzle-777.notion.site/2-HTTP-3daa1c6633094a7db7bb3c73c18acad8"
2023-03-21 23:19:55,"강민규","여러분 야심한 밤에 다들 잘 준비를 하고 계신가요? 오늘도 너무 수고 많으셨습니다!"
2023-03-21 23:20:32,"정소영","이모티콘"
2023-03-21 23:20:49,"강민규","@오홍근 @이현주 @최창훈 선생님들은 주무시기 전에 월, 화 분량을 꼭 챙겨봐주세요!!"
2023-03-22 00:25:09,"오홍근","[쏙쏙 들어오는 함수형 코딩][오홍근][day7-8]
70-94p
<요약>
- 인자와 리턴값은 불변이어야 한다.
  바뀔 수 있는 인자는 암묵적 입력이며, 바뀔 수 있는 리턴은 암묵적 출력이다.

<메모>
- 아주 작은 코드 조각의 중복을 제거하고자 컬렉션을 복제하는 것이 과연 효과적인 일인지 의문이다.(p89)"
2023-03-22 02:00:53,"이현주","day7 양이 많네요ㅋㅋㅋ 된다면 내일… 이틀치를 올리겠습니다
https://codefordance.tistory.com/15"
2023-03-22 02:01:26,"강민규","됩니다 ㅎㅎ"
2023-03-22 02:48:33,"김형우","https://engineer-diary.tistory.com/165"
2023-03-22 06:59:27,"최창훈","컴퓨터 네트워킹 하향식 접근 (7, 8일차)

https://cautious-ocarina-cca.notion.site/Chapter2-c6f6be28c027499087f155f5223a1918"
2023-03-22 09:02:32,"강민규","사진"
2023-03-22 09:03:43,"강민규","여러분들 좋은 아침입니다~ 다들 환절기에 건강 잘챙기세요! 오늘도 화이팅입니다"
2023-03-22 10:57:55,"강민규","@오홍근 홍근님 제가 스칼라의 함수형 프로그래밍 라이브러리 지오를 써서 현업에서 개발중인 친구와 논의해본 결과입니다.

일단 컬렉션 복제하는거는 코드 중복 제거목적이 아니고 불변데이터 써서 순수함수로 만들려는 목적입니다.

성능에 관하여는 물론 느려지긴하겠다만 그정도 성능 차이가 영향이 있을거같진않다고 합니다. 쿠키런 킹덤 개발하시는 분인데 그 쪽 프로덕트에도 컬렉션은 거의 다 복제하는데 게임이 돌아가는데 별 이상은 없다고 하네요.

그리고 컴파일하는 언어의 경우에 컴파일러 측에서 대체로 최대한 최적화를 해주고,

자바스크립트 처럼 인터프리터의 경우, 제가 아는 바는 v8 엔진 한정이긴 합니다만, 객체를 복사할 떄 쓰는 스프레드 연산자나, assign 메서드의 경우 fast path copy라는 최적화 방식을 이용하여 이런걸 가능하게 합니다. 복사하는 값이 원래의 값과 구조가 거의 비슷하게 생기면 값을 복사하는데 필요한 메모리와 복사하는 양을 최대한 줄이고 코드를 쉽게 추론할 수 있도록 하여 성능 상에 큰 영향이 없다고 합니다.

이렇게 이미 코드 해석과 실행에 관하여 많은 최적화가 이루어져있기 때문에, 함수가 순수함수일 때의 이점이 개발자가 자체적으로 변수의 지역성을 최대한 활용하려고 할 때의 이점보다 더 크기 때문에 대체적으로는 객체를 변경하지않고 이용하는 것이 더 나을 가능성이 크다 라고 생각해볼 수 있을 것 같습니다.

물론 트레이드 오프를 생각하여 상황마다 다르게 적용해야겠지만요."
2023-03-22 11:12:33,"오홍근","오 답변 감사합니다.
저는 java 백엔드 개발자 입장에서 생각해봤습니다.
collection copy는 기본적으로 shallow copy이고 deep copy에 대해서는 따로 신경을 써줘야 하는데 코드 효율성 면에서나, 메모리 측면에서나 그럴 필요가 있는 예시였을까 싶었어요."
2023-03-22 11:19:16,"강민규","책 뒷부분에 딥카피 관련한 내용이 좀 나오는데 그 부분 저도 한번 읽어볼게요"
2023-03-22 13:50:49,"김민수","[수요일] 바바라 민토 논리의 기술
1부 논리적으로 글쓰기 - 4장 도입부는 어떻게 구성하는가 - 스토리형식

[요약]
상황-전개-해결 순서를 가져야 하는 이유
핵심단계는 핵심포인트에서 발생한 새로운 질문에 답변하고 글의 내용을 명확하게 해주는 역할을 한다.
길이가 긴 글은 상황, 전개, 주요 포인트를 정리한 뒤 각각의 핵심단계 포인트를 나열하면 독자는 쉽고 빠르게 글의 개요를 이해할 수 있다.
글의 방향을 예측할 수 있는 독자는 글을 쉽고 재미있게 읽을 수 있다.

[발췌]
""어떤 경우든 독자는 앞으로 어떤 내용이 나올 것인지 예측할 수 있으므로 즐겁게 글을 읽을 수 있다.""
독자가 글을 쉽게 읽을 수 있도록 글의 방향을 제시해주어야 한다.

[메모]
결국 책에서 제시한 방향대로 글을 작성하려면 글을 써내려가기 전에 생각을 정리하는것이 필수라고 느껴진다.
또한 책에서 제시한 방향대로 글을 썼을 때 효과적인 경우는 (특히 회사에서) 아주 많을 것이라고 생각된다."
2023-03-22 13:54:49,"영동","함수형코딩 95-105
요약
- 설계는 엉켜있는 코드를 푸는 것이다.
- 크고 복잡한것이 더 잘만들어졌다고 느낄 수 있지만 오히려 잘 분리하는 방법을 찾는게 더 어렵다.
- 비즈니스 로직이 녹아 있는 함수와 파라미터의 이름보다 일반적인 이름을 사용한다. 그리고 비즈니스 로직은 일반적인 함수들을 감싸서 만든다.

결과적으로 의존성이 강한 부분을 해결하게 되고 원시자료구조를 변경하고 사용하는 것은 유틸리티 함수로 다양한곳에 사용할 수 있다.

"
2023-03-22 15:55:21,"소재훈","3월 22일(수) 컴퓨터 네트워킹 하양식 접근 Day9 입니다!
제출자: 소재훈
https://geode-drizzle-777.notion.site/3-344c71a8fedc461781bb4c3d6be52edc"
2023-03-22 17:09:22,"길인식","[데이터 중심 애플리케이션 설계]
[요약]
분석용 스키마 - 별모양(차원 모델링): fact_table을 중심으로 각 칼럼테이블 분포 / 눈꽃송이 모양: 차원이 하위차원으로 더 세분화, 외래키 참조 등
칼럼 지향 저장소: 분석용으로 select * 질의 거의 필요하지 않음 → 로우 지향이 아닌 칼럼 지향 저장, 칼럼 압축(런 렝스 부호화), 벡터화 처리
칼럼 저장소 정렬화: 예상 질의에 따라 정렬, 보조 정렬키 사용, 칼럼 압축에 도움

[발췌]
복제 데이터를 서로 다른 방식으로 정렬해서 저장하면 질의를 처리할 때 질의 패턴에 가장 적합한 버전을 사용할 수 있다. 103p

[메모]
칼럼 지향 저장소의 쓰기 방식은 제자리 갱신 접근방식 보다 인메모리 저장소를 이용해 디스크에 병합하는 방식이 효과적"
2023-03-22 17:45:42,"이미정","# # [쏙쏙 들어오는 함수형 프로그래밍]96~105pg

[요약]

Cleanup global variable that is not being read anywhere & superfluous function

Calculations: group calculations into: cart operation/ item operation/ business rule

- Layers

Principle: Design is about pulling things apart

- It is important to figure out useful ways to pull things apart
    - Benefits: easier to reuse, maintain, test

Extracting a copy-on-write pattern

- If function is related to both business rule & cart operation: to cam be a code smell, it is better to pull those out"
2023-03-22 19:47:15,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
회차: 8회차

[ 요약 ] 
1. 우리가 나아지기 위해 통제할 수 있는 건 ‘성격’
- 성격은 유전, 양육자와 관계, 그리고 경험과 습관 등으로 형성된다.
- 자신의 성격을 이해하면 부정적인 패턴을 중화하거나 중단시키는 방법을 배울 수 있다. 

2. 상대의 성격을 파악해라
- 상대방의 행동을 통해 그의 성격을 파악할 수 있다.
- 사람은 일상생활에서 자신의 성격의 결함을 잘 위장한다.
- 하지만 스트레스에 처하거나 위기에 처하면 그 결함들이 분명해진다.
- 직장이 아닌 곳에서 어떻게 행동하는 지 파악해야한다.

[ 메모 ]
- 사람은 어떤 일을 한 번만 하지는 않는다.
- 부정적 반복을 끊기위해 자신의 성격을 형성한 요소, 인생에서 계속 재발하는 부정적 패턴을 점검해라
- 상대를 관찰하여, 상대의 성격에 따른 상대적 강점을 알아야 한다.
- 성격적 강점이 있는 사람은, 비판을 잘 수용하며 본인의 경험으로부터 배운다."
2023-03-22 22:45:23,"김효선","3/22 팩트풀니스

https://heady-dinghy-922.notion.site/2023-03-22-95-101p-7aeb23b166c24753847368c543d5756a"
2023-03-22 23:05:46,"강민규","여러분 오늘도 즐거운 하루 보내셨나요. 일주일의 절반이 꺾였습니다. 조금 피곤해질 타이밍이지만 이 시기만 넘기면 곧 편해질겁니다! 화이팅~"
2023-03-22 23:06:26,"강민규","@이현주 @김형우 @이강욱 여러분들은 화, 수 분량 모두 읽어주세요~ "
2023-03-22 23:14:18,"김형우","요게화요일 분량입니다..! 수,목분량 내일작성하겠습니다.."
2023-03-22 23:14:34,"강민규","넵"
2023-03-23 00:41:18,"이강욱","https://velog.io/@rivolt0421/Grokking-Simplicity-89"
2023-03-23 02:00:04,"이현주","https://codefordance.tistory.com/16"
2023-03-23 06:43:18,"김현진","삭제된 메시지입니다."
2023-03-23 06:43:37,"김현진","https://ongoingjin.notion.site/W02-3-98-112p-d3f3637332624f6badf91c26a46973f4"
2023-03-23 07:43:19,"강민규","여러분 목요일입니다~ 오늘만 끝나면 이제 또 주말이 코 앞이네요. 오늘도 화이팅입니다!"
2023-03-23 07:43:23,"강민규","사진"
2023-03-23 08:09:33,"김현진","https://ongoingjin.notion.site/W02-4-113-123p-7ee1681473b747e59d8f165592fb2461"
2023-03-23 11:56:27,"Seo","3/22 수
https://lead-countess-db7.notion.site/DAY8-4491b32e5dfa46e1b41d10952a0427ee

3/23 목
https://lead-countess-db7.notion.site/DAY9-4a15d2fb600c4cc98c1c900349490a12"
2023-03-23 12:45:54,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
회차: 9회차

[요약]
### 긍정성으로 포장한 파괴적인 성격 유형
- 완벽주의자
: 모든 걸 직접 감독한다.
- 반항아
: 이들은 심술난 사춘기처럼 행동한다.
- 인신공격을 하는 사람
: 별 뜻 없이 한 말이라도, 이를 인신공격으로 여기고 며칠씩 고민한다.
- 드라마 퀸
: 지속적인 관심과 사랑을 받기위해 자신의 곤란과 문제 속으로 상대를 끌어들인다.
- 떠벌이
: 비난이나 심판을 받는 상황은 피하기 위해, 
: 상대에게 책임을 다할 것 같은 깊은 인상을 주고 늘 구실을 만들어 도망간다.
- 모든 걸 성적으로 만드는 사람
: 이들은 모든 인간관계를 성적인 관계로 여긴다.
- 응석받이 왕자/공주님
: 남들이 자신의 요구를 받아주게 만드는 데 선수다.
- 아첨꾼
: 이들의 깍듯함은 인간에 대해 애정이 아닌 방어기제의 일부이다.
- 구원자
: 이들은 상대를 돌봐주면서 크나큰 만족을 얻으나 상대를 통제하려 한다.
- 겉으로만 성인군자
: 사람은 착하거나 악할 뿐 중간지대란 없다.

[메모]
- 긍정성으로 포장한 파괴적인 성격 유형을 피해라
- 성격을 바꾸기 어렵다면, 원초적 성향을 파악하고 그 패턴을 바꾸는 것이 중요하다."
2023-03-23 13:37:08,"김민수","[목요일] 바바라 민토 논리의 기술
1부 논리적으로 글쓰기 - 4장 도입부는 어떻게 구성하는가 - 스토리형식

[요약]
도입부는 독자를 저자와 같은 출발선에 서게 할 수 있을 정도의 내용을 가지고 있어야 한다.
일반적으로는 2~3단락이며 독자가 이미 알고 있는 내용을 상기시키기 위해 그 이상을 기술할 필요는 없다.

[발췌]
""통상적인 왕래로 인해 독자와 가깝게 지낼수록 도입부의 길이는 짧아지지만, 독자에게 질문을 상기시킬 만큼의 길이는 되어야 한다.""
도입부는 목적에 따라 길이와 내용이 상이하다. 따라서 뒤따르는 글의 내용이나 길이보다는 독자와의 관계나 요구와 밀접하다.

[메모]
지금껏 써온 글들을 돌아보면 도입부에 대한 원칙들은 회사 이메일을 쓸 때에는 잘 지켜왔고, 긴 글을 쓸 때에는 잘 지키지 못한 것 같다. 글을 쓸 때에도 충분히 독자를 고려한 도입부를 쓸 수 있도록 해야겠다."
2023-03-23 13:59:37,"정소영","Day 8 수 (101-109)
넛지 파이널 에디션 

사회적 영향과 새로운 규범의 형성이라는 자기 충족적 예언 


인간은 떼 지어 몰려다닌다
- 사회적 변화는 우연처럼 보이는 넛지에서 시작. 어떤 의견/행동을 하면 그 의견을 가져도 된다는 신호로 작동함 > 대세를 따르는 것을 좋아하는 것도 이와 같은 이유 
- 사회적 영향의 범주 1. 정보 2. 또래 압력(다른 사람의 분노를 회피/환심을 사기 위해)
예) 미국 내 마스크 착용에 대한 거부 vs 미착용에 대한 거부 

• 남들 하는 대로 따라 하기 
- 정보, 또래압력 : 다만 익명일 경우에는 동조 경향이 낮아짐. 공개적일 때 높아지는데, 개개인의 판단이 수렴해 소집단 내에서 하나의 규범이 형성되기도 함. 

- 자신감 간편 추론법 : 자신있게 말하는 사람의 주장이 틀릴 리 없다고 여기는 것
- 내면화 : 소집단의 판단이 집단 구성원에게 내면화되어, 다른 집단으로 가서도 모두가 아니라고 할 때도 기존 판단을 바꾸지 않는 경향
 > 사회의 전통 혹은 믿음과 연결됨. 암묵적인 승인을 받았기에 전통 또한 지속되는 것. "
2023-03-23 15:14:40,"길인식","[데이터 중심 애플리케이션 설계]
[요약]
데이터 부호화 형식 :
보통의 데이터구조는 포인터를 사용 ⇒ 다른 프로세스가 이해할 수 없음 → 부호화 필요
프로그래밍 언어의 부호화 → 다른언어 호환 어려움, 효율낮음
표준 부호화 ⇒ JSON, XML, CSV

JSON :
웹 브라우저에 내장된 지원, XML대비 단순
number의 부호화 시 정수와 부동소수점 수를 구분하지 않고 정밀도 지정하지 않음

이진 부호화 라이브러리 :
아파치 스리프트, 프로토콜 버퍼
스키마 정의에 따라 필드 이름 대신 태그 사용(json, xml 모두 스키마를 지원하긴함)

[발췌]
포인터는 다른 프로세스가 이해할 수 없으므로 이 일련의 바이트열은 보통 메모리에서 사용하는 데이터 구조와는 상당히 다르다. 115p

[메모]
json, xml은 이진 문자열을 지원하지 않아 base64를 사용해 이런 제한을 피함"
2023-03-23 17:20:41,"이미정","# # [쏙쏙 들어오는 함수형 프로그래밍]106~115pg

[요약]

Eliminate implicit inputs and outputs by replacing them with arguments and return values.

Design is about pulling things apart

- Functions will have single responsibilities, it becomes easier to organize around concepts

Chapter 6 Staying immutable in a mutable language

- Apply a copy-on-write discipline to ensure that data is not changed
- Develop copy-on-write operations for arrays and objects
- Make copy-on-write work well for deeply nested data

Copy-on-write discipline: make a copy & modify copy & return the copy

Data is nested: there is data within data structures ex) array full of objects

Categorize operation into read & write

3 Steps of the Copy-on-Write Discipline:

1. Make a copy
2. Modify copy
3. Return copy

What it does:

- Not modifying the original data
- Copy is within the local scope, no other code has access to it while we modify it
- After we’re done modifying it, we let it leave the scope

Splice() - modifies

Slice() - makes a copy

[발췌]

[메모]"
2023-03-23 21:59:50,"김효선","3/23 팩트풀니스

https://heady-dinghy-922.notion.site/2023-03-23-102-106p-a5f81e66ef064c3e8ae7edacaa436755"
2023-03-23 22:17:24,"영동","함수형코딩 106-115

요약

불변형데이터로 만드는 것 

복사하기
변경하기
리턴하기

기존의 값을 변경시키지 않았기 때문에 영향을 주지 않았기 때문에 액션이 아니고 계산이 되는 것이다."
2023-03-23 23:13:13,"김채욱","[컴퓨터 네트워킹 하향식 접근_3/22(수)+3/23(목)]
[내용요약]
[웹 캐싱]

정의 : 웹 서버를 대신해서 클라이언트의 요청을 듣는 서버 및 클라이언트입니다.

추가 설명 : 서버의 자원 복사본을 들고 있어서, 서버를 대신해서 HTTP요청에 대한 응답을 합니다. 

장점 :

빠른 응답 : 클라이언트의 요청에 대한 응답 시간을 줄일 수 있습니다.

네트워크 전체 트래픽 감소 : 클라이언트와 서버간의 거치는 링크가 많을 수록, 불필요한 네트워크 통신 비용이 나타납니다. 중간 매개체로 전체 과정을 줄임으로써, 네트워크 전체 트래픽을 줄일 수 있습니다

특징 :

캐싱 : 웹서버 자원의 복사본을 들고 있어서, 빠른 자원 전달이 가능합니다.

프록시 : 중간 매개체로 다양한 업무를 수해합니다, 유저 인증 여부에 따른 별도 컨텐츠 제공 혹은 필터링이 가능합니다.

로드 밸런싱 : 다수의 서버에 적절한 트래픽을 배분시켜서 과부하를 방지합니다.

​

[조건부 GET]

정의 : 웹 캐싱과 객체 최신화를 가능케하는 웹 캐싱 기술입니다.

추가 설명 : 헤더에 last-modified:날짜 형태로 저장하여서, 클라이언트의 자원 요청시 자원의 상태와 비교할 수 있습니다. 

​

[SMTP]

정의 : Simple Mail Transfer Protocol, 이메일 메시지 전송 프로토콜입니다.

추가 설명 : 포트 25, TCP연결로 전송자와 서버간의 연결을 함으로써 채널을 만듭니다. 이후 메시지 규격에 따르며 메일 전송을 합니다.

웹 구성 : 

메일박스 : 서버에서 메세지 보관 및 유지관리합니다. 이후 연관된 유저는 메일 박스에서 받은 메세지를 찾을 수 있습니다. 유저의 이메일 주소와 연관되어 있습니다.

메시지 큐 : 전달자가 수신자에게 메세지를 전달하지 못하면, 전달자의 큐에 메시지를 임시 저장하고, 일정 주기별로 재전송합니다.

메시지 구성 :

헤더 : 이메일 주소의 메타데이터가 담깁니다. From, To는 필수적으로 포함되어서 key : value형태로 보냅니다. ex) From : ccc@ccc.com

바디 : 이메일 메세지 자원을 담습니다.

* SMTP는 push 프로토콜이기에, 최종 받는자는 http로 이메일을 받습니다.

​

[DNS]

정의 : Domain Name System, 분산 계층 시스템으로 호스트 네임과 IP주소의 번역을 책임 집니다.

추가 설명 : 로컬 DNS가 루트 서버에 질의를 하고, 재귀적으로 해당 호스트네임을 가지고 있는 dns서버에게까지 밑으로 전달합니다. 

구조 :

루트 서버 : TLD 서버의 위치를 관리하고 있는 최상위 서버입니다.

TLD 서버 : top-level domain, 각 도메일 이름과 관련된 서버를 관리합니다. 예를들어, com DNS서버가 com으로 끝나는 호스트 이름의 책임 서버를 관리합니다.

책임 서버 : 호스트 네임과 매핑과 IP 정보를 가지고 있습니다. 

로컬 서버 : ISP에 연결시 로컬 DNS으로부터 IP주소를 얻고 호스트에게 전달합니다. 호스트가 DNS질의를 보내면 로컬 DNS가 프록시 역할을 합니다. 

메세지 구조 :

헤더 영역 : 메시지의 메타데이터를 답습니다. 

식별자 : 16비트로 질의에 대한 응답 확인을 위해 사용됩니다.

플래그 : 1 비트로 쿼리인지 응답인지 나타냅니다

질문 수,응답수, 책임 RR, 추가 RR  : 각 섹션의 엔트리 수를 의미합니다.

각 섹션 : 질의를 위한 데이터를 담습니다. 답변 섹션에는 질의에 대한 자원레코드를 담습니다. 

* DNS DB는 전용 기관에 의해 레코드가 삽입됩니다.

​

[자원 레코드] 

정의 : resource record, RR, 호스트 네임과 IP주소를 매핑하기 위해 DNS 분산 데이터베이스에서 사용합니다.

구조 : 투플 형태로 (Name, Value, Type, TTL) 되어 있습니다. 구체적인 값을 type에 따라 다릅니다.

name : 호스트 네임 혹은 도메인 네임, 별칭입니다.

value : IP주소 혹은 ip 주소를 알고 있는 다음 DNS서버를 나타냅니다. 

​

[P2P]

정의 : 비집중화된 네트워킹 모델입니다. 각 호스트간의 자원 공유를 직접적으로합니다.

장점 :

확장성 : 유저 참여율이 높을 수록 자원 공유량이 증가합니다.

회복성 : single point of failure가 있어도, 다른 피어의 자원으로부터 분배 받을 수 있습니다.

​

[DASH]

정의 : dynamic adaptive streaming over HTTP, 비디오 스트리밍 프로토콜입니다. 

추가 설명 : 네트워크 환경에 따른 실시간 스트리밍 양을 조절합니다. 클라이언트는 동적으로 다른 버전의 비디오를 chunk 단위로 요청합니다. "
2023-03-24 00:22:28,"오홍근","[쏙쏙 들어오는 함수형 코딩][오홍근][day9-10]
95-115p
<요약>
- 함수는 한 가지 일만 하도록 충분히 작아야 한다.
- 쓰기 동작은 불변성 원칙(copy-on-write)에 따라 구현해야 한다.
- copy-on-write의 세 단계
  1. 복사본 만들기
  2. 복사본 변경하기
  3. 복사본 리턴하기
- copy-on-write는 쓰기를 읽기로 바꾼다.

<메모>
java 실무에도 적용할 수 있는 내용일까?"
2023-03-24 00:47:35,"김형우","[수요일 분량]
https://engineer-diary.tistory.com/166"
2023-03-24 00:55:33,"영동","정정 

함수형코딩 106-115

요약

불변형데이터로 만드는 것 

복사하기
변경하기
리턴하기

기존의 값을 변경시키지 않았기 때문에 부수효과가 없다. 액션이 계산이 되는 것이다."
2023-03-24 00:58:44,"강민규","여러분 늦은 밤입니다. 사정이 생기면 늦을 수 있지만 결국 하고 마는 것. 그게 중요한 것 아니겠습니까?"
2023-03-24 00:59:21,"강민규","그런 의미에서 @박예린 @최창훈  선생님들은 수, 목 분량을 오늘 제출해보도록 합시다~"
2023-03-24 02:38:03,"박예린","쏙쏙들어오는 함수형 프로그래밍 (수, 목 분량)
95~115p

요약
- 암묵적 입력과 출력은 인자와 리턴값으로 바꿔 없애는 것이 좋다
- 함수를 작게 분리하여 설계하면, 재사용하기 쉬우며 유지보수하기 쉽고, 테스트하기 쉽다
- 쓰기 동작은 불변성 원칙에 따라서 구현해야 한다
- copy-on-write
 1. 복사본 만들기
 2. 복사본 변경하기
 3. 복사본 리턴하기 "
2023-03-24 04:20:55,"최창훈","컴퓨터 네트워킹 하향식 접근(9일차)
https://cautious-ocarina-cca.notion.site/Chapter2-c6f6be28c027499087f155f5223a1918

10일차와 11일차는 금요일에 올리도록 하겠습니다."
2023-03-24 07:44:05,"강민규","사진"
2023-03-24 07:45:16,"강민규","벌써 금요일이 다가왔네요!! 2주차도 거의 끝났습니다. 여러분은 정말 최고로 잘하고 계시네요. 앞으로도 같이 화이팅 하시죠~"
2023-03-24 08:01:20,"김민수","[금요일] 바바라 민토 논리의 기술
1부 논리적으로 글쓰기 - 4장 도입부는 어떻게 구성하는가 - 스토리형식

[요약]
본문의 도입부와 마찬가지로 핵심 단계 포인트에도 도입부가 필요하다.
비교적 짧지만 상황, 전개, 질문 프로세스를 거쳐야 한다.
이 과정을 통하여 저자와 독자가 같은 선상에 있다는 확신을 주며 핵심 단계 포인트에 대해 독자에게 질문을 유도한다.
도입부를 잘 쓰는 요령은 아래와 같다.
1. 정보를 전달하는 것이 아니라 상기시켜야 한다. 내용의 타당성을 설득해서는 안 된다.
2. 스토리의 3요소인 상황, 전개, 해결이 들어가야 한다.
3. 도입부의 길이는 독자의 요구와 문서의 주제에 따라 상이하다.

[발췌]
""때로 도입부를 통해 생각해봐도 쉽게 질문을 결정할 수 없는 경우도 있다. 이런 경우 먼저 본문에서 다루고자 하는 소재를 살펴보고 독자에게 전달하고자 하는 포인트가 있는지 확인한다.""
항상 도입부를 쓰기 어려운 것은 도입부에 무엇을 써야하는지, 독자가 얼마나 알고있는지 판단하는 것이다.

[메모]
때로는 독자가 누구인지부터 고민하게 된다.
항상 모든 준비가 다 되어있는 상태에서 글을 쓸 수 있는 것은 아니지만 그럼에도 불구하고 원칙에 최대한 근접하게 쓰려는 노력을 하면 보다 나은 글을 쓸 수 있을 것이다."
2023-03-24 09:38:57,"영동","함수형코딩 116-129

요약

결과를 반환하는 것이 읽기 작업이다.

기본컬렉션 함수중에는 읽기와 쓰기를 모두하는 함수들이 있다. array의 pop, shift

pop을 통해 마지막 요소을 제거하며 반환하는 것이 아니라

getLastElem, removeLastElem 하는것이 낫다. 확실한 목적성

읽기 쓰기 동시에 하는 일을 각각 구분하면서 카피온라이트를 진행한다.

이러한 과정들이 반복적이고 비효율적으로 보이지만, 코드가 반복 사용되고 예측 가능한 일반적인 코드로 바꾸는 작업이다

재사용하고 유용한 것을 만들기가 좋다"
2023-03-24 12:36:00,"이현주","안녕하세요 @강민규 님 질문이 있습니다...! 지금 제가 읽고 있는 소프트웨어 아키텍처 101이... 처음부터 한장씩 정독하기엔 비효율적인 감이 좀 있는데 혹시 날짜별 정해진 분량을 조정하거나 다른 책으로 바꾸는 것이 선택지에 있을까요?"
2023-03-24 12:46:41,"강민규","다른 책으로 바꾸게는 힘들 것 같고 남은 분량을 조정해볼까요? 어떤 방향으로 바뀌길 원하시나요?"
2023-03-24 12:48:51,"강민규","전 딱히 비효율적이라는 생각은 못했었는데 그렇게 생각하신 계기가 있으신가요?"
2023-03-24 12:51:42,"이현주","중요한 챕터들을 골라내서 그 안에서 분량을 다시 나누면 좋을 것 같습니다 (어느 챕터들을 읽을지는 좀 더 봐야 할 것 같아요). 너무 추상적이고 메타적인 이야기가 많이 나와서 제가 아는 프로그래밍과 접목시키기 어렵고, 그 내용이 너무 반복적이라 말씀드리게 되었습니당."
2023-03-24 13:36:25,"강민규","현주님 좋은 제안 주신 것 정말 감사드립니다.

‘똑같은 내용을 여러번 봐야하고 실생활에 적용시키기 힘드니 처음부터 끝까지 읽기엔 비효율적인 책이다’라는 내용으로 제가 이해를 했습니다.

제가 생각하는 바를 말씀드리겠습니다. 결론적으로는 일단 끝까지 완독하는걸 목표로 지속해보시면 어떨까 합니다.

사실 책이라는 매체가 전반적으로 그런 부분이 있습니다. 책이 전달하고자하는 핵심이 계속해서 반복되지요. 쏙쏙 들어오는 함수형 코딩을 예로 들자면, 함수형 프로그래밍이 부수효과를 제어하는 방법이다. 부수효과를 제어하는 방법은 이런게 있다. 정도가 되겠지요. 내용이 진행됨에 따라서 끊임없이 부수효과의 치명적인 단점과 제어의 필요성에 대해 언급할겁니다. 결국 책이 말하고자 하는 바가 그것이기 때문이지요. 유명한 책들, 오브젝트, 도메인 주도개발, 클린 코드… 모든 책들이 그렇습니다.

소프트웨어 아키텍처 101로 돌아와보면, 이 책이 계속 반복해서 던지는 메시지는 ‘정답은 없다. 의사 결정의 요소에 대해 검토하고 최적의 아키텍처를 선정해라’ 일겁니다. 

그럼에도 유튜브 핵심 요약 대신 책을 읽기로 선택하는 것은 책의 여러 맥락 속에 나타나는 이런 반복적인 메시지 전달 때문이라고 생각합니다. 

현주님께서 말씀하셨다시피 이런 추상적인 내용들은 일에 접목시키기 어렵습니다. 이런 추상적인 개념들을 효과적으로 업무에 적용하기 위해서는 몸과 마음으로 이런 개념을 받아들여야만 합니다. 본인이 아키텍처를 설계하는 아키텍트가 아니라면요. 

그냥 개발자는 단순히 ‘이런 아키텍처들이 있다. 어떤건 비용이 덜들고 어떤건 유지보수가 편하다. ‘ 라는 지식을 알고있다고 해서 업무에 적용할 수 없습니다.  책에서 계속 말하는 트레이드오프, 의사결정의 핵심이 되는 기준들, 그리고 많은 선택지가 완전히 나의 것이 되어야 개발을 하는 와중에, 시간의 흐름에 따라 변화될 요구사항, 변화될 아키텍처를 고려한 유연한 코드 레벨의 설계를 고려하는 사고방식을 가질 수 있게 됩니다. 그리고 이런 익힘은 천천히 지식을 소화하는 과정 속에 이루어집니다. 

저는 중요한 부분만 골라보고 2주만에 끝내기보다는 이런 저런 고민들을 하면서 천천히 읽었습니다. 책의 내용이 전부일까? 이런 문제가 더 있을 것 같은데? 이런 상황에서는 이렇게 하는게 낫지않나? 우리 서비스 도메인은 앞으로 이렇게 될 것 같은데, 아키텍처는 이런 방향으로 진화하지 않을까? 그러면 이 코드는 좀 문제가 될 것 같은데? 

현주님도 이런 고민을 하다보면 자연스럽게, 더 나은 코드가 무엇인지까지 닿게 될겁니다. 그런 말이 있어요, 객체 지향을 제대로 이해하고있다면 디자인 패턴을 몰라도 디자인 패턴을 사용하게 될 것이다. 아키텍처도 마찬가지입니다. 아키텍처 설계의 핵심을 이해하고 있다면 소프트웨어 엔지니어링을 몰라도 아키텍처든 코드 설계든 아니면 개발 인력의 기용이든 개발과 관련한 다방면의 영역에서 훌륭한 의사결정들을 내릴 수 있습니다. 

그래서 제 생각에는 일에 당장 적용시키려고 쓸만한 지식을 탐색하는 것보다는, 책 내용 전반을 천천히 읽어보며 책의 주제 그리고 소개해주는 아키텍처 하나하나마다 매일 고민해보시는게 어떨까 하는 생각이 듭니다. 

그럼에도 불구하고 생각이 바뀌지않으신다면 제가 분량을 한번 조정을 해보도록 하겠습니다! 한번 고려해봐주세요~"
2023-03-24 13:48:04,"영동","삭제된 메시지입니다."
2023-03-24 13:48:56,"영동","민규님 말에 저도 동의합니다! 함수형코딩도 보면 지금까지 계속 액션과 계산을 분리해라 내용밖에 없습니다 그만큼 중요하다는 이야기겠죠. 

저는 책너두 하기 전에 DDD책을 읽고 적용했었는데 책 하나로는 안되더라구요. 책에서 나온 예제는 제가 사용할 프레임워크도 아니었구요. 결국에는 DDD책 3권정도 읽고 나서야 제가 쓰는 nest에서 기본적으로 제공하는 컴포넌트들을 기능별로 배치하고 가공하는걸 직접 해볼 수 있게 됐어요.

특히 프로그래밍 패러다임, 근본적인 소프트웨어에 대한 얘기하는 책 일수록 더 뜬구름잡는 소리를 합니다. 쉽지 않더라구요. 

제 추천은 같은 내용을 말하는 구체적인 예시를 드는 책을 동시에 하나 더 읽는거 추천드립니다!"
2023-03-24 13:53:30,"이현주","민규님, 영동님 자세한 이야기 감사드립니다. 저에게 더 잘 적용할 수 있는 방법을 고민하면서 읽어야겠네요ㅎㅎ 그럼 일단 더 읽어보는 것으로 하겠습니다! 구체적인 예시를 볼 수 있는 자료는 따로 찾아봐겠네요. 바쁜 평일에 시간 내주셔서 감사합니다!"
2023-03-24 13:56:02,"이미정","이모티콘"
2023-03-24 14:05:50,"영동","파일: 마이크로서비스아키텍처구축.pdf"
2023-03-24 14:06:10,"영동","파일: 소프트웨어아키텍처.pdf"
2023-03-24 14:06:28,"영동","파일: 적정소프트웨어아키텍처.pdf"
2023-03-24 14:06:49,"영동","파일: 클린아키텍처.pdf"
2023-03-24 14:06:58,"영동","파일: 파이썬으로살펴보는아키텍처패턴.pdf"
2023-03-24 14:07:07,"영동","제가 가지고 있는 아키텍처 키워드 들어있는 책 전부 보내드립니다. (그냥 키워드 검색하고 보내드리는거라서 101하고는 안맞을 수도 있습니다)  101에서 부족한 부분을 다른책에서 보충해서 읽는 방식을 사용하시면 좀 더 도움 되실거에요! 책이 인터넷 검색보다는 더 나을겁니다 "
2023-03-24 14:46:34,"이현주","헉 감사합니다 영동님!! 눈부시네요...✨"
2023-03-24 14:46:48,"이미정","감사합니다"
2023-03-24 16:49:23,"최창훈","컴퓨터 네트워킹 하향식 접근(10일차, 목)
https://cautious-ocarina-cca.notion.site/Chapter2-c6f6be28c027499087f155f5223a1918

11일차는 읽고있습니다~!"
2023-03-24 17:41:00,"이미정","# # [쏙쏙 들어오는 함수형 프로그래밍]116~129pg

[요약]

Javascript arrays: ordered collections of values

- Heterogeneous: can have values of different types in them at the same time
- Access elements by index
- Diff from what are called arrays in other languages: extend & shrink them unlike arrays in Java and C

Sometimes a function plays 2 roles at the same time: modify & return value

Ex) shft()

- > how to convert it to copy-on-write
- > convert a write to a read

1) split the function into read and write

2) return two values from the function

[발췌]

[메모]

Pg127

- Js: 배열도 객체인데 “**Wouldn’t an associative data structure like an object be better?” Dictionary 같은걸 말하는건가??**"
2023-03-24 19:24:20,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
회차: 10회차

[요약]
### 인간은 항상 새로운 걸 욕망한다.
- 우리는 천성적으로 가진 것에 쉽게 만족하지 못한다. 
- 바라던 것을 얻으면 우리는 다른 걸 찾아 떠나는 본성을 가지고 있다. 
- 우리는 심리상 언제나 옆진 잔디가 우리집 잔디보다 더 푸를 거라고 생각한다.(가지지 못한 걸 원함) 
- 하지만 이러한 본성을 불평하거나 도덕적으로 비난하면 안된다. 
- 이 본성이 우리가 새로운 가능성을 생각하고 혁신하게 하기 때문이다.

### 욕망을 자극하는 세가지 전략
- 자신의 가치를 올리기 위해 욕망을 자극해라
- 욕망을 자극하는 세가지 전략은 아래와 같다.
1. 자신을 너무 뻔하게 드러내지 마라
2. 욕망의 경쟁상대를 만들어라
3. 자신이 제안하는 것이 이국적이고 새롭고 낯설게 보이게 해라

[메모]
- 인간은 새로운 걸 욕망하는 본성을 가지고 있다.
- 이 욕망을 이용하면 자신의 가치를 올릴 수 있다.
"
2023-03-24 19:49:42,"소재훈","3월 23일,24일(목,금) 컴퓨터 네트워킹 하양식 접근 Day10,11 입니다!
제출자: 소재훈

https://geode-drizzle-777.notion.site/4-DNS-4098bb5adfd3488480b86e0311649673

https://geode-drizzle-777.notion.site/5-P2P-bd80dfd1ccd34d9db77e957b6b24b1a8"
2023-03-24 21:17:44,"길인식","[데이터 중심 애플리케이션 설계]
[요약]
아브로 : 하둡 하위 프로젝트에서 시작, 태그번호 없이 순서(스키마)로 구분, 쓰기스키마와 읽기스키마가 동일하지 않아도 호환 가능한지가 중요, 동적 생성 스키마
호환성 유지 : 기본값 있는 필드만 추가하거나 삭제

[발췌]
요약하면 스키마 발전은 스키마리스 또는 읽기 스키마 JSON 데이터베이스가 제공하는 것과 동일한 종류의 유연성을 제공하며 데이터나 도구 지원도 더 잘 보장한다. 131p

[메모]
아브로로 문서 스키마가 최산 상태인지 확인할수도 있고 상위 호완성 및 하위 호환성을 확인할 수 있다."
2023-03-24 22:14:22,"김효선","3/24 팩트풀니스

오늘 범위인 4페이지 모두 목차 표지로 구성되어 있어 딱히 내용이 없네요. 패스하고 내일 독서로 이번주 마무리하겠습니다~"
2023-03-24 22:24:42,"강민규","여러분 이번 주도 이렇게 마무리가 되었습니다. 알찬 주말 보내셧나요? 저는 월 화 자체 해커톤 했다가 일주일 내내 컨디션이 나빴습니다.. 그렇지만 뭐라도 해서 기쁘고 주말에 쉬려고 합니다. 여러분도 이번 주 분량 끝내시고 푹 쉬세요!"
2023-03-24 22:25:44,"강민규","@김형우 @박예린 @이강욱 @이현주 @정소영  여러분들은 목요일 금요일 분량 해주시면 되겠습니다!!"
2023-03-24 23:18:59,"정소영","3.23 목 (110-116)
넛지 파이널 에디션 

감각적으로 인지한 명백한 증거를 무시한 채(정답일지라도) 다른 사람의 의견에 동조하게 되는 이유

- 또래 압력 및 집단 전체를 부인하는 상황에 맞닥뜨리고 싶지 않은 ‘욕망’
- 자기가 말하는 것을 다른 사람들이 지켜본다는 사실을 알고 있을 때 동조 경향이 높아짐 
- 만장일치로 한목소리를 내는 집단은 가장 강력한 넛지를 제공할 수 있음

예) 다섯가지의 선택지를 개인적으로 물었을 때의 특정 A대답은 12%. 동조 집단이 있을 때는 48%까지 올라감. 정치적인 면이 깊은 곳에서도. 

동조는 매우 강력한 넛지. 선택설계자가 이 점을 이용해 더 나은 방향으로 유도해야 할 것"
2023-03-24 23:19:21,"정소영","3.24 금 (117-124)
넛지 파이널 에디션

문화적 변화와 정치적 변화, 그리고 예측 불가능성

정보의 폭포 : 어떤 현상이 폭포처럼 순차적으로 증가하는 것
- 사람들이 타인이 내린 판단을 보고 정보를 받아들일 때 나타남 
- 예) 음악 선택시 다른 사람들이 얼마나 다운로드 했는 지 보일 때. 다운로드 수가 높은 노래를 선택하는 확률이 높음 
- 평판 폭포 현상이 동반되기도 함 : 정보를 받아서가 아닌, 그들의 반감을 사고 싶지 않아 선택하는 경향
- ‘소수가 초기에 표명한 의견’이 대규모 개체군의 의견을 좌우하는 데 중대한 영향을 행사할 수 있음 

메모
우리는 남에게 영향력을 행사할 의도가 전혀 없는 사람들에게 날마다 영향을 받음.
대부분 함께 식사하는 동료의 식습관에도 영향을 받음. 의도와 무관하게도."
2023-03-24 23:29:57,"정소영","민규님 독서 넛지 감사합니다(🤭) 많은 분들이 함께 달리니 더 동기부여가 되네요 이또한 넛지 .. 
모두 한주간 고생많으셨습니다 :) "
2023-03-24 23:37:20,"Seo","3/24 금
https://lead-countess-db7.notion.site/DAY10-4194e0cd9e1743aa9046595a67c38348"
2023-03-25 02:25:04,"김형우","[목요일 분량]
https://engineer-diary.tistory.com/167"
2023-03-25 03:23:12,"이강욱","https://velog.io/@rivolt0421/Grokking-Simplicity-1011"
2023-03-25 03:38:19,"이현주","[목요일 분량]
https://codefordance.tistory.com/17"
2023-03-25 06:58:17,"김현진","https://ongoingjin.notion.site/W02-5-124-133p-6ee6649830774df69cad33648fa16bd3"
2023-03-25 07:33:19,"박예린","쏙쏙 들어오는 함수형 코딩 (금요일, 116~129p)
- 목요일 분량은 어제 수요일 분량과 함께 이미 읽었습니다!

요약
- 어떤 동작은 읽고 변경하는 일을 동시에 한다 ex) .shift()
- 읽기와 쓰기를 동시에 하는 함수는 다음과 같이 바꿀 수 있다.
 1. 읽기와 쓰기 함수로 각각 분리하기
 2. 함수에서 값을 두 개 리턴하기 
- 1번 방법이 책임을 분리하기 때문에 더 좋은 방법이다
- copy-on-write를 사용하기 위해서, 필요한 시점에 함수를 만들어 두는 것이 더 낫다. 코드의 반복을 막고 재사용을 하기 쉽기 때문이다."
2023-03-25 08:45:47,"강민규","사진"
2023-03-25 08:47:40,"강민규","여러분 좋은 주말입니다~ 이번 주 잘 마무리해봅시다!!"
2023-03-25 08:47:40,"김민수","[토요일] 바바라 민토 논리의 기술
1부 논리적으로 글쓰기 - 4장 도입부는 어떻게 구성하는가 - 일반 문서의 도입부 유형

[요약]
지출 승인을 요구하는 문서에서의 질문은 ""이 요구를 승인해야 하는가?""이다. 질문은 명시되지 않고 암시된다.
문제의 상황을 설명하고, 해결책을 설명하고, 재무 분석을 덧붙인 뒤 부가적인 효과를 언급한다.
문제를 정확하게 파악했다면 해결을 위한 대안은 없다.
대안은 완벽한 해결책을 찾지 못 했을 경우에 필요하다.

[발췌]
""문제 해결의 대안을 설명하는 것이 아니라 대안의 목적에 따라 피라미드 구조를 만든다""
도입부를 구성하는 원칙을 설명하고 있다. 도입부에서는 현재 문제를 해결할 해결책이 있는지 여부에 따라서 대안의 필요성을 결정한다. 또한 대안의 유무에 따라 글의 구성을 달라질 수밖에 없다.

[메모]
회사에서 비용을 청구하는 것은 쉽지 않은 일이다. 전략기획은 별도의 팀이 있기 때문에 내가 비용을 직접 청구하는 프로젝트들은 상대적으로 규모가 작고, 이미 필요성에 대해서 모두가 공감하는 상태에서 이루어진다.
이 글에서 나는 지출승인에 대한 공감대를 최초로 이끌어내는 단계의 경우 어떤 도입부를 이끌어내야 하는지에 대한 구체적인 예시를 알 수 있었다.
이미 모두가 지출에 대해 공감대를 형성한 건도 본 글과 같은 과정으로 글을 구성하면 보다 간결하게 의사소통을 할 수 있을 것이라고 생각한다."
2023-03-25 11:57:08,"이미정","# # [쏙쏙 들어오는 함수형 프로그래밍]130~139pg

[요약]

- reads to mutable data are actions, reads to immutable data are calculations
- writes make a given piece of data mutable, if there are no writes, it is immutable
- converting writes to reads makes more code calculations

immutable data structures are fast enough:

immutable data structures use more memory and slower to operate but immutable data structures are fast enough for common applications

- can optimize later
- garbage collectors are fast
- we’re not copying as much as you might think at first
- functional programing languages have fast implementations

shallow copies- duplicate top level data structure- objects inside will be shared

Object.assign() : copy all keys and values 

JavaScript’s Objects: keys are unique & strings, values can be any type

[발췌]

[메모]"
2023-03-25 18:49:29,"김효선","3/25 팩트풀니스

https://heady-dinghy-922.notion.site/2023-03-25-111-116p-04b60063698047d18b6db7080a75b593"
2023-03-25 21:43:55,"ㅈㅁㅁ","
제목: 인간 본성의 법칙 
참여자: 금정민 
회차: 11회차

[요약]
1. 선망에 휘둘리지 말고 현실을 살펴라
- 선망이란, 자신에게 없는 뛰어난 특질이나 업적, 재산 등을 다른 사람이 가질 때 상대가 그것들을 잃게 되기를 바라는 감정이다.
- 선망에 휘둘린다면, 부질없을 것을 찾아다니고 불필요한 변화를 모색하느라 많은 시간을 낭비하게 된다.
- 끊임없이 더 나은 것을 바라며 기다리기보다는 지금 가진 것을 최대한 활용해라
- 결국 반드시 추구해야할 것은 현실과 더 깊은 관계를 맺는 것이다.

2. 현실 감각이 무뎌지는 이유
- 사람이 자신의 행동과 결과 사이의 관계를 인식하지 못하면 현실 감각을 잃게 된다.
- 이런 일이 지속되면, 그 사람의 행동은 광기가 된다.
- 우리는 눈 앞에 닥친 것, 감각에 들어오는 것에만 사고의 범위를 한정한다면, 우리는 단순한 동물의 수준으로 전락한다.
- 유일한 대책은, 코 앞에 쏟아지는 사건들로부터 눈을 떼고 시선을 계속 더 멀리 보도록 스스로 훈련해야 한다.
- 어떤 조치를 취할 때는 거기서 비롯한 파장을 반드시 고려해야 한다.


[메모]
- 선망에 휘둘리지 말고 현실과 더 깊은 관계를 맺어라.
- 어떤 조치를 취할 때는 거기서 비롯한 파장을 반드시 고려해라.
"
2023-03-25 22:20:01,"강민규","여러분 즐거운 주말 보내고계신가요? 오늘 날씨가 너무 좋더라고요. 이런 날이면 뭔가 열심히 살기가 싫어집니다. 그럼에도 시간을 들여야만 더 나은 사람으로 거듭나는거겠죠.. 여러분도 화이팅입니다~"
2023-03-25 22:36:04,"Seo","3/25 토
https://lead-countess-db7.notion.site/DAY11-5638a65d573f4809aebd8ee7086623b2"
2023-03-26 00:03:01,"영동","삭제된 메시지입니다."
2023-03-26 00:05:23,"김형우","[금요일 분량]
https://engineer-diary.tistory.com/168"
2023-03-26 00:13:21,"영동","함수형코딩 130-139

변경 가능한 데이터를 읽는 것은 액션이다. 변경 가능하다는 것은 읽는 시점에 원하는 데이터가 아닐 수 있기 때문에 함수의 순수성을 해치고 함수의 동작을 예측 가능하기 어렵게 만든다.

불변 데이터를 읽는 것은 계산이다. 예측 가능하다.

불변 데이터 구조는 변경 가능한 데이터 구조보다 메모리를 더 많이 쓰고 느리다. 데이터를 복사해야 하고 구현이 복잡하고, 함수가 종료되면 가비지 컬렉터가 메모리를 회수해야하는 여러가지 단점이 있지만  예측 가능성과 안정성을 추구하는게 함수형 코딩이다.

얕은 복사는 중첩된 데이터 구조에 최상위 데이터만 복사하고 나머지 객체는 참조로 공유한다. 두개의 중첩된 데이터 구조가 어떤 참조를 공유한다면 구조적 공유라고 한다. 불변 데이터 구조라면 구조적 공유는 안전하다고 말하는데, 계산으로 만드는 복사, 변경, 반환 과정중 복사를 할 때 얕은 복사만으로도 함수형 코딩의 함수의 순수성, 예측 가능성을 만족한다. 모든 데이터 구조를 불변 데이터 구조로 만들어야 한다."
2023-03-26 01:07:05,"소재훈","3월 25일(토) 컴퓨터 네트워킹 하양식 접근 Day12 입니다!
제출자: 소재훈
https://geode-drizzle-777.notion.site/6-0316029c5c8646678722f8e5b0eacd30"
2023-03-26 06:27:04,"이현주","[금요일, 토요일 분량]
https://codefordance.tistory.com/18"
2023-03-26 10:02:30,"길인식","[토요일]
[데이터 중심 애플리케이션 설계]
[요약]
data outlives code: 코드와 달리 데이터는 명시적으로 기록하지 않는 한 그대로 남아있음
REST: 프로토콜이 아니라 HTTP의 원칙을 토대로 한 설계 철학, 
SOAP: 네트워크 API 요청을 위한 XML 기반 프로토콜,
RPC: 원격 네트워크 서비스 요청을 같은 프로세스 안에서 특정 프로그래밍 언어의 함수나 메서드를 호출하는 것과 동일하게 사용가능하게 함(위치 투명성)
-RESTful API는 RPC에 비해 실험과 디버깅에 적합하고 모든 주요 프로그래밍 언어와 플랫폼 지원, 사용가능한 다양한 도구 생태계 측면에서 장점
메시지 브로커 : 큐나 토픽으로 전성된 메시지를 전달, 버퍼처럼 동작
액터 모델 : 단일 프로세스 안에서 동시성을 위한 프로그래밍 모델
분산 액터 프레임워크 : 메시지 브로커와 액터 모델을 단일 프레임워크에 통합, 순회식 업그레이드 수행을 원하면 상하위 호환성에 주의, 아키, 올리언스, 얼랭 등

[발췌]
서비스 지향 및 마이크로 아키텍처의 핵심 설계 목표는 서비스를 배포와 변경에 독립적으로 만들어 애플리케이션 변경과 유지보수를 더 쉽게 할 수 있게 만드는 것이다. 135p

[메모]
순회식 업그레이드 서비스를 위해 이전버전과 호환이 중요하고 이를 설명하며 데이터 부호화 형식과 호환성 속성을 설명한다.
3장 스키마 이후로 어려운 개념이 많아 다시 읽어볼 것"
2023-03-26 13:24:09,"김현진","삭제된 메시지입니다."
2023-03-26 13:24:36,"김현진","토요일
데이터 중심 애플리케이션 설계

https://ongoingjin.notion.site/W02-6-134-147p-d478f34be9354e50820af90f44e55e56"
2023-03-26 13:29:15,"김채욱","[컴퓨터 네트워크 하향식 접근_3/24(금)+3/25(토)]
[내용 요약]
[CDN]
정의 : Content Delivery Network, 분산 시스템으로 유저에게 자원을 빠르게 전달하기 위해 설계되었습니다. 물리적으로 가까운 서버로 요청을 전달 라우팅하여서,웹 요청의 성능을 높입니다.

CPN과의 차이점 : Content Provider Network(네트워크 5 구조)

목적 : CDN은 다양한 물리적 위치에 분산된 서버 시스템인 반면에, CPN은 특정 기관 혹은 회사의 네트워크로 컨텐츠 생성과 분배를 맡습니다.

Ex) CDN : 미국 뉴욕 서버에 웹 사이트가 호스팅되어 있습니다. 아시아 유저가 자원을 요청하면, 뉴욕으로 패킷 요청이 가지않고, 중간에 아시아 서버로 라우팅되어서 자원을 할당합니다.

Ex) CPN : CNN이 컨텐츠를 만들어서 자사 웹페이지, 모바일 앱, 소셜미디어 채널 등에 분배합니다.

별도로 CPN의 network의 의미가 헷갈렸습니다. 여기서 의미하는 network는 직접적으로 네트워크를 의미한다기 보다는, 컨텐츠 제공자가 다양한 플랫폼과 연결된다는 의미가 더 강합니다. 그래서 주고 콘텐츠 제공자의 전체를 의미할 때 CPN단어를 사용하고, 평소에는 CDN을 더 많이 사용합니다.

철학 : 

Enter Deep : 접속 네트워크 근처에 위치함으로써, 유저와의 링크 및 라우터 수를 줄입니다. 반면에 서버 클러스터 유지 비용이 커집니다.

Bring Home : 핵심 지점에 대규모 클러스터를 구축합니다. 주로 IXP에 배치됩니다. 유지 비용은 줄어들지만, 자원 전달 지연시간과 처리율이 상대적으로 떨어집니다.

동작 6단계 방식 :

사용자가 NetCinema의 웹페이지를 방문합니다.

사용자가 http://video.netcinema.com/6Y7B23V 링크를 클릭하면, 사용자의 호스트는 video.netcinema.com에 대한 DNS query를 보냅니다.

사용자의 지역 DNS 서버(LDNS)는 호스트 이름의 ""video""문자열을 감지하고는, 해당 query를 NetCinema의 책임 DNS 서버로 전달합니다. NetCinema 책임 DNS 서버는 해당 DNS query를 KingCND으로 연결하기 위해 IP 주소 대신에 KingCDN의 호스트이름을 LDNS에게 알려줍니다.

이 시점부터 DNS query는 King CDN의 사설 DNS 구조로 들어가게 됩니다. 사용자의 LDNS는 a1105.kingcdn.com에 대한 두 번째 query를 보내고 이는 KingCDN의 DNA에 의해 KingCDN 콘텐츠 서버의 IP주소로 변환되어 LDNS에게 응답됩니다. 이때, 클라이언트가 콘텐츠를 전송받게 될 서버가 결정됩니다.

LDNS는 콘텐츠를 제공할 CDN 서버의 IP주소를 사용자 호스트에게 알려 줍니다.

클라이언트는 KingCDN 서버의 IP 주소를 얻고 나면, 해당 IP 주소를 직접 TCP 연결을 설정하고 비디오에 대한 HTTP Get 요청을 전송합니다. 만약 DASH가 사용된다면 서버는 먼저 서로 다른 버전의 비디오에 대한 URL 목록을 포함하는 manifest 파일을 클라이언트에게 전송하고 클라이언트는 동적으로 서로 다른 버전의 비디오 조각 단위 데이터를 선택할 수 있습니다. 

​

[CDN 정책]

정의 : 유저에게 가장 적절한 클러스터를 선택하기 위한 알고리즘 혹은 정책입니다.

평가 요소 : 네트워크 지연율, 서버 로드양, 물리적 지역성 등을 고려해 선택합니다.

종류 : 

Geographic Proximity : 물리적으로 가장 가까운 서버를 선택합니다. 다만 네트워크 경로에서 홉의 수에 따라 가장 가까운 클러스터가 아닐 수도 있습니다.

Latency-Based Routing : RTT에 따라 근접도를 비교합니다. 가장 낮은 RTT로 클러스터를 성택합니다. 다만 네트워크 환경에 따라 RTT가 변하기에, 성능의 차이 매순간 다릅니다.

​

[유튜브 비디오 스트리밍 사례]

설명 : 자체 CDN을 수백 가지의 IXP와 ISP에 연결하였고, 자체 데이터 센터에서 직접 동영상을 배포합니다. 사용하는 클러스터 정책으로는 Latency-Based Routing으로 RTT가 가장 적은 곳을 연결합니다. HTTP byte-range 헤더를 이용해, 재생위치 조정 및 조기 종료로 인한 대역폭과 서버 자원 낭비를 줄입니다.

HTTP byte-range : HTTP/1.1의 기능으로 클라이언트가 요청시, 특정 파일의 범위를 설정함으로써, 1개의 요청에 전체 파일을 다운로드하는 대신 일정 범위의 자원만 받습니다. 이는 실시간 스트리밍 서비스에서 유저가 빠르게 자원을 할당 받는데 유용합니다.

[소켓이란]

정의 : 물리적으로 연결된 네트워크상에서 데이터 송수신에 사용할 수 있는 소프트웨어적인 장치

​서버와 클라이언트 소켓 연결

[서버 소켓]

진행 순서 : 서버 소켓 생성 -> 주소를 bind -> listen -> accept

해설 : 서버는 언제 올 줄 모르는 client socket을 받기 위해 항상 listen상태에 있어야만 합니다. 이후 상대 소켓으로부터 연결 요청이 온다면 accept을 하고 나서, 메세지를 전달합니다.

[클라이언트 소켓]

진행순서 : 클라이언트 소켓 생성 -> connect

해설 : 소켓을 생성한 후에 서버 주소로 연결을 요청합니다

[연결지향형 소켓 (SOCK_STREAM)]

특징 :

중간에 데이터가 소멸되지 않고 목적지로 전송

전송 순서대로 데이터가 수신

전송되는 데이터의 경계가 존재하지 않는다

데이터의 경계란 : 전송된 데이터의 수신 상태를 의미합니다.

**TCP연결에서는 데이터가 개별적으로 읽어지는 것이 아닌, 송신된 데이터가 수신하는 소켓의 버퍼에 모두 담긴 후에 읽히는 것이기에, 데이터간의 경계가 존재하지 않는다

**UDP 연결에서는 데이터가 순서가 보장되지 않은 상태로 전송이 됩니다. 이는 각 데이터간의 경계가 존재합니다.

​

[비연결지향형 소켓(SOCK_DGRAM)]

특징 :

전송된 순서에 상관없이 빠른 전송을 지향

전송된 데이터의 손실 우려 존재

전송되는 데이터의 경계가 존재

한번에 전송할 수 있는 데이터의 크기가 제한


물제 풀이

2-1 

1) List five nonproprietary Internet applications and the application-layer protocols that they

use.

​

웹 => http, 파일 교환 => ftp, 원격 로그인 => 텔넷, 이메일 => smtp, 파일공유 => 토렌토

​

2) What is the difference between network architecture and application architecture?

​

네트워크 구조는 5계층 소통 처리 구조이고, 애플리케이션 구조는 앱 개발자에 의해 만들어진다

ex) client-server, p2p

​

3) For a communication session between a pair of processes, which process is the client and

which is the server?

​

커뮤니케이션 세션에서 시작하는 것이 클라이언트이고, 서버는 연결을 기다린다

​

4) For a P2P file-sharing application, do you agree with the statement, “There is no notion of

client and server sides of a communication session”? Why or why not?

​

아니요, P2P 애플리케이션에서 노드는 client이자 서버이다

​

5) What information is used by a process running on one host to identify a process running on

another host?

​

호스트 식별을 위해 ip 주소와 포트 번호가 필요하다

​

6) Suppose you wanted to do a transaction from a remote client to a server as fast as"
2023-03-26 15:10:10,"오홍근","[쏙쏙 들어오는 함수형 코딩][오홍근][day11-12]
116-139p
<요약>
- 읽기란 값을 리턴하는 것을 말한다.
- 가변 데이터를 읽은 것은 액션, 불변 데이터를 읽은 것은 계산.
- 불변 데이터 구조를 사용하고 문제가 생기면 그 때 최적화하라."
2023-03-26 17:23:26,"정소영","Day 11 토 (125-129)
넛지 파이널 에디션

사람들의 자의식에 맞서기보다, 그것과 손잡고 협력하는 것이 선택설계자들에게 주어진 과제이다. 

•당신이 하길 사람들이 바라는 것
자의식 : 국적, 문화, 지역, 민족성 또는 좋아하는 스포츠 팀과 관련이 있을 수 있음 > 정체성에 기반한 인지

정체성에 기반한 인지 성공적인 예) 텍사스, 쓰레기 버리기 근절 표어
- 초기 캠페인 : 쓰레기를 버리지말라 설득 > 18-24세 남자 대상으로는 엘리트집단의 명령으로 여겨 거부감. 실패
- 이후 캠페인 : 스포츠 선수의 등장. ‘Don't mess with Texas' 창의적인 넛지. 성공

> 약간 우리나라로 생각해보면 양심냉장고...

• 다원적 무지 
사회적 쟁점에 대한 소수 의션을 다수 의견으로 혹은 다수 의견을 소수의견으로 잘못 인지하는 현상 
- 관행이나 전통을 좋아하는 이유는 그것을 좋아해서가 아니라, “다른 사람들이 대부분 그것을 좋아한다고 생각하기 때문”
- 사회의 큰 변화가 생길때, 체제가 바뀔 때 “자기 이외의 사람들이 무슨 생각을 하는지 알게 되면서 사람들은 자기가 믿는 것을 용기내서 말하고 그에 따라 행동”

- 오랜 관행을 거부하는 극적인 변화는 폭포/편승 효과를 촉발하는 넛지에서 시작
- 예) 사우디아라비라의 후견인 제도 (개인적 설문방식에서는 다수가 여성의 노동참여를 찬성 / 동시에 사회규범에 대해서는 오해중-다른 사람들은 그렇게 생각하지 않을 것이라는.)

[메모]
사람들에게 사회규범을 알려주는 것만으로도 매우 커다란 효과. 어떤 좋은 결과/이행하지 않았을 때의 위협/도움제공 보다, 대부분 ~~이렇게 하고 있다는 말 한마디가 행동을 장려하고 억제할 수 있다. "
2023-03-26 20:30:52,"이강욱","https://velog.io/@rivolt0421/Grokking-Simplicity-12"
2023-03-26 22:06:49,"강민규","여러분 일요일도 벌써 다 지나갔군요. 이번 주말 알차게 보내셨나요? 토요일 분량 아직 안하신 분들은 오늘 마무리지어봅시다! 3주차는 3주차의 것으로 시작할 수 있도록..! 응원합니다~"
2023-03-26 22:07:19,"강민규","@최창훈 창훈님은 제가 금요일 분량도 함께 해주시면 감사하겠습니다!"
2023-03-26 22:17:05,"최창훈","컴퓨터 네트워킹 하향식 접근(금, 토)

Chatper2
https://cautious-ocarina-cca.notion.site/Chapter2-c6f6be28c027499087f155f5223a1918

Chapter3
https://cautious-ocarina-cca.notion.site/Chapter3-97d035d913c5411c87b1db4660f3130e"
2023-03-27 07:58:03,"강민규","사진"
2023-03-27 07:59:19,"강민규","좋은 아침입니다! 날씨가 다시 좀 추워질려고 하는데 몸 관리를 잘해야할 것 같습니다. 오늘도 화이팅~"
2023-03-27 09:28:16,"Seo","삭제된 메시지입니다."
2023-03-27 09:28:33,"Seo","3/27 월
https://lead-countess-db7.notion.site/DAY12-95955d066eca4b16adb319aa0bc2341d"
2023-03-27 10:46:30,"영동","함수형 코딩 140-150

중첩된 모든 데이터가 변하지 않아야 불변형 데이터라고 할 수 있다. 얕은 복사의 경우 데이터의 최상단만 복사하고 각 데이터의 참조는 기존 데이터와 동일하다. 내부 데이터를 변경하고자 할때는 내부 데이터까지 복사해서 사용해야한다. 

기존 코드에서 사용하는 데이터를 불변형 데이터로 바꾸기 위해서는 방어적 복사를 사용한다. 

깊은 복사를 사용해서 불변형 데이터를 만들고, 계산 함수로 보낸다. 이후 나온 결과를 깊은 복사하여 기존 데이터에 덮어 씌운다"
2023-03-27 12:59:51,"ㅈㅁㅁ","
제목: 인간 본성의 법칙 
참여자: 금정민 
회차: 12회차

1. 장기적 관점에서 우선순위를 정하자
-  우리는 한 걸음 떨어져야, 사태를 더 정확히 볼 수 있게 된다.
- 당면한 문제의 성격을 고민할 때, 손쉬운 설명에 만족하지 말고 더 깊이 파고들며 다른 가능성을 고민해라.
- 현재로부터 거리를 두고, 문제의 근원을 더 깊이 들여보고, 상황을 전체 맥락으로 더 넓게 바라보고, 미래를 더 길게 내다봐라.

2. 장기적 관점으로 생각할 때 하면 안되는 4가지 행동
- 당장 벌어진 어떤 일에 깜짝 놀라  문제의 뿌리나 맥락, 이후의 결과를 깊이 생각치 않고 해결책을 덥석 받아들이지 마라.
- 싸움에 많은 투자를 했더라도, 계속 쳇바퀴돌듯 싸움이 반복된다면 당신의 에너지와 정신 건강을 위해 떠나버리는 편이 낫다.
- 순간적 열기에 휘돌려 행동하지마라.(결정에 시간을 둬라)
- 사건을 더 많이 통제하고 싶다면, 사소한 세부사항을 모두 다 알려 무리하지 마라

3. 시간과의 관계를 넓히고 속도를 늦춰라
- 내가 경험하는 이 문제가 1년이 지나면 그렇게 중요치 않은 문제라는 걸 알고 있다면, 불안을 누그러뜨리고 우선순위를 조정할 수 있게 된다.
- 현재 일어나는 일에 과잉 반응을 할 수 있지만, 당신은 거기에 저항하고 더 먼 미래를 봐야 한다.
- 미래와 관련하여 장기적 목표를 깊이 생각해라. 장기적 목표는 막연한 꿈이 아니라, 구체적 대상이다."
2023-03-27 17:35:39,"이미정","# # [쏙쏙 들어오는 함수형 프로그래밍]140~150pg

[요약]

Nested writes? Do another copy-on-write operation to modify nested one

- The entire nested data structure has to remain unchanged for it to be immutable

- everything in the nested data structure from top to the bottom must be immutable

Structural sharing: two nested structures referencing the same inner data structure

Chapter 7. Defensive copying

- Make defensive copies to protect your code from legacy code and other code you don’t trust
- Compare deep copies to shallow copies
- Choose when to use defensive copies versus copy-on-write

Need a discipline with more protective power that will completely shield our data from modification: defensive copying

How?

Make copies

- Deep copy and throw away the mutable original
- Make copies as data enters & make copies as data leaves"
2023-03-27 21:40:25,"김효선","3/27 팩트풀니스

https://heady-dinghy-922.notion.site/2023-03-27-117-120p-2c485cbc7d6b4fbbb40004f4d565c089"
2023-03-27 21:49:24,"강민규","안녕하세요 여러분 오늘 좋은 하루 보내셨나요? 날씨도 좋고 꽃도 피고 정말 봄이네요! 이런 날엔 집에서 책만보기엔 아까우니 내일은 책도 보고 꽃도 보러 가보세요! 화이팅입니다~"
2023-03-27 21:49:57,"영동","하루 쉬게 해주는줄 알았습니다"
2023-03-27 21:50:23,"정소영","이모티콘"
2023-03-27 21:50:45,"정소영","너무 좋아요 감시합니다"
2023-03-27 21:50:52,"정소영","*감사합니다.."
2023-03-27 21:56:07,"강민규","책 안보기에도 안까운 날이잖아요 ㅎㅎ"
2023-03-27 22:00:55,"김형우","[토요일 분량]
https://engineer-diary.tistory.com/169"
2023-03-27 23:49:19,"김채욱","[컴퓨터네트워킹하향식접근_3/27(월)]
내용 요약
[논리적 통신]

정의 : 2개의 프로세스 간의 끝과끝 점의 연결 상태를 의미합니다.

추가 설명 : 데이터는 여러 물리적 장치를 지나가지만, 각 애플리케이션 입장에서는 연결된 상태를 나타냅니다.하위 계층 위에  추상화를 주어서, 하나의 인터페이스로 소통을 가능케 합니다.

​

[트랜스포트 계층과 네트워크 계층의 차이점]

차이점 : 

목적 :트랜스포트는 '종단간의 호스트의 애플리케이션' 간의 연결을 책임집니다. 반면, 네트워크 계층은 '종단간의 호스트'의 연결을 책임집니다. 

프로토콜 : 트랜스포트는 TCP/UDP를 사용하고, 네트워크는 IP(IPv4,IPv6)를 사용합니다.

데이터 유닛 : 트랜스포트는 세그먼트라 칭하고, 네트워크는 패킷이라고 칭합니다.

​

[트랜스포트 계층이란]

정의 : 2개의 종단간의 프로세스의 연결을 책임지는 계층입니다. 

추가 설명 : TCP의 대표적인 기능으로는 데이터를 무결성을과 혼잡제어, 에러 검출 기능을 제공합니다. 반면 UDP는 다중화와 역다중화의 기능만 제공합니다.

다중화  : 다수의 애플리케이션 프로세스에서 온 데이터를 하나의 호스트가 수용하는 방법입니다.

데이터 구조 : 총 32비트로, 출발지 포트 번호, 목적지 포트 번호, 기타 헤더 필드들, 애플리케이션 데이터로 구성되어 있습니다. 2개의 포트로 여러 소스의 데이터를 구별할 수 있습니다

포트 : 0 ~ 65535(16비트)를 사용 가능하고, 0 ~ 1023은 well known 포트 번호입니다.

역다중화 : 다중화의 역순으로 진행됩니다. 상위 애플리케이션 계층의 패킷에 헤더를 붙인 후, 전송시켜야하는 상대 호스트로 데이터를 전송합니다."
2023-03-28 00:16:31,"강민규","다들 많이 지치셨나요, 그럴 수 있습니다. 제가 항상 응원하고 있겠습니다!"
2023-03-28 00:16:50,"강민규","@박예린 예린님은 오늘 이틀 분량 잊지말고 제출해주세요~ 화이팅"
2023-03-28 00:59:17,"길인식","[월요일]
[데이터 중심 애플리케이션 설계]
    [요약]
    노드 간 변경 복제 방법 : 단일리더, 다중리더, 리더 없는 복제
    리더 기반 복제 : 리더(primary)에게 쓰기 요청 → 기록 후 팔로워(read replica, hot stanby)에 변경을 복제 로그나 스트림으로 전송
    동기, 비동기 : 보통 팔로워 하나는 동기식으로 하고 그 밖에는 비동기식
    새로운 팔로워 설정 : 스냅숏 가져오기 → 미처리분 가져오기
    팔로워 장애(따라잡기 복구) : 로그 결함 발생전 마지막 트랜잭션 알아내기 → 최신분 가져오기
    리더 장애(장애 복구) : 리더가 장애인지 판단 → 새로운 리더 선택 → 시스템 재설정(쓰기요청 변경 등)
    복제 로그 구현 : 간단한 사례는 리더가 쓰기 구현 후 구문 로그 전송 → now()나 rand() 등은 동기화 힘듬 → 이런 부분은 로우 기반 복제 (이외에 트리거 기반 복제도 존재)
    
    [발췌]
    저장소와 데이터 검색에 여러 장비가 관여한다면 무슨 일이 일어날까? 확장성, 내결함성/고가용성, 지연시간 147p
    
    [메모]
    반동기식을 이용하면 속도와 정확성을 최대한 잡을 수 있다."
2023-03-28 03:25:24,"박예린","삭제된 메시지입니다."
2023-03-28 03:38:02,"박예린","쏙쏙 들어오는 함수형 코딩 130~150p (토, 월 분량)

요약

변경 가능한 데이터를 읽는 것은 액션이다
쓰기는 데이터를 변경 가능한 구조로 만든다
어떤 데이터에 쓰기가 없다면 그것은 변경 불가능한 데이터이다
불변 데이터를 읽는 것은 계산이다
쓰기를 읽기로 바꾸면 코드에 계산이 많아진다

Q. 불변 데이터 구조가 가변 데이터 구조보다 메모리도 많이 잡아먹고 느리지 않나?
A. 일반적으로 그렇지만, 그래도 충분히 빠르게 사용할 수 있다.
 - 불변 데이터 구조때문에 느려지는 부분이 발견되면, 그때 최적화하자 
- 가비지 콜렉터가 충분히 빠르다
- 얕은 복사, 구조적 공유를 잘 활용한다
- 어떤 함수형 프로그래밍 언어는, 최적화된 불변 데이터 구조를 지원한다 (ex. 클로저)

카피-온-라이트를 통해 데이터를 불변형으로 유지할 수 있다
1) 복사하기
2) 변경하기
3) 리턴하기

보일러 플레이트 코드를 줄이기 위해, 기본적인 배열과 객체에 대한 카피온라이트 버전을 만들어 두는 것이 좋다

불변성이 지켜지지 않을 가능성이 있는 레거시 코드를 사용해야 하는 경우, '방어적 복사'를 통해서 카피온라이트 원칙을 지키면서 함수를 안전하게 사용할 수 있다"
2023-03-28 07:53:41,"강민규","사진"
2023-03-28 07:54:06,"강민규","여러분 좋은 아침입니다"
2023-03-28 07:54:58,"강민규","오늘도 일도 자기계발도 최선을 다해봐요"
2023-03-28 09:48:49,"강민규","여러분 혹시 완독자 커뮤니티에 기대하고있는 바가 있으신가요? 여러분의 목소리를 적극 반영하여 만들어가고싶습니다"
2023-03-28 12:17:11,"ㅈㅁㅁ","이모티콘"
2023-03-28 12:22:52,"영동","지금은 커뮤니티가 어떤가요?!?!"
2023-03-28 12:32:17,"ㅈㅁㅁ","
제목: 인간 본성의 법칙 
참여자: 금정민 
회차: 13회차

### 사람은 방어막을 가지고 있다.
- 우리는 자신이 독립적이고 자신의 뜻에 따라 결정하며 살고 싶어한다.
- 상대의 설득과 시도에 굴복한다는 건, 독자적 행동력을 훼손당한다고 느낀다.
- 상대의 저항을 누그러뜨리기 위해, 상대가 고귀하고 이타적인 사람인 것처럼 만들어야 한다.

### 집단에서 영향력을 키우는 방법
- 말을 줄이고, 상대가 더 말을 하게해라
- 대신 상대가 말을 하는 동안 상대에게 집중해라
- 언제나 한 걸음 물러서서 상대보다 열등한 위치에 서라
- 항상 상대의 조언을 구해라
- 대화의 진짜 목적은, 남들의 재기(역량이나 능력 따위를 모아서 다시 일어섬)를 끌어내는 것이지, 
당신의 재기를 많이 보여주는 것이 아니다."
2023-03-28 12:39:39,"강민규","지금 상태는 비밀입니다. 아직 1기밖에 없어서 딱히 활성화는 안되어있어요. 이번 주에 1.5기 끝나고 유입되면 어떻게 좀 잘할 수 없을까 고민중입니다"
2023-03-28 13:15:37,"영동","저자 초청 강연 열어주세요"
2023-03-28 13:16:55,"김연정","좋은 아이디어네요~!"
2023-03-28 13:16:58,"강민규","굳아이디어입니다. 오늘부터 콜드메일 50통씩 보내보겠습니다"
2023-03-28 13:17:12,"강민규","특히 만나보고싶으신 분계신가요?"
2023-03-28 13:17:16,"정소영","너무 좋습니다.."
2023-03-28 13:17:17,"강민규","켄트백?"
2023-03-28 13:18:56,"영동","투자 책 읽고 다같이 돈공부 해서 투자해보기"
2023-03-28 13:19:48,"강민규","ㅋㅋㅋㅋ 좋습니다 시드머니 후원해주실 분 찾아보겠습니다"
2023-03-28 13:20:19,"영동","다른 분야에 계신분들 많으니까 "
2023-03-28 13:20:26,"영동","해당 직군 맛보기 클래스 열어주세요"
2023-03-28 13:21:58,"영동","강민규님의 코딩 맛보기 "
2023-03-28 13:22:19,"강민규","아이디어 뱅크시군요. 선호도 조사 후 최고 인기 아이디어에 대해 적극 추진 해보겠습니다"
2023-03-28 13:22:40,"영동","???님의 내가 생각하는 구린 디자인은 무엇인가"
2023-03-28 13:23:01,"영동","취미 소개해주기도 좋아요"
2023-03-28 13:23:55,"정소영"," 책읽기 좋은 공간들 싹 아카이빙 "
2023-03-28 13:26:57,"영동","책너두 클래스 101"
2023-03-28 13:39:34,"김연정","쓸데없지만 재밌는 개발 대회..."
2023-03-28 13:52:56,"강민규","쓸데 없지만 재밌는걸 개발해보는 해커톤같은거군요! 흥미롭네요"
2023-03-28 14:24:15,"ㅈㅁㅁ","오 재밌겠는데요?!"
2023-03-28 17:51:26,"김효선","3/28 팩트풀니스

https://heady-dinghy-922.notion.site/2023-03-28-121-128p-0d5d08b89a374575b3bf88a79cbf1a42"
2023-03-28 19:59:00,"이미정","# # [쏙쏙 들어오는 함수형 프로그래밍]151~161pg

[요약]

Using defensive copies to protect data and maintain immutability

- copy as data leaves your code
    - make a deep copy of the immutable data
    - pass the copy to the untrusted code
- copy as data enters your code
    - immediately make a deep copy of the mutable data passed to your code
    - use the copy in your code

Deep Copy: duplicate all levels of nested data structures, from the top all the way to the bottom

Most we-based APIs are doing implicit defensive copying

- Web request comes into your API as JSON - JSON is a deep copy of data from the client that is serialized over the internet.
- Your service does its work & send the response back as a serialized deep copy, also in JSON, it’s copying data on the way in and on the way back

Copy-on-write vs defensive copying:

- Defensive copying: makes deep copies & more expensive

How to deep copy in JS?

- Ladash: .cloneDeep()

[발췌]

Most we-based APIs are doing implicit defensive copying

- Web request comes into your API as JSON - JSON is a deep copy of data from the client that is serialized over the internet.
- Your service does its work & send the response back as a serialized deep copy, also in JSON, it’s copying data on the way in and on the way back"
2023-03-28 21:26:00,"박예린","쏙쏙 들어오는 함수형 프로그래밍 151~161p

<요약>

- 방어적 복사는 신뢰할 수 없는 코드와 데이터를 주고받아야 할 때, 안전지대의 경계에서 씀
- 깊은 복사를 통해 복사함 (비용이 많이 든다)
- 규칙
    
    1) 안전지대로 들어오는 데이터의 깊은 복사본을 만듦
    
    2) 안전지대에서 나가는 데이터의 깊은 복사본을 만듦 
    

- 웹 API를 통해 JSON 데이터를 주고받는 것은 방어적 복사의 예시라고 할 수 있음. 이 때 JSON 데이터는 깊은 복사본임
- 모듈이 서로 통신하기 위해 방어적 복사를 구현했다면, 이를 비공유 아키텍처 (shared nothing architecture) 라고 함.
- 자바스크립트에서 깊은 복사를 구현하기 쉽지 않으므로, Lodash 라이브러리를 사용하는 것을 추천함. → .cloneDeep()

<발췌>

카피-온-라이트와 방어적 복사 모두 불변성을 유지하기 위해 사용합니다. 어떻게 보면 하나만 있어도 될 것 같습니다. 사실 안전지대에서도 방어적 복사로 불변성을 유지할 수 있습니다. 

하지만 방어적 복사는 깊은 복사를 합니다. 깊은 복사는 위에서 아래로 모든 계층의 중첩된 데이터를 복사하기 때문에 얕은 복사보다 더 많은 비용이 듭니다. 안전지대에서는 데이터를 전달할 때 많은 복사를 하지 않아도 됩니다. 많은 복사본 때문에 연산과 메모리를 낭비하는 것을 막으려면 가능한 안전지대에서는 카피-온-라이트를 사용하는 것이 좋습니다. 그래서 두 원칙은 함께 사용해야 합니다. (157p)

<메모>

자바스크립트의 새로운 깊은 복사 메서드 : structedClone()

- lodash 대신 사용할 수 있는 내장 메서드
- JSON.stringfy보다 빠르고, 제한 사항이 적음
- 제한 사항 (다음 객체에 대해서는 정상적으로 작동하지 않음)
    - Function 객체
    - DOM node
    - 특정 객체들의 프로퍼티들: RegExp 객체의 lastIndex필드, Property descriptors, setters, getters, 프로토타입 체인

참고 : https://developer.mozilla.org/en-US/docs/Web/API/structuredClone"
2023-03-28 22:33:21,"김채욱","[컴퓨터네트워킹하향식접근_(3/28(화))]
[내용요약]


[비연결형 트랜스포트 : UDP]

정의 : 다중화/역다중화 기능과 간단한 오류 검사 기능만 제공되는 트랜스포트 프로토콜입니다.

장점 :

빠른 패키징 : 약간의 손실을 감안하더라도 세그먼트 전송의 지연을 최소화 합니다

연결 설정이 없다 : 세방향 핸드세이크가 없어 예비동작 없이 동작이 가능하다

연결상태가 없다

작은 패킷 헤더 오버헤드

구조 :

총 32 비트, 2바이트의 4개 필드가 존재(출발지 포트, 목적지 포트, 길이, 체크섬), 그외 애플리케이션 데이터

체크섬 :

체크섬의 3개의 워드의 합이 전부 1비트이면 정상입니다.

종단간 오류 검사가 가능하지만, 오류 회복 기능은 없습니다.


[신뢰적인 데이터 전달 프로토콜의 구축]

rdt1.0 : reliable data transfer, 완전 신뢰적인 채널을 가정한 데이터 전송의 기본 규칙을 나타냅니다. 모든 송수신이 신뢰적이기에 피드백이 필요없습니다.

rdt2.0 : 전송 중 패킷에 오류가 있을시 긍정 응답과 부정 응답을 통해 패킷 재전송을 요구합니다. 이로 통해 오류 검출 기능인 체크섭 필드를 사용하고, 수신자 피드백 및 재전송을 합니다. 전송 후 대기 프로토콜입니다.

rdt2.1 : 응답 패킷의 분실을 고려해 개선된 버전입니다. 응답 패킷의 손실 혹은 분실시 패킷 재전송을 하는데, 중복 데이터 전송이 될 수 있기에, 일련번호를 붙입니다. 각 데이터 패킷에 고유 순서 번호를 첨부합니다. 수신자는 일련번호로 데이터 패킷의 순서를 파악할 수 있습니다.

rdt3.0 : rdt2.1의 짧은 주기의 타임아수으로 생길수 있는 불필요한 패킷 재전송을 해결합니다. 흐름 제어 를 통해 패킷 사이의 RTT를 통해 재전송 주기 타이밍을 변화합니다.
"
2023-03-28 23:00:33,"강민규","여러분 오늘 하루 어떠셨나요? 저는 오늘 여러분들과 대화를 나눌 수 있어 매우 기뻤습니다. 오늘도 다 함께 힘내서 책을 읽어봅시다!"
2023-03-28 23:03:44,"강민규","오늘은 하루 밀리신 분들이 꽤나 많군요! 한번 밀리기 시작하면 지옥이니 꼭 밀리지 않게 해봅시다!

@김민수 @김현진 @김형우 @소재훈 @오홍근 @이강욱 @이현주 @최창훈 @정소영 "
2023-03-28 23:04:06,"강민규","봄이라 그런걸까요..?"
2023-03-29 00:18:54,"길인식","[화요일][데이터 중심 데이터베이스 설계]
[요약]
최종적 일관성 : 비동기 팔로워에서 데이터베이스에 쓰기를 멈추고 잠시 기다리면 리더와 데이터가 같아짐
쓰기 후 읽기 일관성 : 사용자가 수정한 내용을 읽을 때는 리더에서 읽어 해결
단조읽기 : 읽었던 데이터가 다른 팔로워에서 읽어 못불러옴 → 항상 동일한 팔로워
일관된 순서로 읽기 : 다른 팔로워에 대답이 질문보다 먼저 저장 → 서로 인과성있는 쓰기를 동일한 팔로워
다중 데이터 센터에서의 다중 리더 설정 ⇒ 성능 향상, 데이터센터 중단 내성 향상, 네트워크 문제 내성 향상, 쓰기 충돌 해결 필요

[발췌]
복제 지연을 위한 해결책
사실은 복제가 비동기식으로 동작하지만 동기식으로 동작하는 척 하는 것이 문제 해결 방안이다 … 애플리케이션 개발자가 이런 미묘한 복제 문제를 걱정하지 않고 ‘올바른 작업 수행’을 위해 항상 데이터베이스를 신뢰할 수 있다면 훨씬 좋다. 이것이 트랜젝션이 있는 이유다. 169p

[메모]
단일 데이터센터에서 다중 리더 설정하는 것은 이점이 적지만 다중 센터에서는 오히려 좋음"
2023-03-29 00:19:47,"소재훈","3월 28,29일(월,화) 컴퓨터 네트워킹 하양식 접근 Day13,14 입니다!
제출자: 소재훈
1. 전송 계층 서비스 및 개요
https://geode-drizzle-777.notion.site/1-a48f54508eed4ff085914de01473f37d

2. 다중화와 역다중화
https://geode-drizzle-777.notion.site/2-c79ddf410232468db2e3b6e341f56373

3. 비연결성 전송 프로토콜(UDP)
https://geode-drizzle-777.notion.site/3-UDP-ec12bf1173df4984bad813e68fcace95
"
2023-03-29 00:39:15,"이현주","많은 격려와 자세한 설명으로 의지를 북돋아주셨지만 제가 시간이 여의치 않아 책너두를 완주하기 어려울 것 같습니다.ㅠㅠ 애써주신 민규님과 톡방의 많은 분들 정말 감사하고 죄송해요! 끝까지 완주해서 알찬 봄 완성하시길 바랍니다😃 저는 이만 나갈게요~"
2023-03-29 00:39:29,"이현주","이현주님이 나갔습니다."
2023-03-29 00:43:56,"영동","함수형코딩
151-161

방어적 복사 규칙
들어오고 나갈때 딥카피

api는 json으로 통신하는데 json은 딥카피다. (방어적복사=비공유아키텍처)

통제할 수 있는 데이터를 바꿀 때 카피온 라이트 (얕은 복사)
신뢰 할 수 없는 코드와 데이터를 주고 받아야 할 때 (깊은 복사)

js에서 로데쉬 라이브러리를 써서 딥카피를 적용하자"
2023-03-29 01:01:22,"오홍근","[쏙쏙 들어오는 함수형 코딩][오홍근][day13-14]
140-161p
<요약>
- 카피-온-라이트는 값을 변경하기 전에 얕은 복사를 한다. 그리고 리턴한다. 이 방식으로 불변성을 구현한다.
- 방어적 복사 : 신뢰할 수 없는 코드와 불변성 코드 사이에 데이터의 변경을 막아주는 것.
- 방어적 복사 규칙
  1. 데이터가 안전한 코드에서 나갈 때 복사
  2. 안전한 코드로 데이터가 들어올 때 복사
- 데이터의 여러 복사본 중에 어느 것이 진짜냐?
  함수형 프로그래밍에서는 어떤 데이터를 유일한 객체로 표현하지 않는다.
  데이터는 이벤트에 대한 사실. 사실은 필요할 때마다 여러번 복사될 수 있다. "
2023-03-29 01:16:54,"정소영","월 (130-140)
넛지 파이널 에디션 

강력한 넛지로 작용하는 ‘새로운 사회적 규범’
- 사람들에게 사회규범을 알려주는 것만으로도 매우 커다란 효과가 나타남. (다른 사람의 생각과 행동을 알려주는 것과 함께)

예) 세금 납부 유도 : 사회적으로 유익 / 처벌 정보로 위협 / 어려움에 도움을 주는 정보제공 / 90% 이상이 잘 이행하고 있다는 말

- 누구의 규범을 따르게 할 것인가?
사회적 유명인 X, 자신과 비슷한 조건, 환경에 놓인 사람들의 규범을 잘 따름
> 구체적으로 특정해줄 경우 더 효과가 강화됨
> 동류 집단 규범 

사회적 규범-정보폭포현상-평판 폭포 현상을 모두 목격한 사례 
- 미국과 많은 나라의 동성 결혼 합법화
- 전세계적으로 빠르게 전개. 어떻게 그게 가능했을까. 
1. 사람들의 커밍아웃. 밝힐 때마다의 넛지
2. 사회적 영향. 메시지의 양을 늘리고 새로운 규범이 그 전의 처벌 대상을 보상하고 나섬"
2023-03-29 01:37:28,"정소영","화 (141-151)
넛지 파이널 에디션

4장 <넛지가 필요한 순간>
사람들은 터무니없는 실수를 자주 함.
도움이 될 가능성이 가장 높으며, 해를 끼칠 가능성이 가장 낮은 넛지를 제공하자. “자유지상주의적 간섭주의의 황금률이 필요.”

최상의 선택을 설계하는 법, 꼭 알아야 하는 것은?
•멍때리기 : 깜빡 잘 잊는다는 사실 
- 사람들은 명확한 실행 의도를 가지고 있을 때 목표를 달성할 가능성이 높아짐 
예) 투표 독려 : 투표할건지/말건지 -> 언제할건지 어디에 있다가 할건지 
- 점검 목록표는 수직적인 관계에서도 놓친 부분에 대해 지적을 할 수 있다. 지적할 권한을 설계 하는 것.

•이익은 지금, 비용은 나중에
- 선택과 결과의 시간 간격이 길때 많이 자제력에 관련된 쟁점이 제기됨 

• 난이도, 빈도
걸려 있는 이익이나 손해가 클수록 연습 기회는(선택 할 수 있는 기회) 적게 주어진다. 어려운 선택은 넛지를 적용할 좋은 후보.

•피드백 
- 선택한 것들에 대해서만 피드백을 받는다. 예) 길을 돌아가는 사람은 짧은 길이 있음을 결코 알지 못한다.

•자신이 좋아하는 것을 안다는 것
- 생소한 것을 놓고 선호를 예측해야 할때는?
- 다른 누군가에게 대신 선택하게 하는 것이 현명한 방법, 선택지를 간소하게 할 것 예) 오마카세. 노후 대비 펀드

[메모,]
대부분 인간적인 약점을 피하도록 사람들을 돕는 것보다 그 약점에 영합할 때 더 많은 돈을 벌 수 있다는 것..
"
2023-03-29 02:04:41,"김형우","[월요일 분량]
https://engineer-diary.tistory.com/170"
2023-03-29 02:46:08,"이강욱","https://velog.io/@rivolt0421/Grokking-Simplicity-1314"
2023-03-29 02:59:35,"최창훈","컴퓨터네트워킹 하향식 접근 [월,화]

https://cautious-ocarina-cca.notion.site/Chapter3-97d035d913c5411c87b1db4660f3130e"
2023-03-29 05:50:02,"김현진","데이터 중심 에플리케이션 설계

월요일
https://ongoingjin.notion.site/W03-1-148-162p-8731f22678c846babc27d1e636c8c95a

화요일
https://ongoingjin.notion.site/W03-2-163-172p-22f19dc8377e44d5b129cfcd0168a050"
2023-03-29 08:10:04,"김민수","[월요일] 바바라 민토 논리의 기술
1부 논리적으로 글쓰기 - 4장 도입부는 어떻게 구성하는가 - 컨설팅 문서의 도입부 유형

[요약]
컨설팅 문서는 조치를 유도하며 길이가 길다. 
1. 제안서 
제안서를 발주하는 입장은 문제가 있고 해결을 위한 적임자를 영입하고자 하는 것이다.
따라서 제안서의 답변은 4가지 유형으로 구성된다.
- 우리는 문제를 이해하고 있다.
- 우리는 문제 해결에 적합한 접근법을 가지고 있다.
- 우리는 이 접근법을 적용해본 충분한 경험이 있다.
- 우리의 가격 조건은 납득할 만하다.
2. 진행상황 보고서
진행상황 보고서는 현재 진행된 작업과 결과를 보고하게 된다.
그리고 고객의 컨펌 혹은 추가요청을 유도하게 된다.

[발췌]
""좋은 도입부는 단순히 독자의 관심을 불러일으키고 집중하도록 유도하는 것뿐 아니라 독자가 상황을 인식하는 데 영향을 미친다""
많은 지면과 예시를 통하여 위 내용을 거듭 강조하고 설득하는 과정이었다.

[메모]
실무에서는 제안서의 양식이 고정되어있고 RFP 등이 명확하기 때문에 칸을 채우기 바쁜 것 같다.
하지만 글에서 주장하는 것처럼 글을 쓰기 전에 충분한 시간을 들인다면 더 좋은 글을 쓸 수 있을 것이다."
2023-03-29 08:28:35,"강민규","사진"
2023-03-29 08:29:02,"강민규","여러분 모두 잘 주무셨나요. 오늘 출근길도 아주 북적북적하군요... 오늘도 좋은 하루 보내시길 바래요! 화이팅입니다"
2023-03-29 12:53:50,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
회차: 14회차

### 상대의 방어막을 해제하는 법
- 인정받는 기분을 느끼게 해줘야 한다.
- 상대에게 내적 안정감을 주입해라
- 상대를 좋아하고 존경한다는 사실을 보여줘라

### 상대의 마음을 사로잡은 5가지 전략
1. 심취해 듣는 사람이 되라
: 상대를 미지의 영토처럼 여기고, 그들의 마음속을 탐험한다는 마음으로 경청해라
: 상대에게 취업 면접처럼 질문만 하면 안된다. 
: 상대의 비언어적 신호에 집중해서, 상대의 눈이 반짝이는 주제를 이어나가라

2. 사람들을 적절하게 기분좋은 상태에 빠뜨려라
: 상대에 대한 당신의 기대감은 비언어적 방법으로 상대방에게 전달된다.
: 그러므로, 상대와 대화할 때 조건 없는 사랑의 형태로 대해라

3. 상대의 자기평가를 긍정해라
: 자기평가란? 개인이 자신의 심리적 또 는 행동적 특성의 크기나 수준을 감정 혹은 추정하는 것을 의미한다.
: 개인의 자기평가에는 “나는 자율적이야”, “나는 똑똑해”, “나는 좋은 사람이야”를 전제로 한다.
: 상대의 자기평가에 의문을 품기보다는 긍정해라

4. 상대의 불안을 누그러뜨려라
: 상대와 대화하면서, 상대의 불안이 무엇인지 찾아라. (ex. 불안의 대상 예시: 외부, 창의력, 권력, 개성 등) 
: 그리고 그 불안을 건드리지 말, 상대가 불안해하는 요소를 칭찬해라 
: 이때, 상대의 타고난 재능보다 그의 노력을 칭찬해라

5. 상대의 저항과 고집을 이용해라
: 상대의 저항과 고집을 그 방향 그대로 흐르게 하되, 고집의 방향에 의도를 넣어라
"
2023-03-29 19:59:34,"김민수","[화요일] 바바라 민토 논리의 기술
1부 논리적으로 글쓰기 - 5장 연역법과 귀납법은 어떻게 다른가 - 연역적 추론

[요약]
연역법은 머릿속으로 생각할 때에는 유용하지만 글을 쓸 때는 논리를 전개하기 쉽지 않다.
연역적 추론이란 대전제와 소전제로부터 결론을 이끌어내는 삼단논법의 형태로 전개된다.
연역적 추론은 당므의 세 가지 요건을 충족해야 한다.
1. 세상에 실제로 존재하는 상황을 기술한다.
2. 같은 시간에 세상에 실제로 존재한느 연관 상황을 한 가지 더 기술한다. 두 번째 기술은 첫 번째 기술의 주부나 술부 가운데 한 가지를 언급하여 첫 번째 기술과 관련성을 갖는다.
3. 동시에 세상에 존재하는 위의 두 가지 상황이 의미하는 바를 기술한다.
복잡하고 지루한 방법이기 때문에 핵심 단계에서는 피해야 한다.

[발췌]
""연역법은 원래 단순 명료한 포인트를 복잡하게 만들기 때문에 글이 지루해지는 것은 당연한 결과이다.""
추론 단계를 모두 기술해야 하기 때문

[메모]
항상 논리적 필요에 따라 연역법 혹은 귀납법을 선택해왔는데 독자의 집중력과 기억력을 고려한 글쓰기에 대해서 다시 고민해보는 단락이었다."
2023-03-29 21:16:04,"강민규","오늘 하루 어떠셨나요? 매일 무슨 일이 있었든 하고자 했던바는 반드시 지켜봅시다. 과거의 나와 한 약속을 지키는 것도 스스로를 사랑하고 아끼는 하나의 방법이랍니다"
2023-03-29 21:56:57,"김효선","3/29 팩트풀니스

https://heady-dinghy-922.notion.site/2023-03-28-121-128p-0d5d08b89a374575b3bf88a79cbf1a42"
2023-03-29 22:05:01,"박예린","쏙쏙 들어오는 함수형 코딩 162~171p

요약

방어적 복사는 깊은 복사가 필요하므로 카피-온-라이트보다 비용이 크지만, 불변성 원칙이 적용되지 않는 (혹은 보장할 수 없는) 코드로부터 데이터를 보호하기 위해 사용함.

카피-온-라이트와 방어적 복사 둘 다 불변성을 유지하기 위한 기술이며, 상호 보완적으로 사용 가능.

소프트웨어 설계란 구현, 테스트, 유지보수가 쉽도록 프로그래밍을 설계하는 것

계층형 설계란 소프트웨어를 목적에 따라 계층으로 나눠서 구성하는 기술"
2023-03-29 22:10:22,"이미정","# # [쏙쏙 들어오는 함수형 프로그래밍]162~171pg

[요약]

Copy-on-write: make a copy every single time data is modified

It is used inside the safe zone to main immutability

Works when calling other functions that implement copy-on-write

Defensive Copying: make copies when data enters or leaves the safe zone

Chapter 8

- Learn a working definition of software design
- Understand stratified design and how can it help your team
- Learn how to extract functions to make code cleaner
- Discover why building software in layers helps you think better

Stratified Design?

- Write functions in terms of functions defined in lower layers

Software Design?

- Using one’s aesthetic sense to guide programming choices to improve the ease of coding, testing and maintaining software

How to develop design sense?

- Look for clues- inputs

Patterns of stratified design

- Straightforward implementation: too much detail is a code smell
- Abstraction barrier: hide an important implementation detail
- Minimal Interface
- Comfortable Layers"
2023-03-29 23:03:45,"김채욱","[컴퓨터 네트워킹 하향식 접근_3/29(수)]
[내용 요약]
[신뢰적인 데이터 전달 프로토콜의 구축]
rdt1.0 : reliable data transfer, 완전 신뢰적인 채널을 가정한 데이터 전송의 기본 규칙을 나타냅니다. 모든 송수신이 신뢰적이기에 피드백이 필요없습니다.

rdt2.0 : 전송 중 패킷에 오류가 있을시 긍정 응답과 부정 응답을 통해 패킷 재전송을 요구합니다. 이로 통해 오류 검출 기능인 체크섭 필드를 사용하고, 수신자 피드백 및 재전송을 합니다. 전송 후 대기 프로토콜입니다. 

rdt2.1 : 응답 패킷의 분실을 고려해 개선된 버전입니다. 응답 패킷의 손실 혹은 분실시 패킷 재전송을 하는데, 중복 데이터 전송이 될 수 있기에, 일련번호를 붙입니다. 각 데이터 패킷에 고유 순서 번호를 첨부합니다. 수신자는 일련번호로 데이터 패킷의 순서를 파악할 수 있습니다. 

rdt3.0 : rdt2.1의 짧은 주기의 타임아웃으로 생길수 있는 불필요한 패킷 재전송을 해결합니다. 흐름 제어 를 통해 패킷 사이의 RTT를 통해 재전송 주기 타이밍을 변화합니다. 전송-후-대기 프로토콜으로 호스트간의 데이터 통신의 신뢰성은 보장하지만, 이용률이 낮다.

이용률이 낮은 이유 : 빛이 지구 한바퀴를 도는데 걸리는 시간은 대략 100ms입니다. 만약 전송된 패킷의 확인을 받은 후 다음 패킷을 전송한다면, 한 패킷을 보내는데 1RTT가 걸립니다. 이마저도 중간의 패킷 손실을 고려하지 않았을 때이고, 패킷 손실이 일어난다면, 재전송으로 인해 대기시간과 재전송된 패킷 시간이 추가됩니다. 이는 하나의 패킷이 1kb라면 1mb을 보내는데 1000RTT가 순회되고 총 200000ms(200초)가 걸립니다.

​

[GBN]

정의 : Go-Back-N, ARQ(Automatic Repeat Request)프로토콜의 일종입니다. 전송자가 슬라이딩 윈도우에 보낼 패킷을 보관하여 NCK을 받지 않은 패킷을 분류하기에 ACK을 받지 않고도 여러 패킷을 전송할 수 있습니다.  

송신자 : 수신자가 ACK을 보내면 슬라이딩 윈도우는 앞으로 이동해 확인 된 패킷을 분류합니다. 만약 일정 시간동안 ACK을 못받으면 패킷이 손실된것으로 간주해 일정 분량의 패킷을 재전송함으로써 ""go-back-N""이라는 명칭이 생겼습니다. 

수신자 : 만약 수신자가 일련의 패킷번호가 맞지 않다면, 해당 파트의 패킷들을 버리고, 마지막으로 확인된 패킷에 응답하는 ACK을 보냅니다. 이로써 송신자에게 해당 지점부터 재전송을 요구합니다.

​

[Sliding Window]

정의 : 일정 범위의 데이터 패킷을 ""slides""해서 데이터 스트림으로 보내면서 신뢰성을 보장하기에 sliding window라 칭합니다.

구조 : 

Base : 송신자 윈도우의 송신 패킷의 시작점입니다. 수신자로부터 ACK이 오면 base가 앞으로 이동하면서 일련번호가 증진됩니다.

NextSeqNum : 다음 패킷의 일련 번호를 나타냅니다. 일정 범위의 패킷들이 전송되면, nextseqnum은 증가합니다. 단, ack를 받은 상태가 아닙니다.

Window Size : Nck 패킷을 보관할 데이터 패킷의 최대 개수의 크기입니다. 

장점 : 

혼잡 제어 : 송신자가 다수의 패킷을 전송함으로써 수신자의 버퍼를 넘는 현상을 방지합니다. 수신자는 버퍼 상태와 데이터 처리 속도를 송신자에게 전달합니다. 송신자는 수신자의 상태에 따라 전송하는 데이터 범위를 교정합니다.

에러 복귀 : 패킷 손실이 일어나면 'go-back-n'원리로 일정 일련번호부터 재전송합니다.

​

[Selective Repeat]

정의 : go-back-n의 오류 복귀를 더 효율적으로 하기 위해 손실된 패킷만 재전송하는 방식입니다.

방식 : 

전송자 slide window : slide window를 사용하고 구조(go-back-n)도 동일하게 사용하지만, 추가로 개별 패킷의 ack도 관리합니다.

수신자 slide window : 수신자도 slide window를 유지하면서, 비순서적인 패킷을 버퍼에 저장합니다. 이후 순서가 맞지않은 패킷을 포함해 ACK를 보냅니다.

오류 복귀 : ACK를 받으면 해당 패킷은 window에서 삭제하고 slide을 앞으로 이동합니다. 패킷 손실된 것은 일정 시간 후 재전송합니다.

재전송 : 송신자는 손실된 패킷만 재전송합니다. 

수신자 재전송 패킷 : 버퍼에 순서에 맞지않은 일련의 패킷들이 있기에, 손실된 패킷이 오면, 순서에 맞게 데이터를 규합 후 애플리케이션 계층으로 전달합니다.

​

[TCP : 연결지향형 트랜스포트]

정의 : 연결지향형 트랜스포트 계층 프로토콜입니다. 신뢰성 보장, 에러 체크 및 복구 기능이 있습니다.

추가 설명 : 전이중 서비스를 제공하여서 양쪽 호스트는 상호 연결된 상태로 데이터가 양방향으로 흐를 수 있습니다. 세 방향 핸드세이크로 상호 호스트 간의 세션 연결을 합니다.(SYN와 ACK 패킷을 주고 받아 연결합니다.)"
2023-03-29 23:45:39,"Seo","3/ 28 화
https://lead-countess-db7.notion.site/DAY13-4ea55f0091a34137ab0c47a80421b75a

3/29 수 
https://lead-countess-db7.notion.site/DAY14-430507c09a3f427b817b7bdf7290cf6e"
2023-03-30 00:03:35,"강민규","오늘 분량은 아직 많이들 안하셨지만 탈락위기이신 분들은 안계시네요! 마음이 편안합니다.. 사실 탈락 위기 분들이 계시면 마음이 불안하거든요. 다같이 끝까지 해내길 강력 바라고있기때문입니다..."
2023-03-30 01:32:02,"김형우","[화요일 분량]
https://engineer-diary.tistory.com/171"
2023-03-30 05:30:50,"영동","함수형 코딩 161-171

세상에 많은 코드가 불변성을 지키지 않은 상태로 사용되고 있고, 그걸 다 바꿀 수 없기 때문에 방어적 복사를 사용하는 것이다.

레거시 코드를 확신 할 수 없다면 카피-온-라이트 함수가 아니라고 생각하고 방어적 복사를 해야한다.

레거시 코드를 할 수 있다면 카피-온-라이트로 바꾸면 된다.

방어적 복사가 힘이 있는 이유는 불변성을 스스로 구현할 수 있기 때문이다.

방어적 복사는 불변성을 구현하는 원칙이다. 데이터가 들어오고 나갈때 복사본을 만든다.

방어적 복사는 신뢰할 수 없는 코드와 함께 사용할 때만 사용한다.

### 계층형 설계

계층형설계는 아래 계층의 함수로 지금 계층의 함수를 만드는 일이다.
설계를 잘하면 소프트웨어 개발 과정 전체에 도움이 된다.

비즈니스 규칙 - 비즈니스 규칙을 구현하기 위한 동작 - 카피온라이트 - 언어에서 지원하는 자료구조 기능

잘하는 것을 설명하고 싶지만 복잡하기 때문에 설명 하기 어렵다.

계층형 설계를 위해 고려해야 할 사항들.
[입력]
함수 본문 : 길이, 복잡성, 구체화 단계, 함수 호출, 프로그래밍 언어의 기능 사용
계층 구조 : 화살표 길이, 응집도, 구체화 단계
함수 시그니처 : 함수명, 인자 이름, 인잣값, 리턴값

[출력]
조직화 : 새로운 함수를 어디에 놓을 지 결정, 함수를 다른 곳으로 이동
구현 : 구현 바꾸기, 함수 추출하기, 데이터 구조 바꾸기
변경 : 새 코드를 작성할 곳 선택하기, 적절한 수준의 구체화 단계 결정하기

계층형 설계의 가장 중요한 4가지 패턴
1. 직접 구현 : 함수 시그니처가 나타내고 있는 문제를 함수 본문에서 적절한 구체화 수준에서 해결해야 한다.
2. 추상화 벽 : 고수준의 추상화 단계만 생각하고 해당 계층 수준에 맞는 코드를 작성한다.
3. 작은 인터페이스 : 비즈니스 개념을 나타내는 중요한 인터페이스는 작고 강력한 동작으로 구성해야 한다.
4. 편리한 계층 : 개발자의 요구를 만족시키면서 비즈니스 문제를 잘 풀수 있어야 한다. 계층에 투자 해야 한다."
2023-03-30 07:54:59,"김민수","[수요일] 바바라 민토 논리의 기술
1부 논리적으로 글쓰기 - 5장 연역법과 귀납법은 어떻게 다른가 - 귀납적 추론 

[요약]
귀납적 추론은 여러 가지 상이한 생각, 사건, 사실 사이의 유사한 점을 파악하여 하나의 그룹으로 묶은 다음 유사점이 갖는 의미에 대한 의견을 기술한다.
따라서 그루핑을 한 생각을 정의하고, 그 중 적절하지 않은 것을 선별한 뒤 하나의 단어로 표현해야 한다.

[발췌]
""독자는 머릿속으로 미리 당신이 다음에 말할 포인트가 무엇인지 예상하게 된다.""
저자가 글을 쓰면서 떠올리는 '그러므로'와 독자가 글을 읽으며 떠올리는 포인트는 크게 다르지 않을 것이다.

[메모]
글을 쓰는 과정에서는 읽는 사람의 머릿속에서 이루어지는 읽기 과정을 예상할 수 있어야 한다."
2023-03-30 07:55:18,"강민규","사진"
2023-03-30 07:56:33,"강민규","좋은 아침입니다 여러분! 이번 주도 절반을 넘어왔네요! 흘러가는 세월이 아깝지않게 청춘을 즐겨봅시다~"
2023-03-30 08:13:41,"김민수","세월이 가면~ 가슴이 터질듯~한~"
2023-03-30 08:13:48,"김민수","[목요일] 바바라 민토 논리의 기술
2부 논리적으로 생각하기 - 6장 논리적 순서 정하기

[요약]
실전적 사고 프로세스에서는 생각의 그룹을 구성하는 논리 구조를 찾아내어 논리적 순서에 따라 서술한 다음, 본질적인 생각을 찾아내어 귀납법적 요약을 찾아낸다.
논리 전개의 순서에 따라 글이 구성되는 연역적 그루핑에 비해 귀납적 그루핑은 논리 전개의 순서를 스스로 결정해야 한다.
따라서 논리 전개의 순서를 정하고 생각을 점검하는 방법을 알아야 하며 이를 위해 할 수 있는 분석 활동은 3가지 뿐이다.
1. 결과의 원일을 결정한다.
2. 전체를 부분으로 나눈다.
3. 유사성의 정도에 따라 분류한다.

[발췌]
""그루핑된 생각을 비판적으로 바라보지 않으면 독자에게 자신이 말하고자 하는 내용을 명확하게 전달할 수 없고 또한 스스로도 자기 생각을 제대로 파악하지 못하게 된다.""
글을 작성한 뒤에도 정제된 글을 만들기 위하여 지속적으로 개선하는 과정이 필요하다.

[메모]
때때로 회사에서 글을 쓰다보면 독자의 니즈를 빠르게 만족시키기 위하여 숫자를 도입부에 기재하곤 한다.
하지만 숫자라는 것은 여러 항목이 있기 마련이고 가끔은 그로 인하여 도입부의 항목이 지나치게 많아지곤 한다.
때로는 (책에서 말하는) 좋은 글쓰기보다 독자를 고려한 글쓰기가 더 필요한 때도 있지 않을까?
예를 들면 독자가 1명인 글을 쓰는 경우 같은 것이다."
2023-03-30 18:38:22,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
회차: 15회차

1. 아이의 융통성과 어른의 추론능력을 가져라
- 우리의 똑똑함은 나보다 현명한 사람의 생각과 교훈을 흡수하는 능력에 의존한다.
- 우월감은 새로운 생각과 영향력에 대해 서서히 마음을 닫게 한다.
- 이상적인 마음의 상태는, 어린시절의 융통성을 유지하면서 + 어른의 추론 능력을 함께 가진 상태이다.

2. 세상을 다르게 보고 태도를 바꿔라
- 우리는 어린시절의 트라우마와 상처를 안고 살아간다.
- 불안이나 실망을 감당하기 위해 내가 경험하는 것을 축소한다.
- 감옥에서 벗어나는 건 바로, 세상을 다르게 보고 태도를 바꾸는 것이다."
2023-03-30 19:04:08,"소재훈","3월 30일(수) 컴퓨터 네트워킹 하양식 접근 Day15입니다!
제출자: 소재훈
4.신뢰성 있는 데이터 전송의 원리
https://geode-drizzle-777.notion.site/4-5c40892498ec4725bc482b95d2308ae9 "
2023-03-30 22:38:25,"강민규","여러분들 오늘 하루는 어떠셨나요? 벌써 일주일 다 끝나고 금요일만 남았네요. 시간이 너무 빠릅니다… 내일 또 금요일이라 어떻게 될 지 모르니 오늘은 미루지 말고 당일 분량까지 모두들 해보시죠! 화이팅입니다~"
2023-03-30 23:18:37,"김채욱","[컴퓨터 네트워킹 하향식 접근_3/30(목)]
[내용 요약]
​
[TCP 세그먼트 구조]
설명 :

출발지 포트 번호 : 16비트

목적지 포트 번호 : 16비트

순서 번호 : 32비트, 데이터를 순서대로 보내기 위해 사용됩니다.

확인응답번호 : 32비트, 다음 데이터 번호입니다.

헤더길이(데이터 오프셋) : TCP헤더길이를 32비트 워드로 나타내기 위한 용도입니다.

미사용(보존) : 3비트, 0으로 채워져 있습니다.

컨트롤 플래그 : 9비트, TCP 연결과 데이터 흐름을 관리하기 위해 사용됩니다.

윈도우 크기 : 16비트, 수신되는 윈도우 크기로, 가용 가능한 버퍼 크기를 알 수 있습니다.

체크섬 : 16비트, 에러 감지를 위해 사용됩니다.

긴급 포인터 : 데이터 우선순위를 나타냅니다.

옵션 : 다른 TCP 기능을 위해 사용됩니다. (MSS, window scaling, 선택적 응답)

데이터 : 실제 전송되는 데이터 값, MSS크기에 의해 제한됩니다.

​

[순서번호와 확인응답번호]

순서번호 : 

송신자와 수신자가 연결이 되면, 각자 시작 일련번호(ISN, initial sequence number)가 있습니다. 보통은 랜덤으로 생성되는데, 각 바이트가 고유 일련번호를 갖게 하기 위함입니다. 

확인응답번호 :

수신자가 송신자에게 받기를 기대하는 다음 일련번호입니다. 수신자가 세그먼트를 받으면 응답번호를 순서번호에 보내는데, 이때 확인응답번호에는 상대방의 다음 순서번호를 담습니다.

​

[왕복시간 예측과 타임아웃]

구성 : 

SamepleRTT : 특정 세그먼트의 RTT 값입니다. 

EstimatedRTT : 여러 sampleRTT값들의 평균값입니다. 이는 더 안정적이고 정확한 예상치를 냅니다. 최근 sampleRTT값에 더 큰 가산점을 두어서 네트워크 변동성을 예측합니다.

Exponential Weighted Moving Average(EWMA) : estimatedRTT를 계산하는 방법입니다. 최근값에 두는 비중을 다르게 둡니다.

공식 : estimatedRTT = α × sampleRTT + (1 - α) × previous_estimatedRTT

​

[신뢰적인 데이터 전달]

설명 : 데이터 전송에 3가지 주요 이벤트로 상위 애플리케이션으로부터 수신된 데이터, 타이머 타임아웃, ACK수신입니다.

NextSeqNum = InitialSeqNumber
SendBase = InitialSeqNumber

loop (forever) {
    switch (event)
        event : data received from application above
            create TCP segment with sequence number NextSeqNum
            if (timer currently not running)
                start timer
            pass segment to IP
            NextSeqNum=NextSeqNum + length(data)
            break
        event : timer timeout
            retransmit not-yet-acknowledged segment with
                smallest sequence number
            start timer
            break
        event : ACK received, with ACK field value of y
            if (y > SendBase){
                SendBase = y
                if (there are currently any not-yet-acknowledged segments)
                    start timer
            }
        break;
}
추가 설명 : TCP는 NCK을 사용하지 않습니다. 손실된 패킷을 파악하고 재전송하기 위해 몇몇 방법을 사용합니다.

중첩 ACK : TCP 헤더중 확인응답번호가 있습니다. 수신자가 ACK에 가장 최근에 받은 정렬된 바이트를 넣으면 송신자는 손실된 패킷을 보냅니다.

재전송 타임아웃 : ACK이 올때까지 타임아웃으로 손실된 세그먼트를 판별합니다. ACK이 오지 않은 패킷을 재전송합니다. 이때 RTT의 시간대를 예측해 타임아웃 주기를 조절합니다.

빠른 재전송 : 수신자가 손실된 세그먼트를 감지하면 바로 최근에 보낸 ACK을 보냅니다. 송신자는 동일한 ACK을 받으면 동일한 일련번호 패킷을 다시 전송합니다."
2023-03-31 00:06:35,"강민규","아직 수요일 분량을 하지 않으신 분들입니다!!
@길인식 @김현진 @김형우 @김효선 @오홍근 @이강욱 @최창훈 @정소영 
잊지말고 꼭 해주세요~"
2023-03-31 00:09:55,"김효선","링크 공유가 잘못 되었네요. 다시 전달드려요!
https://heady-dinghy-922.notion.site/2023-03-29-129-133p-eeb9d5c71b5a4da2ab6efb14584176d3"
2023-03-31 00:11:45,"이미정","# # [쏙쏙 들어오는 함수형 프로그래밍]172~183pg

[요약]

1. Straightforward Implementation 
- avoid having full of details that aren’t relevant at this level of thinking
- layers in the diagram were chosen to correspond to layers of abstraction
    - common details you don’t have to care about
    - ex) business rules about carts layer: X worry about the detail that carts are implemented as arrays
- all functions in a layer should serve the same purpose

[발췌]

[메모]"
2023-03-31 00:31:57,"정소영","수 (152-161)
넛지 : 파이널 에디션

5장 <선택설계의 세계>
“설계는 단지 어떻게 보인다거나 느껴진다거나 하는 차원이 아니다. 설계는 어떻게 작동하는가 하는 차원이다”

•자극 반응 일치성
- 사람은 누구나 자기가 받은 신호가 자기가 기대하는 바람직한 행동과 일치하길 바란다
- 빠른 자동시스템 느린 숙고시스템

- 어떤 일을 하도록 장려하고 싶다면, 그 일을 쉽게 할 수 있게 만들어라
- 특정한 방향으로 밀어붙이는 것이 아닌 작은 장애물을 제거함으로써 좋은 행동을 하도록 유도"
2023-03-31 00:32:25,"정소영","목 (162-167)
넛지 : 파이널 에디션

<선택설계의 세계>

•기본 설정과 최소 저항 경로
- 많은 사람은 여러 개의 선택지 가운데 노력이 가장 적게 드는 선택지, 즉 최소 저항 경로를 취한다
- 극단적으로 “예”가 아주 크게 보이는 투표지
- 선택이 복잡하고 어려울 때 사람들은 기본 설정을 반김. 선택을 요구(강요)받지 않아도 되기 때문
예) 소프트웨어 사용시 제작자가 추천하는 권장설정 그대로.

•오류를 예상하라 
- 인간은 실수한다. 실수할 것을 예상하고 여유 공간을 확보해둘 것
- 예) 승차권을 어느 방향으로 넣어도 기계가 받아주는 시스템

- 완성 후 오류 : 사람들이 자신이 수행하던 기본적인 과제를 끝내고 나면 그 이전 단계와 관련된 것을 잊어버리는 성향 (주유하고 뚜껑을 두고 가는 실수..)

- 구글 지메일의 넛지
첨부한다는 메일 내용과 다르게 파일을 첨부하지 않았을 때, 첨부를 잊으신 것이 아니냐는 메시지를 띄워줌. "
2023-03-31 00:33:16,"길인식","[수요일]
[데이터 중심 애플리케이션 설계]
[요약]
쓰기 충돌 : 단일 리더는 락 또는 다른 트랜잭션 중단, 다중 리더는 쓰기 모두 성공하며 특정 시점에 비동기로 감지
충돌처리 : 충돌회피(가장 간단), 일관된 상태 수렴, 애플리케이션 수준(충돌 핸들러, 읽기시 충돌해소)
복제 토폴로지 : 쓰기를 한 노드에서 다른 노드로 전달하는 통신 경로(원형, 별, 전체연결)
리더 없는 복제 : 모든 복제 서버가 클라이언트로부터 쓰기를 직접 받을 수 있게 허용하는 접근 방식

[발췌]
버전 벡터라고 하는 기법을 사용할 수 있다 …
다중 리더 복제 시스템을 사용하려면 이런 문제를 인지하고 문서를 주의 깊게 읽은 다음 데이터베이스를 철저하게 테스트해 실제로 믿을 만한 보장을 제공하는지 확인하는 편이 좋다

[메모]
문제 인지, 그리고 데이터베이스별로 철저히 공부 및 테스트가 중요"
2023-03-31 01:08:27,"영동","함수형코딩 172~185 

패턴 1 : 직접 구현

마케팅 캠페인 관련 함수가 장바구니가 배열이라는 것을 알아야 할까요?

저수준의 코드는 추출해야한다.  한 함수에서 서로 다른 추상화 단계를 사용하면 코드가 명확해지지 않는다.

서로 다른 함수가 같은 박스를 가르킨다는 건 같은 계층에 있어도 된다는 것

카테고리 비즈니스 규칙
일반적인 비즈니스 규칙
카테고리 기본 동작
요소에 대한 기본 동작
카피-온-라이트 동작
언어 기본 기능

두 단계를 건너 뛸수도 있다."
2023-03-31 01:51:25,"김현진","데이터중심 애플리케이션 설계
수요일
https://ongoingjin.notion.site/W03-3-173-183p-24eb00259ab5466395ba6df91b713002"
2023-03-31 04:38:31,"박예린","쏙쏙 들어오는 함수형 프로그래밍 (172~185p)

요약

호출 그래프를 통해 함수 호출을 시각화할 수 있다

함수 이름은 함수가 어느 곳에 위치할지 결정하기 위한 정보로 쓸 수 있다

- ex) 비즈니스 로직에 관련된 이름을 가진 함수 → 비즈니스 로직 계층에 배치

같은 계층에 있는 함수는 같은 목적을 가져야 한다

발췌

각 계층은 추상화 수준이 다릅니다. 그래서 어떤 계층에 있는 함수를 읽거나 고칠 때 낮은 수준의 구체적인 내용은 신경쓰지 않아도 됩니다. 예를 들어 ‘장바구니 비즈니스 규칙’ 계층에 있는 함수를 쓸 때, 장바구니가 배열로 구현되어 있다는 것과 같은 구체적인 내용은 신경쓰지 않아도 됩니다.

다이어그램은 함수가 호출하는 것을 있는 그대로 표현한 것이기 때문에 함수를 어떤 계층에 놓을지 바로 알 수 있습니다. 그래서 다이어그램은 코드를 높은 차원에서 볼 수 있는 좋은 도구입니다. (185p)"
2023-03-31 04:45:53,"김형우","[수요일 분량]
https://engineer-diary.tistory.com/172"
2023-03-31 04:56:50,"이강욱","https://velog.io/@rivolt0421/Grokking-Simplicity-1516"
2023-03-31 06:46:38,"최창훈","삭제된 메시지입니다."
2023-03-31 06:47:11,"최창훈","컴퓨터 네트워킹 하향식 접근(수요일)

https://cautious-ocarina-cca.notion.site/Chapter3-97d035d913c5411c87b1db4660f3130e"
2023-03-31 07:38:45,"오홍근","[쏙쏙 들어오는 함수형 코딩][오홍근][day15-16]
162-185p
<요약>
- 방어적 복사는 깊은 복사를 하기 때문에 비싸다. 방어적 복사는 신뢰할 수 없는 코드와 함께할 때만 사용한다.
- 소프트웨어 설계 : '미적 감각'을 사용하는 것
- 계층형 설계 패턴
  1. 직접 구현
  2. 추상화 벽
  3. 작은 인터페이스
  4. 편리한 계층
- 직접 구현
  - 호출 그래프를 만들어 시각화
  - 서로 다른 추상화 단계에 있는 기능이라면 직접 구현 패턴이 아님
    = 함수가 모두 비슷한 계층에 있다면 직접 구현임
  - 같은 계층에 있는 함수는 같은 목적을 가져야 함  

<메모>
책에서는 Straightforward implementation를 '직접 구현'으로 번역했다.
'직접 구현'이라는 표현과 실제 책에서 설명하는 내용이 부합하지 않는 느낌이라 혼란을 가져온다.
영어 단어 그대로 받아들이거나 직관적인 구현 또는 간단한 구현으로 바꿔서 읽는 것이 좋을 듯."
2023-03-31 07:55:02,"강민규","사진"
2023-03-31 07:55:46,"강민규","여러분 좋은 아침입니다~ 오늘은 3월의 마지막날이에요. 시간을 내서 이번 한달을 되돌아보는건 어떨까요?"
2023-03-31 09:34:30,"김민수","1등!"
2023-03-31 09:34:31,"김민수","[금요일] 바바라 민토 논리의 기술
2부 논리적으로 생각하기 - 6장 논리적 순서 정하기 - 시간의 순서

[요약]
1,2,3단계로 표현하는 등 시간의 순서에 따른 논리 전개는 쉽고 일반적이다.
하지만 종종 원인과 결과를 제대로 구분하지 못하는 경우가 생긴다.
인과관계의 오류를 피하는 방법은 그림으로 나타내보는 것이다.
결론을 도출할 떄는 근거를 인지하고 밝혀야 한다.

[발췌]
""사람들은 종종 전달하고자 하는 포인트를 명확하게 밟히지 않은 채 그렇게 된다고 암시하는 안이한 방법을 취한다.""
결론을 도출할 때는 사전에 근거가 되는 프로세스를 명확하게 인식하고 있어야 한다.

[메모]
그룹핑을 적당한 개수로 하는 방법 그리고 프로세스의 일부를 누락하지 않는 것이 필요하다."
2023-03-31 14:26:31,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
회차: 16회차

1. 우리는 스스로 만들어낸 현실만 본다.
- 세상은 있는 그대로 존재한다.
- 그런데 우리가 사물이나 사람에 색깔을 더하거나 빼서 특정한 시각으로 보는 것이다.
- 우리는 내가 자각하는 현실의 많은 부분을 그때 그때의 기분과 감정의 지시에 따라 빚어낸다.
- 우리의 태도가 상대의 행동이나 내 주변 시선을 왜곡 시킨다.

2. 부정적 태도의 5가지 유형
- 적대적 태도: 자신의 적대감을 타인에게 투영한다.
- 초조한 태도: 일이 일어나기도 전에 어마어마한 초조함을 느낀다.
- 회피적 태도: 책임이나 도전이 주어진 경우, 누가 자신을 심판할 수도 있기에 회피적인 성향을 보인다.
- 우울한 태도: 종종 타인에게 상처를 주고 싶은 욕구를 남몰래 갖고 있다.
- 원망의 태도: 늘 부당한 대접을 받았다는 느낌을 가지고 있다."
2023-03-31 14:28:55,"김현진","데이터중심 애플리케이션 설계
목요일
https://ongoingjin.notion.site/W03-4-184-193p-6c1d52bfe7fa449cacdc802550b5c8d2

금요일
https://ongoingjin.notion.site/W03-5-199-208p-087d74184b1c4fe3b1cb967017512c58"
2023-03-31 17:49:03,"소재훈","3월 30,31일(목,금) 컴퓨터 네트워킹 하양식 접근 Day16,17 입니다!
제출자: 소재훈

5. 연결지향형 전송 프로토콜(TCP)
https://geode-drizzle-777.notion.site/5-TCP-733b990cc3fe4024adb332d9a7d93f0c

6. 혼잡 제어의 원리
https://geode-drizzle-777.notion.site/6-46e723fcc25f43b58a2acf19a138491f


7. TCP 혼잡제어 - 일부분
https://geode-drizzle-777.notion.site/7-TCP-d1c0b334e5d34c8a8043fe211f6f5ec7"
2023-03-31 17:49:27,"Seo","3/30 목
https://lead-countess-db7.notion.site/DAY15-53e55a66ffb046f58b7de29b72019e15

3/31 금
https://lead-countess-db7.notion.site/DAY16-539a4073560748e58d4b345acc91bede"
2023-03-31 19:26:24,"이미정","# # [쏙쏙 들어오는 함수형 프로그래밍]184~200pg
[요약]
3 different problem areas:
1. interaction btw layers
2. implementation of one layer
3. implementation of one function

3 diff zoom areas:
1. global zoom level- see entire call graph
2. layer zoom level- start with level of interest
3. function zoom level- start with one function of interest , compare arrows from one function 

intermediary functions 

counting functions layers point to is a good indication of complexity 

straightforward implementation:
1.solves problem at single level of detail
2. target specific level of detail
3.call graph gives rich source of clues about levels of detail
4. extracting out a function makes more general function
5. more general functions more reusable
6. don't hide complexity - we want every layer to be straightforward




[발췌]

[메모]"
2023-03-31 20:44:44,"김효선","3/30 팩트풀니스
https://heady-dinghy-922.notion.site/2023-03-30-134-144p-f872b988a8524e18ac483f6e85ba649a

3/31 팩트풀니스
https://heady-dinghy-922.notion.site/2023-03-31-145-152p-8a45e44a194c413dbc98d763ce076f05"
2023-03-31 22:37:20,"최창훈","컴퓨터 네트워킹 하향식 (목)

https://cautious-ocarina-cca.notion.site/Chapter3-97d035d913c5411c87b1db4660f3130e"
2023-03-31 23:33:26,"강민규","오늘 놀기좋은 금요일 밤에도 다들 잘해주셨군요! 이제 3주차도 거의 끝났습니다. 다음 주 4주차가 끝나면 1주 간 복습기간이 주어진다는 사실! 그러니 내용이 이해안가는 부분이 있고 힘들고 지치더라도 조금만 참고 나아가봅시다!!"
2023-03-31 23:33:54,"강민규","@길인식 @김형우 선생님들은 오늘 목, 금 분량 올려주세요! 응원합니다~"
2023-04-01 01:53:50,"길인식","[목요일]
[데이터 중심 애플리케이션 설계]
[요약]
복제 세 가지 주요 접근 방식 : 단일 리더 복제, 다중 리더 복제, 리더 없는 복제
다중 리더 복제와 리더 없는 복제 접근 방식에 동시성 문제 발생 → 최종 쓰기 승리, 이전관계, 형제(sibiling)

[발췌]
… 그 대신 시스템은 형제를 병합할 때 상품을 제거했음을 나타내기 위해 해당 버전 번호에 표시를 남겨둬야 한다. 이런 삭제 표시를 툼스톤이라 한다. 191p

[메모]
다중 db를 운영하면서 sync가 안맞을때 완전히 잘못되었다고 생각했었는데, 자연스러운 현상일 수 있고 이를 해결해나가는 과정이 중요한것 같다."
2023-04-01 05:26:56,"김형우","[목요일 분량]
https://engineer-diary.tistory.com/173"
2023-04-01 07:54:23,"강민규","사진"
2023-04-01 07:55:14,"강민규","여러분 즐거운 주말입니다. 저는 오늘 여의도에 벚꽃 보러 갑니다! 여러분도 즐거운 하루 보내세요~"
2023-04-01 07:55:24,"김민수","[토요일] 바바라 민토 논리의 기술
2부 논리적으로 생각하기 - 6장 논리적 순서 정하기 - 구조의 순서

[요약]
구조의 순서란 도표나 지도와 같이 가시화되는 순서에 따라 논리를 전개하는 것을 말한다.
전체를 부분으로 나눌 때에는 중복되거나 누락된 것이 없어야 한다.
구조를 만든 다음에 글로 표현하고, 변화를 제안해야 한다.

[발췌]
""글의 논리적 구조를 따져보지 않으면 의미 없는 이야기가 쓰여 있는지를 확인할 수 없다는 사실이다.""
글을 쓴 뒤에도 글의 구조를 재차 확인하여 결함과 누락을 확인해야 한다.

[메모]
구조 기반으로 순서를 정할 때 시각적 가시화를 통하여 구조를 단단하게 하는 과정이 인상적이다."
2023-04-01 07:56:08,"김민수","주말에는 늦잠 좀 자고싶은데 몸의 항상성이...ㅎㅎ ㅠㅠ"
2023-04-01 07:57:00,"강민규","제가 선망하는 몸을 가지셨군요... 어릴적부터 그러셨나요?"
2023-04-01 07:57:56,"김민수","직장다닌 뒤로는 신입때부터 퇴근하면 학교가는 삶을 살아서 부득이하게 이렇게 되었습니다. 지금은 아니지만 예전에는 5시에 기상해서 바로 출근해야 학교시간 맞출 수 있었어서."
2023-04-01 07:58:34,"강민규","오.. 존경합니다"
2023-04-01 07:58:56,"김민수","아침먹고 치우고 산책하고 욕조에서 땀땀빼고 책읽었는데 아직 8시가 안 되서 논문펼친 그런..주말...."
2023-04-01 07:59:13,"김효선","4/1 팩트풀니스

https://heady-dinghy-922.notion.site/2023-04-01-153-159p-92421d7065fd4aaba2f1ab6f27f190a9"
2023-04-01 08:08:32,"영동","오늘은 다이빙 하러 갑니다 "
2023-04-01 08:08:45,"영동","다들 즐거운 주말보내세요~~!"
2023-04-01 08:08:59,"김민수","스쿠버하시나요?"
2023-04-01 08:09:11,"영동","저는 프리다이빙해요 ㅎㅎ"
2023-04-01 08:09:42,"김민수","아아 저도 둘 다 해요"
2023-04-01 08:11:25,"영동","오오.. 저 이번에 라이센스 막 딴 초보긴하지만"
2023-04-01 08:11:30,"영동","나중에 같이 한번 가시죠 ㅎㅎ"
2023-04-01 08:14:42,"김민수","사진 20장"
2023-04-01 08:15:36,"김민수","시원한 한국바다 보세요 ㅎㅎ 좋은하루~~"
2023-04-01 08:24:05,"영동","직접찍으신거에요??  대박"
2023-04-01 08:24:09,"영동","사진도 하세요???"
2023-04-01 08:25:09,"영동","이모티콘"
2023-04-01 08:40:44,"김민수","네네 직접 찍은거 ㅎㅎ"
2023-04-01 08:42:20,"김연정","와~~ 너무 예뻐요"
2023-04-01 08:42:26,"김연정","이모티콘"
2023-04-01 16:25:31,"Seo","4/1 토
https://seoshow.notion.site/DAY17-2b5733ab28c94f7cb9b986c9377cb8af"
2023-04-01 16:27:01,"김현진","데이터중심 애플리케이션 설계
토요일
https://ongoingjin.notion.site/W03-6-209-220p-fd9d11b413934dcbb53ac5745e1fc7b7"
2023-04-01 19:57:23,"정소영","금 (169-175)
넛지 파이널 에디션

<선택설계의 세계>
•피드백하라
- 잘 설계된 시스템은 사람들이 잘하고 있을 때, 그리고 실수를 하고 있을 때 그 사실을 알려준다.

- 중요한 유형의 피드백 : 일이 잘못되고 있다는 경고나, 잘못되려 한다는 경고를 해주는 것
  - 경고 남발은 경고를 무시하게 만들 수 있음
  - 동의서 예를 남발하는 경우."
2023-04-01 19:57:53,"정소영","토 (176-184)
넛지 파이널 에디션

•매핑 이해하기 : 선택에서 복지로
- 매핑 : 선택과 그에 따른 결과 사이의 관계
- 좋은 선택 설계 시스템은 선택과 걸과의 연결성을 이해하는 능력을 향상시켜 선택자가 다신의 삶을 한층 개선하는 선택지를 고르도록 도움. > 각각의 정보를 이해하기 쉽게 만듦으로서 이뤄낼 수 있음

• 복잡한 선택 구조화하기
- 선택지의 가짓수와 복잡성을 토대로 전략을 채택함 
- 좋은 선택 설계자는 선택지 개수를 충분히 관리할 스 있을 만한 규모로 줄인다. 
- 보상 전략 
- 요인별 제거법
- 협업 필터링 : 자신과 비슷한 사람들의 취향을 알면, 비슷한 사람들이 좋아한다는 이유만으로도 직접 경험하지 않은 제품이라도 마음 놓고 선택할 수 있음 > 어려운 선택을 쉽게 만들어줌
    - 우연한 발견이 재미와 이익을 주는 것은 잊지말 것"
2023-04-01 21:48:39,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
회차: 17회차

### 열린 태도로 가는 5가지 방법
- 개별 문제처럼 보이는 모든 문제를 관장하는 건 우리의 태도이다.
- 태도란, 우리가 일상적으로 세상을 바라보는 방식이다.
- 전체적인 태도를 개선하면 다른 것들도 모두 좋아진다.

1. 세상에 대한 시각을 열어라
- 자신을 탐험가라고 생각해라
- 탐험가라면 그 모든 확실성을 버리고 가야한다.
- 당신은 새로운 생각과 사고방식을 끊임없이 찾는 것이다.
- 모든 시대, 문화권에서 발현하는 모든 형태의 지식을 탐구하면서 도전을 받아들여라

2. 역경을 도전의 기회라고 여겨라
- 모든 형태의 역경을 피하려고 한다면, 절대로 도전다운 도전을 할 수 없다.
- 모든 시련은 성장하고 발전할 기회이다.
- 역경과 고통은 대개 당신의 통제범위를 벗어나지만, 당신의 반응을 정하고 그 반응에서 비롯될 운명을 결정하는 건 당신의 권한이다.

3. 자기 자신에게 한계를 규정하지 마라
- 나이가 들면서 우리는 인생에서 내가 어디까지 갈 수 있을지 한계를 긋는 성향이 있다.
- 머리 속으로 정한 한계는 실제 내 한계가 된다.
- 실제 당신은 많은 것을 할 수 있고, 또 그렇게 생각해야 한다.

4. 당신의 활력과 건강을 고무해라
- 태도는 건강에 어마어마한 역할을 한다.
- 어떤 과제를 하나 맡아 추진하면서 도전의식을 느끼고, 한껏 고무되면 스스로 신체적 한계를 넘을 수 있다.

5. 타인을 하나의 자연현상으로 봐라
- 사람들의 말과 행동이 나를 직접적으로 겨냥한다는 생각을 우선 버려라
- 그리고 사람을 하나의 자연현상으로 봐라
- 우리는 타인의 인간 본성을 재설계할 수 없다.
- 오히려 당신과 다르다는 사실을 적극 환영해라
- 이렇게 중립적인 태도를 가지면 상대를 더 깊게 이해할 수 있게 된다."
2023-04-01 21:48:52,"영동","함수형코딩 186~200

같은 계층에 있는 함수는 같은 목적을 가져야 하고, 두 단계 이상의 계층을 넘어서면 안된다.

함수가 가르키는 화살표의 길이(계층 이동 단계)를 비교하는 것은 복잡성을 측정하는데 좋은 방법이다.  호출 그래프를 통해 설계를 개선할 수 있는 것을 찾을 수 있다.

함수가 더 구체적인 내용을 다루지 않도록 일반적 함수로 빼내야 한다.

계층형 설계 모든 계층은 아래 계층만 의존해야 한다. 

함수형 코딩 201~210

추상화 벽, 인터페이스, 설계의 만족 지점

추상화는 팀 간의 책임을 명확하게 나누는 것이다. 추상화 벽에 있는 함수를 쓸 때는 해당 함수의 구현을 몰라도 된다. 라이브러리와 API

추상화 벽은 쉽게 구현을 바꾸기 위해 사용한다. 어떻게 구현이 되었는지 호출하는 함수는 몰라도 되기 때문에 호출되는 함수를 인터페이스를 지킨 채로 마음대로 바꿔도 된다."
2023-04-01 21:48:57,"영동","금 토 분량 입니다"
2023-04-01 21:56:35,"이미정","# # [쏙쏙 들어오는 함수형 프로그래밍]201~210pg
[요약]
1. straightforward implementation
too much detail code smell
2. abstractive barrier 
hide detail & help us write code at high level
3. minimal interface
4. comfortable layers

Pattern 2: Abstraction Barrier 
hide implementations 
let them think about high levels 
ignoring details is symmetrical 

1. to facilitate changes of implementation
2. to make code easier to write and read
3. to reduce coordination btw teams
4. mentally focus on problem at hand


[발췌]
abstraction is fancy way of saying what details can I ignore? 


[메모]"
2023-04-01 22:26:18,"김채욱","[컴퓨터 네트워킹 하향식 접근_3/31(금) + 4/1(토)]
[내용 요약]
[TCP SA]
정의 : tcp 프로토콜은 selective acknowledgement(SACK) 방식으로 데이터 전송을 합니다.

추가 설명 : 연결 지향형 프로토콜으로, 수신자로 하여금 비연속적인 혹은 순서가 다르게 데이터를 받는걸 허용합니다. 이로써 전송자는마지막으로 순서가 맞은 세그먼트부터 다시 전송하지 않고, 선택적으로 손실된 세그먼트를 보냅니다. 여기서 전제는 송신자와 수신자 모두 SACK extension이 있어야합니다. 추가로 SACK도 각 세그먼트별 일련번호화 슬라이딩 윈도우 방식으로 데이터 전송을 관리합니다.

SR와의 차이점 : 

관련 프로토콜 : SACK는 TCP 프로토콜으로 연결 지향 방식을 적용하는 반면에, SR는 UDP와 같이 비연결형 방식으로 진행합니다.

예시 : TCP는 오직 ACK만을 사용합니다. 그렇다면, 전송자가 [A,B,C,D,E]를 보내서 오직 [A,D,E]만 수신이 된다면, 마지막으로 순서가 맞은 A부터 다시 전송을 해야합니다. 하지만, SACK 익스텐션을 사용하면, 자체 윈도우 슬라이딩이 있어서 분실된 [B,C] 패킷만 전송해도 됩니다.

​

[혼잡 제어와 흐름제어 차이]

설명 :

목적 : 흐름제어는 end-to-end 유저간의 데이터 전송량을 조절해, 버터 오버플로우를 방지하는 반면에, 혼잡제어는 전체적인 네트워크의 상태를 고려합니다.

범위 : 흐름제어는 윈도우 슬라이딩 방식을 사용하기에, 수신자의 윈도우 크기를 고려합니다. 반면 혼잡제어는 slow start, 빠른 재전송 등의 알고리즘을 사용합니다.

흐름제어 변수 : rwnd(receive window buffer) = LastByteRcvd - LastByteRead

LastByteRcvd : 호스트 B 프로세스에 의해 버퍼로부터 읽힌 데이터 스트림의 마지막 바이트 수

LastByteRead : 호스트 B에서 네트워크로부터 도착하여 수신 버퍼에 저장된 데이터 스트림의 마지막 바이트 수

​

[TCP 연결 방식]

정의 : 3 방향 핸드쉐이크 과정을 거친 후 연결을 합니다. 이후 4 방향 핸드쉐이크로 연결을 해제합니다.

연결 : 

SYN : SYN 플래스를 세팅해서 서버에게 연결을 시작합니다. 이때, 일련번호(ISN)에 랜덤 숫자가 같이 들어갑니다.

SYN-ACK : 서버는 SYN와 ACK 플래그를 세팅해서 응답합니다. 이때 서버의 일련번호와 클라이언트의 일련번호 +1을 ack 숫자로 보냅니다.

ACK : 클라이언튼 ACK 플래그와 서버의 일련번호 + 1을 확인 번호로 보냅니다. 이렇게하면 핸드쉐이크가 연결됩니다.

연결 해제 :

FIN : 클라이언트가 연결 해제를 희망시, FIN 플래그를 설정해 보닙니다.

ACK : 서버는 ACK 플래그과 FIN 번호 + 1으로 응답합니다.

FIN : 서버도 FIN 플래그를 설정해 보냅니다.

ACK : 클라이언트는 ACK 플래그과 FIN 번호 + 1으로 응답합니다.

​

[혼잡제어]

정의 : 네트워크의 데이터 스트림이 많아지는 것을 예방하기 위해 데이터 전송되는 양을 조절합니다.

추가 설명 : 혼잡 제어의 주요 목적은 네트워크 상태 관리를 위해 빠른 데이터 전송과 적은 패킷 손실을입니다.

시나리오 : 

2개의 전송자와 하나의 무한 버퍼 라우터 : 동일한 수신자에게 전송한다는 가정에서, 각 전송률은 혼잡제어 알로리즘에 의해 관리됩니다. 여기서 bottleneck은 라우터인데, 2개의 프로세스에서 오는 패킷을 처리해야합니다. 이러면 라우터의 전송률은 R/2이고 버퍼에 패킷이 차게됩니다. 이것을 극한으로 계산한 그래프를 보면 라우터의 패킷 전송률이 0이 됩니다. 

2개의 전송자와 유한 버퍼를 가진 라우터 : 위의 가정과 동일한데, 차이점은 라우터가 유한한 버퍼를 가지기에, 패킷 손실이 발생합니다. 재전송되는 데이터는 전송률에서 제외를 해야함으로 실질직으로 전송되는 값은 R/4가 됩니다. 그 이유는 불필요한 패킷 때문에 R/2이고, 2개의 전송자가 버퍼를 공유하기에 R/4입니다.

4개의 전송자와 유한버퍼를 가지는 라우터, 멀티홉 경로 : 여기서 bottleneck은 수신자 경로의 링크입니다. 다수의 전송자가 하나의 수신자로 데이터 전송시 제한된 링크를 통해 보내지기에 혼잡이 발생합니다.

혼잡위도우 : cwnd, 전송자에서 사용되는 흐름제어, 혼잡제어를 위해 사용됩니다. NCK 데이터의 양을 관리합니다. 네트워크 상태에 따라 전송률을 조절하기 위해 윈도우 크기를 동적으로 조절합니다. 

방법 :

슬로우 스타트 : 초기 tcp 연결 혹은 재전송 타임아웃이 지나면 실행됩니다. 혼잡 윈도우(cwnd)에 작은 값을 설정하면 MSS의 크기가 정해집니다. ACK을 받을 때마다 cwnd를 제곱으로 증가시킵니다. 만약 윈도우 한계치에 도착하거나 패킷이 손실되면 증가를 멈춥니다.

혼잡 회피 : cwnd가 만약 한계치에 도달하면, 혼잡 회피 모드에 돌입합니다. 송신자는 cwnd 증가 폭을 줄임으로써 네트워크 혼잡을 피합니다. 이때 증가량을 (MSS * MSS)/cwnd로 하여서 선형적 증가를 합니다.

빠른 회복 : 패킷 손실시 빠른 회복 단계로 갑니다. 만약 중복되는 ACK을 받을 경우, 타임 아웃을 기다리지 않고 재전송을 합니다. 재전송을 한 후에 전송 한계치와 cwnd 값을 줄입니다. 이후 혼잡회피 단계로 갑니다.
"
2023-04-02 00:49:11,"김형우","[금요일 분량]
https://engineer-diary.tistory.com/174"
2023-04-02 00:49:53,"길인식","[금요일]
[데이터 중심 애플리케이션 설계]
[요약]

파티셔닝 : 데이터넷이 매우 크거나 질의 처리량이 높다면 데이터를 파티션으로 쪼갤필요, 주로 확장성이 주된 이유

핫스팟 : 불균형하게 부하가 높은 파티션

지역색인 : 문서 파티셔닝 색인 - 파티션별로 보조색인이 다를 수 있음 → 스캐터/개더로 읽음

[발췌]

데이터의 정의를 명시하고 데이터의 우선순위와 데이터에 관한 설명을 제공해야 한다. 절차가 아니라 관계를 명시해야 한다. 199p

[메모]

현대 데이터 시스템은 대부분 핫스팟의 작업 부하를 자동으로 보정하지 못함"
2023-04-02 17:18:00,"길인식","[토요일]
[데이터 중심 애플리케이션 설계]
[요약]
파티션 재균형화 : 개수 고정 및 분배, 동적 파티셔닝, 노드비례 파티셔닝
라우팅 결정 : 노드, 라우팅계층, 클라이언트 등 다양, 주키퍼를 이용해서 정보를 알아냄
[발췌]
... 재균형화 과정에서 사람이 개입하는데 좋을 수도 있다. 완전 자동 처리보다는 느릴 수 있지만 운영상 예상치 못한 일을 방지하는데 도움될 수 있다.
[메모]
해시값에 mod n 연산은 잘 분배하지 못한다."
2023-04-02 17:44:31,"소재훈","4월 1일(토) 컴퓨터 네트워킹 하양식 접근 제출입니다.
제출자: 소재훈
7.TCP 혼잡제어
https://geode-drizzle-777.notion.site/7-TCP-d1c0b334e5d34c8a8043fe211f6f5ec7
"
2023-04-02 22:38:00,"김형우","[토요일 분량]
https://engineer-diary.tistory.com/175"
2023-04-02 23:00:28,"강민규","선생님들~ 어떻게 주말은 잘 보내셨나요? 저는 하루 종일 카카오톡 봇 만들기 프로젝트를 진행하다가 주말을 다 써버리고 말았습니다. 그래도 재밌어서 후회는 없습니다. 다음 주도 저희 같이 힘내봅시다. 다음 주는 4주차입니다. 일주일만 하시면 5주차에는 복습 겸 휴식 하실 수 있습니다~"
2023-04-03 01:00:29,"강민규","@박예린 @오홍근 @이강욱 @최창훈  선생님들 내일 아침까지 금요일 토요일 분량 제출해주세요~"
2023-04-03 01:23:39,"최창훈","컴퓨터 네트워킹 하향식 접근(금요일)

https://cautious-ocarina-cca.notion.site/Chapter3-97d035d913c5411c87b1db4660f3130e"
2023-04-03 02:09:11,"오홍근","[쏙쏙 들어오는 함수형 코딩][오홍근][day17-18]
186-210p
<요약>
- 직관적 구현
  - 더 낮은 구체화 수준을 가진 일반적인 함수를 만들자
  - 함수 구현 시 어떤 구체화 단계로 쓸지 결정 -> 어떤 계층에 속할지 알 수 있음
  - 함수를 호출하는 화살표가 다양한 길이를 가지고 있다면 직관적 구현이 되어 있지 않다는 것
- just_in_case 코드는 만들지 말자. 오지 않을 수도 있는 미래를 미리 대비하지 말자.
- 추상화 벽을 사용하면 문제의 구체적인 부분을 무시할 수 있어, 코드의 실수를 줄일 수 있음. "
2023-04-03 03:23:13,"이강욱","https://velog.io/@rivolt0421/Grokking-Simplicity-1718"
2023-04-03 08:56:23,"강민규","여러분 좋은 아침입니다. 오늘 4주차 시작입니다. 벌써 시간이 이렇게 되었다니 믿기지 않네요! 다들 힘냅시다~"
2023-04-03 08:56:27,"강민규","사진"
2023-04-03 08:56:47,"강민규","박예린님을 내보냈습니다."
2023-04-03 12:56:49,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
회차: 18회차

### 자신의 성격의 어두운 면을 인정해라
- 우리는 어린시절, 자연스럽게 가지고 있던 그리고 사회적으로 용인되기 어려운 성격적 특징을 억눌러왔다.
- 이러한 어두운 면을 인정하고 싶지 않거나 확인하고 싶지 않을 것이다.
- 하지만, 당신 성격의 어두운면을 확인하고 인정해야 한다.
- 그리고 어두운 에너지를 생산적인 활동에 투자해라
- 당신의 나약함과 허전함을 공감으로 바꾸고, 공격적 충동을 가치 있는 일이나 업무에 쏟아라
- 당신의 야망과 권력욕을 인정해라"
2023-04-03 22:27:03,"강민규","여러분들 잘지내고 계시나요? 오늘 1.5기도 끝이 났습니다. 여러분들도 이제 곧 절반이 지나네요, 다같이 힘내봅시다! 화이팅"
2023-04-03 22:28:35,"강민규","@최창훈 창훈님 오늘은 지난 주차의 분량을 마무리 짓고 새로운 시작을 해보도록 합시다!"
2023-04-03 22:42:13,"이미정","# # [쏙쏙 들어오는 함수형 프로그래밍]211~220pg
[요약]
Pattern 2: Abstraction Barrier
- ignore details
Pattern 3: Minimal Interface
- where does code for new feature belong? 
part of the barrier:
above the barrier: better
- more straightforward

Pattern3 keep abstraction layer minimal
why?
- more change required when we change implementation
- lower the layer , more likely to contain bugs
- hard to understand 
- means more coordination btw teams
- harder to keep in head 

Pattern 4 Comfortable Layers
consider practical side


[발췌]
If we are comfortable working in the code, we can relax on design. 

[메모]"
2023-04-03 23:14:25,"김효선","4/3 팩트풀니스

https://heady-dinghy-922.notion.site/2023-04-03-160-167p-18aa72323289437392f894615dfd66ac"
2023-04-04 00:08:49,"김채욱","[네트워크 하향식 접근_4/3(월)]
[문제풀이]
1~3)

1-1) Design the simplest possible transport-layer protocol that will get application data to the

desired process at the destination host.

​

문제에서 최대 세그먼트의 크기를 1200바이트로 설정하였기에, mss를 고려해 여러 패킷으로 나눈 후에 헤더와 도착지 주소 및 포트번호를 넣는다. 서버 쪽에서는 해당 세그먼트를 받고 프로세스의 포트번호와 일치하는 곳에 전달한다

​

1-2) Modify this protocol so that it provides a “return address” to the destination process.

​

세그먼트 헤더에 전송/도착 주소와 포트번호를 저장시킨다

​

1-3) In your protocols, does the transport layer “have to do anything” in the core of the

computer network?

​

트랜스포트 계층은 네트워크의 바깥부분, 즉 호스트관련 부분을 담당한다

​

2-1) describe a protocol that the delegates can use to deliver letters from a sending family member to a receiving family member.

​

트랜스포트의 프로토콜은 우체국에서 상자 위에 전송이와 받는이의 주소와 이름을 적는것과 맥락이 비슷하다

​

2-2) In your protocol, does the mail service ever have to open the envelope and examine the

letter in order to provide its service?

​

상자 위에 붙인 스티커만 봐서 주소를 알 수 있다

​

3) Suppose that the TCP segmentstraveling from Host A to Host B have source port number x and destination port number y. What are the source and destination port numbers for the segments traveling from Host B to Host A?

​

전송된거에서 반대로 => 소스 포트 y, 도착 포트 x

​

4) Describe why an application developer might choose to run an application over UDP rather

than TCP.

​

몇몇 어플리케이션은 혼잡제어로 인한 전송률 제한이 방해되기도 한다. 예를들어 비디오 스트림에서는 신뢰성 정보가 불필요하다

​

5) Why is it that voice and video traffic is often sent over TCP rather than UDP in today’s Internet?

​

방화벽은 udp 트래픽을 막도록 설정되어 있기 때문에 이를 통과하기 위해 tcp가 사용된다

​

6) Is it possible for an application to enjoy reliable data transfer even when the application runs

over UDP? If so, how?

​

udp를 사용한다하더라도 애플리케이션에서 신뢰성 정보 전달 기능을 구현할 수 있다

​

7) Will both of these segments be directed to the same socket at Host C? If so, how will the process at Host C know that these two segments originated from two different hosts?

​

2개의 다른 호스트에서 온 패킷도 소켓은 받아들인다, 헤더안에 ip주소로 2개의 패킷을 구별한다

​

8) If they are being passed through different sockets, do both of the sockets have port 80? Discuss and explain.

​

지속가능 연결에서는 개별적인 소켓을 생성한다. 각 소켓에서는 전송/도착지 주소와 포트번호를 저장하고 있다. 고로 2개의 다른 호스트에서 보낸 세그먼트는 각기 다른 소켓으로 전달된다

​

​

3-4)

​

1) In our rdt protocols, why did we need to introduce sequence numbers?

​

순차번호가 있어야만 새로운 패킷인지, 다시 전송한 패킷인지 확인이 가능하다

​

2) In our rdt protocols, why did we need to introduce timers?

​

타이머를 설정하여 패킷이 손실되었는지 확인한다. 타임 아웃이 된다면 재전송을 보낸다

​

3) Suppose that the roundtrip delay between sender and receiver is constant and known to

the sender. Would a timer still be necessary in protocol rdt 3.0 , assuming that packets can

be lost? Explain.

​

비록 rtt를 안다고 하더라도 패킷이 손실되었는지 확인하기 위해서는 타이머가 필요하다. 또한 현실에서는 rtt가 변하기에 타이머가 끝나더라도 전송중인 경우도 존재한다

​

3-1) Have the source send five packets, and then pause the animation before any of the five

packets reach the destination. Then kill the first packet and resume the animation.

Describe what happens.

​

gbn(go-back-n)에서는 패킷이 손실된 시점부터 이후꺼 전부를 재전송한다

​

3-2) Repeat the experiment, but now let the first packet reach the destination and kill the first

acknowledgment. Describe again what happens.

​

ack 패킷 전송이 실패해도 gbn에서는 패킷 재전송이 일어나지 않는다. 대신에 culmulative ack를 사용하기에 그다음 패킷 전송 ack가 도착하면 그 전 것도 도착했다고 간주한다

​

3-3) Finally, try sending six packets. What happens?

​

gbn에서 최대 윈도의 크기 만큼 패킷을 보냈고, ack가 전송이 안되었으니 그 다음 패킷을 전송할 수 없다

​

4) Repeat R12, but now with the Selective Repeat Java applet. How are Selective Repeat and

Go-Back-N different?

​

선택적 재전송 방식은 도착한 패킷은 버퍼에 저장하고 도착하지 않은 패킷에 한해서 재전송을한다. 이후 버퍼에 있는 패킷들을 애플리케이션에 전달한다. 

​

​

3-5)

​

1-1) Host B will not send acknowledgments to Host A because Host B cannot piggyback the acknowledgments on data.

​

false, ack는 데이터와 상관없이 패킷을 받으면 보낸다

​

1-2) The size of the TCP rwnd never changes throughout the duration of the connection.

​

false, 패킷을 전송함에 따라 rwnd는 오른쪽으로 이동한다. 여기서 4가지 단계가 있는데, 패킷을 받고 ack까지 확인된 것은 왼쪽으로 간다

​

1-3) The number of unacknowledged bytes that A sends cannot exceed"
2023-04-04 00:09:35,"강민규","선생님들 오늘 좀 뜸하시네요 ㅎㅎ…"
2023-04-04 00:10:33,"강민규","이모티콘"
2023-04-04 00:11:24,"정소영","자기 전에 독서 업로드 예정입니다 ..! "
2023-04-04 00:17:19,"Seo","4/3 월
https://seoshow.notion.site/DAY18-1296fe88ee83461daa84338b41eb366b"
2023-04-04 00:20:13,"길인식","[월요일]
[데이터 중심 애플리케이션 설계]
[요약]
ACID : atomicity, consistency, isolation, durability

원자성 : 오류가 생겼을때 트랜잭션 abort, 지금까지 실행한 쓰기 취소

일관성 : 애플리케이션의 속성; 항상 진실이어야하는 데이터에 관한 불변식이 있음

격리성 : 동시에 실행되는 트랜잭션은 서로 격리됨, 순차적으로 실행됐을 때의 결과와 동일

지속성 : 커밋 됐다면 모든 데이터는 손실되지 않음

[발췌]
우리는 항상 트랜잭션 없이 코딩하는 것보다 트랜잭션을 과용해서 생기는 성능 문제를 애플리케이션 프로그래머가 처리하게 하는 게 낫다고 생각한다.

[메모]
현실적으로 트랜잭션을 격리할때 직렬성 격리보다는 스냅숏 격리가 적합"
2023-04-04 01:03:59,"영동","함수형코딩 211-220

추가적인 비즈니스 로직은 추상화벽 위에 있는 계층에 구현하면 된다

추상화 벽에 코드가 많을 수록 구현이 변경될때 수정 할 게 많다
추상화벽은 낮은 수준의 코드, 버그가 많을 수도 있다.
낮은 추상화 수준은 이해하기 어렵다.

추상화벽에 코드가 많을 수록 팀간 조율할게 많다
추상화벽에 인터페이스가 많으면 알아야할 것이 많다

상위계층을 많들때 있는 코드로 조합해야한다

"
2023-04-04 01:55:46,"최창훈","컴퓨터 네트워킹 하향식접근 (토, 월)

Chapter3
https://cautious-ocarina-cca.notion.site/Chapter3-97d035d913c5411c87b1db4660f3130e

Chapter4
https://cautious-ocarina-cca.notion.site/Chapter4-6b757bf3fdf14fbb9064d3f8c9c14ce4"
2023-04-04 07:43:12,"강민규","사진"
2023-04-04 07:46:30,"강민규","좋은 아침입니다 여러분~ 잠은 다들 잘주무셨나요? 아직 주 초반인 만큼 하루의 모든 시간을 제대로 살아보고자 노력해봐요! 화이팅~ 여러분들이 있어 저도 이 시간에 일어납니다. 감사해요!"
2023-04-04 07:58:23,"김채욱","혹시 저희 스터디가 언제까지인지 여쭤봐도 될까요"
2023-04-04 08:14:15,"김연정","5.13까지입니다"
2023-04-04 08:19:06,"김채욱","감사합니다!"
2023-04-04 08:57:50,"길인식","[화요일]
[데이터 중심 애플리케이션 설계]
[요약]
트랜잭션 핵심기능 - 오류가 생기면 어보트, 안전하게 재시도
직렬성 - 동시성 없이 하나의 트랜잭션씩 수행, 현실적으로 쉽지않음
커밋 후 읽기 - 기본적 수준의 트랜잭션 격리
스큐 - 핫스팟이 있는 불균형적 작업부하; 시간적인 이상현상
[발췌]
색인 갱신 부분 - ... B트리를 사용하지만 추가전용이며 쓸때 복사되는 변종을 사용한다. 241p
[메모]
발췌부분 때문에 인덱스는 삭제 안된다고 한지 궁금했다
"
2023-04-04 12:55:29,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
회차: 19회차

### 내면의 그림자가 드러나는 순간
- 가끔 우리는 친구, 지인 동료가 평소의 행실과는 모순괴는 행동을 하는 걸 언뜻 본다.
- 이런 순간이 바로 그들의 어두운 면을 엿볼 수 있는 순간이다.
- 그림자는 내면 깊숙이 있지만, 스트레스를 받거나 불안이 자극되면 그림자가 드러난다.
- 그림자가 드러난 모습은 마치, 화난 어린아이처럼 보인다.
- 연기하듯이 과한 표현으로 행동할 때가 있는데, 이는 상대의 시선을 분산시켜 그림자를 감추기 위함이다.

### 그림자의 일곱가지 유형 
1. 터프가이
: 이 유형은 거친 남성성을 강조하여 상대를 겁주려 함
: 하지만, 마음속 깊은 솟에 여린 내면과 정서가 표출될까 두려워함
2. 성인군자
: 이들은 가장 진보적이고 좋은 대의를 지지함
: 사실은 권력이나 관심에 격한 갈증이 있는데 이를 감추기 위한 방편으로 성인군자같은 행동을 함
: 실제로 권력을 가졌을 때 그 그림자가 드러남
3. 수동적 공격성을 가진 매력남녀
: 이 유형은 놀랄만큼 착하고 따뜻함
: 남을 도와주려함
: 그러나 느닷없이 상대롤 비판하거나 뒤에서 험담을 함
4. 광신도
: 이들은 힘주어 이야기하거나 타협을 용서치 않음
: 결정적인 순간에 뜻밖의 실수를 저지르며, 본인의 가치에 의구심을 가지고 있음
: 불필요한 변화를 통해 스스로에게 훼방을 놓음
5. 완고한 이성주의자
: 어떠한 비이성적인 것도 허용하지 않음(가벼운 농담, 의미없는 행동 등)
: 이들은 논쟁이 붙으면 본인의 생각에 지적 무게를 부여하고 심지어 분노함
6. 허영꾼
: 남들과 다르게 보이고 싶은 욕구가 크며 자신이 우월하다고 생각함
: 외모를 많이 강조함
: 삶의 지루하고 싫증나는 부분이 있으면 극도로 불안해함
7. 극단적 사업가
: 이들은 기준이 높고 사소한 것에까지 주의를 기울임
: 좀처럼 남의 말에 귀를 기울이지 않음
: 모든 것을 장악하려함"
2023-04-04 15:45:29,"소재훈","4월 3일,4일(월,화) 컴퓨터 네트워킹 하양식 접근 제출입니다.
제출자: 소재훈
https://geode-drizzle-777.notion.site/1-7522949291b14baabe238ab696a5d860"
2023-04-04 19:13:29,"이강욱","https://velog.io/@rivolt0421/Grokking-Simplicity-1920"
2023-04-04 20:47:35,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]221~232pg

[요약]

Patterns of stratified design 

1. Straightforward implementation
2. Abstraction Barrier
3. Minimal Interface
4. Comfort

the structure of call graph can reveal a lot about our code

how? 

tell us about 3 important nonfunctional requirements:

- maintainability
- testability
- reusability

can figure out what code is easiest to change & know where we need to put the code 

layers at bottom: harder to change, copy-on-write functions that do not need to change

→ we need to focus on testing functions at bottom 

[발췌]

[메모]"
2023-04-04 22:44:40,"김채욱","[컴퓨터 네트워킹 하향식 접근_4/4(화)]
[내용 요약]

[네트워크 계층 주요 기능]
포워딩 : 주로 라우터나 스위치를 통해 데이터 패킷을 하나의 네트워크 인터페이스에서 다른 네트워크로 전송하는 프로세스입니다. 

라우팅 : 네트워크 상에서 최적의 경로를 탐색하기 위한 과정입니다. 다수의 호스트 혹은 네트워크를 통해 탐색합니다. 

​

[포워딩 테이블]

정의 : 라우터와 스위치가 최적의 포워딩 경로를 탐색하기 위한 자료구조입니다.

구성 : 

도작 주소 : 도착지 IP주소입니다.

output interface : 패킷이 전송될 인터페이스입니다.

next-hop address : 다음 네트워크 장치(라우터)의 ip 주소입니다.

추가 정보 : 포워딩 테이블에는 추가 정보를 담을 수 있습니다.경로 metric(cost)와 다른 네트워크 프로토콜 등이 될 수 있습니다.

​

[데이터 평면]

정의 : 네트워크 장치가 데이터 포워딩하는 업무를 맡습니다. 포워딩 테이블을 통해 들어오는 데이터 패킷을 적절한 outgoing interface로 보냅니다. 빠르고 효율적으로 데이터 전송을 하는게 주요 목적입니다.

​

[제어 평면]

정의  : 네트워크 장비의 프로세스의 결정을 맡습니다. 라우팅 알고리즘을 통해 라우팅 정보 계산과 최적의 경로 찾는 등의 업무를 맡습니다. 라우팅 테이블을 최신화하여서 최적의 경로를 확인합니다.

​

[SDN]

정의 : 네트워크를 보다 효율적으로 위해 중앙 관리하는 방법입니다. 제어평면과 데이터 평면을 분리해서 네트워크 관리자가 네트워크 자원을 보다 효율적으로 관리할 수 있습니다. "
2023-04-04 22:56:07,"김효선","4/4 팩트풀니스

https://heady-dinghy-922.notion.site/2023-04-04-168-173p-baad9a3c7cfc48fea2760476f6a8bcd2"
2023-04-04 23:07:54,"강민규","여러분 잘지내고 계신가요? 저는 오늘 3기 모집 전 도서 선정을 하느라 시간을 많이 썼습니다. 좋은 책은 많은데 두꺼운 책이 많질 않아 고민입니다… 도서 선정은 마무리짓질 못하도 제 카트에 사고 싶은 책만 늘어났네요 ㅎㅎ… 여러분들 읽어야할 책이 너무 많습니다! 이번에 읽고 계신 책 포기하시마시고 꼭 다 읽읍시다~~"
2023-04-04 23:08:08,"강민규","사진"
2023-04-04 23:13:04,"강민규","@김민수 @김현진 @김형우 @오홍근 @정소영  여러분들은 오늘 이틀 치 분량으로 해봐요"
2023-04-04 23:13:06,"강민규","~~"
2023-04-04 23:13:22,"김민수","사진"
2023-04-04 23:13:23,"김민수","괜찮습니다 저는 사놓고 반도 겨우 읽은 것 같습니다.. 일단 사세요..."
2023-04-04 23:15:48,"최창훈","와우……."
2023-04-04 23:16:06,"최창훈","책이 진짜 많으시네요"
2023-04-04 23:16:49,"김민수","분명 1년에 몇십권을 버리는데.. 절대 줄어들지 않습니다"
2023-04-04 23:17:55,"강민규","좋은 책장이군요…"
2023-04-04 23:18:56,"영동","와우.."
2023-04-04 23:19:44,"정소영","와,, 벽돌책도 많으시네요,,"
2023-04-04 23:20:33,"김민수","사진 4장"
2023-04-04 23:20:50,"김민수","계획에 깔려있는편..."
2023-04-04 23:21:19,"김연정","와"
2023-04-04 23:21:29,"영동","강연 한번 해주세요"
2023-04-04 23:21:48,"김연정","민수님 초청 강연 열어야겠어요"
2023-04-04 23:21:51,"강민규","강연 한번 해주세요"
2023-04-04 23:23:07,"김민수","사진"
2023-04-04 23:23:16,"김민수","2014년부터 쓴 노트네요,,"
2023-04-04 23:24:00,"김민수","사진"
2023-04-04 23:24:09,"김민수","한 주제당 한권씩 쓰는데 끝이 보이질 않습니다 ㅎㅎㅎ..."
2023-04-04 23:24:43,"김민수","이제 2번째 사진에 있는 칸에 있는 책들 읽을 때 쓰는 노트입니다 ( __)"
2023-04-04 23:25:41,"김민수","https://www.artnstudy.com/n_Lecture/?LessonIdx=jkJin06
강연은 저 대신 전문가의 강연 추천드립니다 ㅎㅎ"
2023-04-04 23:27:05,"김민수","제가 목요일까지 논문주제를 픽스해야해서 교수님께 괴롭힘당하느라 조금 밀렸네요. 아마도 내일 진도 따라잡을 수 있을듯합니다 ( __)"
2023-04-04 23:27:28,"강민규","응원합니다! 감사합니다~"
2023-04-04 23:28:13,"영동","샵검색: #위대한수업"
2023-04-04 23:28:22,"영동","샵검색: #위대한수업"
2023-04-04 23:28:45,"김민수","스터디가 끝나면 본인이 좋아하는 책 소개하는 시간 가져도 재미있을듯하네요~"
2023-04-04 23:29:09,"영동","오 좋아용"
2023-04-04 23:29:21,"영동","이거는 이비에스에서 몇년전부터 하고 있는건데"
2023-04-04 23:29:33,"영동","https://home.ebs.co.kr/greatminds/index"
2023-04-04 23:29:39,"영동","무료로 볼 수 있어여"
2023-04-04 23:29:48,"영동","연사님들 클라스가 개쩔어서"
2023-04-04 23:29:52,"김민수","예전에 음악 듣는 모임에서는 LP바 같은데 빌려서 한사람당 한곡씩 노래를 골라와서 한곡 듣고, 추천의 말 듣고. 반복한 뒤에 A4용지에 곡마다 소감 적어서 공유하고.

음감회라는 이름의 아날로그틱한 모임이 많았는데.. 그런 느낌으로? ㅎㅎㅎ ..."
2023-04-04 23:30:06,"김연정","오~ 위대한 수업 몰랐는데 저도 들어봐야겠어요!!!"
2023-04-04 23:30:08,"영동","주제 정해서 같이 보고 이야기하는것도 좋을거같슴니다"
2023-04-04 23:30:17,"김연정","너무 좋은 것 같아요!"
2023-04-04 23:30:48,"김연정","여러분들 완독자 커뮤니티 들어오시면 다같이 하는 활동으로"
2023-04-04 23:31:05,"김연정","한 번 기획해봐야겠어요👍👍👍"
2023-04-04 23:32:46,"강민규","최고의 대화가 오가는 것을 보니 가슴이 뜨거워집니다"
2023-04-04 23:33:02,"강민규","찬물 좀 마시고 오겠습니다"
2023-04-04 23:33:07,"이강욱","ㅋㅋㅋㅋㅋㅋ"
2023-04-04 23:33:19,"김연정","ㅋㅋㅋㅋㅋㅋㅋㅋㅋ"
2023-04-04 23:33:45,"정소영","오 저도 이거 좋아하는데  ,! ,!! 너무 좋습니당"
2023-04-04 23:34:44,"영동","갑자기 아지트가 갖고 싶어졌습니다"
2023-04-04 23:35:10,"이강욱","저도 맥루언 좋아합니다!! 😊😊 여기서 보니 반갑네요"
2023-04-04 23:35:49,"김민수","태어나서 처음봤어요 ㅋㅋ"
2023-04-04 23:36:04,"김민수","대학때 공부로 접해서 신물난다는 사람은 몇번 봤습니다"
2023-04-04 23:36:22,"이강욱","저도 대학때 접해서 벤야민이랑 맥루언"
2023-04-04 23:36:34,"이강욱","되게 좋아하다가 요즘은 또 시들하네요 ㅋㅋ"
2023-04-04 23:37:18,"김민수","그렇게 돌고 돌아서 몇년에 한번씩 N회독하고 조금씩 체득하는것이지요 뭐,,"
2023-04-04 23:37:48,"이강욱","그런거 같네요 ㅎㅎ"
2023-04-05 00:05:44,"최창훈","컴퓨터 네트워킹 하향식접근(화요일)

https://cautious-ocarina-cca.notion.site/Chapter4-6b757bf3fdf14fbb9064d3f8c9c14ce4"
2023-04-05 00:39:49,"영동","함수형코딩 221~232

호출 그래프는 유지보수성, 테스트성, 재사용성을 평가하기 좋다. 

그래프의 가장 위에 있는 함수가 고치기 쉽고

그래프의 가장 아래에 있는 함수를 테스트 해야 다음부터 그 함수를 확실히 믿고 쓸 수 있다. 

그래프의 아래에 있는 코드들이 재사용하기 좋다. 코드를 재사용하면 시간과 비용을 줄일 수 있다.

비즈니스 요구를 해결하기 충분히 편리한 코드인가는 직관을 따라야 한다."
2023-04-05 01:13:23,"정소영","월 (185-189)
넛지 파이널 에디션

•선택 설계 시스템과 인센티브 
- 어떤 제품의 가격이 오르면 생산자는 생산량을 믈림. 소비자는 그럼 예전만큼 그 제품을 구매하지 않음. -> 시스템 설계시 인센티브를 고려해야 할 것
- 고려하는 방법 중 다음 문제로 선택 설계 출발점을 삼을 것 
1. 누가 선택하는가? 
2. 누가 사용하는가?
3. 누가 지불하는가?
4. 누가 이득을 얻는가?

- 인센티브 표준 분석에 대해 가장 중요한 것은 “현저성”
예) 중고차 구매와 택시를 잦게 이용하기 중 선택 : 자동차를 소유할 때 지불하는 기회비용 및 감가상각 비용처럼 덜 두드러져 보이는 여러 측면은 과소평가 // 택시 이용시 보이는 (미터기) 비용은 과대 평가"
2023-04-05 01:13:32,"정소영","화 (190-199)
넛지 파이널 에디션

6장 선택설계자의 도구들 

•단순한 심리적 회계 원칙 : 각각의 이득을 구분한다는 것
예 ( 판매 상품을 모두 설명하지 않고, 따로 떼어놓았다가 특별상황에서만 제공하는 특별한 지위를 부여 - 지금 당장 전화하는 고객에게만 제공하는 ...)

• 큐레이션 : 약자에게 더욱 필요한 선택설계
- 소규모 서점(큐레이션, 맞춤형 오프라인 경험) 아마존(탐색 도구)
- 좋은 큐레이션은 나쁜 선택지를 없애는 것과 동시에 새로운 선택지를 도입한다. 
 - 소수의 선택지 혹은 좋은 기본 설정

• 재미있게 만들기
- 어떤 활동을 놀이처럼 보이기 하거나, 호기심/흥분/기대를 유발할 때 기꺼이 하겠다고 달려듬 > 하길 바라는 바람직한 행동을 재미있어 보이도록 만들 것 
- “일은 신체가 의무적으로 해야 하는 것이고, 놀니는 신체가 강요받지 않는 행위”
- 예) 추첨, 복권도 같은 재미요소

- 복권
> 당첨여부를 알 수 있을 때 더 매력적으로 여기는 경향도 있음
> 공짜 상품은 현금보다 더 나은 유인책이 될 후도. “죄책감 없는 즐거움”이라는 희귀한 보상을 주기에.

- 때로는 강제적인 요소에서도 재미를 넣어 미소짓거나 웃게 만드는 것. 행동을 넛지하면서 거부감을 낮추기도. (예: 코로나 이동금지에서 이빨요정은 제외..)"
2023-04-05 01:13:45,"김현진","데이터중심 애플리케이션 설계

월요일
https://ongoingjin.notion.site/W04-1-221-232p-b76f8e59c42f42bcba781c2cfd10e6ff

화요일
https://ongoingjin.notion.site/W04-2-233-241p-b9dd9d75f3b14852ab684594a032e281"
2023-04-05 01:36:02,"오홍근","[쏙쏙 들어오는 함수형 코딩][오홍근][day19-20]
211-232p
<요약>
- 작은 인터페이스 -> 상위 계층에 어떤 함수를 만들 때 가능한 현재 계층에 있는 함수로 구현하라
- 편리한 계층 -> 구체적인 것을 너무 많이 알아야 하거나, 코드가 지저분하다면 다시 패턴을 적용하라
- 호출 그래프는 비기능적 세 가지 요구사항을 보여준다
  - 유지보수성
  - 테스트성
  - 재사용성"
2023-04-05 07:03:19,"김형우","삭제된 메시지입니다."
2023-04-05 07:03:38,"김형우","[월요일]
https://engineer-diary.tistory.com/176"
2023-04-05 07:46:05,"강민규","@김민수 민수님 월요일 분량을 제출을 아직 안하신 것 같네요~제가 놓쳤나요?"
2023-04-05 07:51:22,"김민수","사무실 pc 메모장에 써놓고 깜빡했나보네요.. 금방 제출하겠습니다"
2023-04-05 07:53:20,"강민규","이모티콘"
2023-04-05 07:53:33,"강민규","사진"
2023-04-05 07:54:44,"강민규","여러분 오늘 즐거운 수요일입니다. 즐겁다고 생각하면 즐거워집니다! 오늘 비도 오지만 즐겨봅시다~"
2023-04-05 08:00:32,"김현진","데이터중심 애플리케이션 설계

수요일
https://ongoingjin.notion.site/W04-3-242-245p-877f36609fd64a36a31eb389a759c63f"
2023-04-05 08:06:10,"김민수","[월요일] 바바라 민토 논리의 기술
2부 논리적으로 생각하기 - 6장 논리적 순서 정하기 - 정도의 순서

[요약]
정도의 순서(중요도의 순서)는 공통적 특징을 가진 사물을 분류하여 그루핑을 할 때 사용한다.
분류는 뇌가 분류된 것과 분류되지 않은것으로 분리하게 한다.
1. 분류 이전에 공통적 특정을 구체적으로 정의
2. 공통적인 특징을 포함했는지 여부를 확인
3. 공통적 특징을 가진 정도에 따른 배열
   
[발췌]
""때에 따라서는 감정적인 효과를 높이기 위해 순서를 바꾸는 쪽이 더욱 합리적일 수도 있다. 그러나 대부분 정도가 큰 것부터 배열한다.""
배열의 효과가 근거의 구조가 될 수 있다.

[메모]
감정적인 효과와 논리적인 배열 중 무엇이 필요한지에 대한 고민이 필요하다."
2023-04-05 08:14:36,"김민수","[화요일] 바바라 민토 논리의 기술
2부 논리적으로 생각하기 - 6장 논리적 순서 정하기 - 정도의 순서

[요약]
분류 그루핑의 근거를 인식하면 전달하려는 메세지의 근거를 정확하게 파악할 수 있다.
분류의 기준을 잡은 뒤 해당 기준으로 내용을 분류하면 중요한 내용이 보다 정확하게 보인다.
또한 이를 통하여 현황, 당위, 해결책을 나열할 수 있다.

[발췌]
""귀납적 그루핑을 점검할 때는 항상 리스트를 위에서 아래로 신속하게 훑어보는 일부터 해야 한다.""
리스트를 그루핑할 기준을 잡기 위함

[메모]
통상 그루핑과 논리구조 생성을 별도의 작업으로 생각할 수 있는데 이를 하나의 작업으로 합치는 예시들이 인상적이다."
2023-04-05 08:23:44,"김민수","[수요일] 바바라 민토 논리의 기술
2부 논리적으로 생각하기 - 7장 그룹 내 생각 요약하기 - 내용이 없는 공허한 주장 피하기

[요약]
어떤 계층에 있는 메시지이든 하위 계층의 메시지를 요약해야 한다.
왜냐하면 상위 계층의 메시지는 하위 계층에서 이끌어낸 것이기 때문이다.
그루핑의 근거가 되는 생각은 중복과 누락을 잘 점검해야 한다. 그 다음 자신이 강조하고자 하는 핵심 포인트의 종류를 생각한다.
귀납적 그루핑을 요약하는 것은 일련의 행동 결과를 기술하거나 일련의 생각을 통해 추측한 결론을 이끌어내는 것 가운데 하나여야 다.
   
[발췌]
""그루핑된 생각을 요약하는 것은 곧 사고 프로세스를 완성하는 최종적인 절차라고 할 수 있다.""
연역적 그루핑 : 상위의 요약 메시지를 쉽게 이끌어낼 수 있음
귀납적 그룹핑 : 상하위메시지의 연관성이 무엇인지 기술해야 함

[메모]
7장의 서두에서 피라미드 원칙을 다시 언급하는 부분은 책에서 전파하는 것을 잘 준수하고 있다고 생각했다."
2023-04-05 12:35:58,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
회차: 20회차

### 내면의 그림자를 바로 봐라
- 자신의 단점과 실수를 인정하는 사람은, 진정성있게 느껴진다.
- 이처럼 그림자를 드러내야할 때가 있는데, 그러기 위해서 그림자를 바로봐야한다.
1. 그림자를 봐라
- 그림자란, 우리가 부정하고 억압하는 무언가이다.
- 그림자를 보는 건 어렵지만, 그림자를 확인하는 방법이 있다.
- 바로 우리의 그림자 형태가, 타인에게서 드러날 때 혐오감으로 나타나기 때문이다.
2. 그림자를 포용해라
- 자신의 그림자 표면만을 보지 말고, 부정적인 에너지를 긍정적인 방향으로 사용해라
- 한 예시로 예민함은 상대의 기분을 파악하고 공감하는 방향으로 발휘될 수 있다.
3. 그림자를 보여줘라
- 우리는 사회적으로 어두운 면을 억누르며 산다.
- 하지만, 어두운 면이 능력 및 창의력과 불가분하게 얽어 있는 경우가 있다.
- 때로는 그림자를 드러내야할 때가 있다."
2023-04-05 17:55:45,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]233~241pg

[요약]

10: First-class functions

- Discover the power of first-class values
- Learn how to make first-class function versions of syntax
- Learn to wrap syntax using higher-order functions
- Apply two refactoring that use first-class and higher-order functions

There are very similar function implementations

The name of the function indicates the difference in implementation

How to turn implicit argument into an actual argument?

- Identify the implicit argument in the name of the function
- Add explicit argument
- Use new argument in body in place of hard-coded value
- Update the calling code

Replace body with callback

1. Identify the before, body and after sections
2. Extract the whole thing into a function
3. Extract the body section into a function passed as an argument to that function
- *not first-class in javascript:
- arithmetic operators
- for loops
- If statements
- Try/catch blocks

Compile-time checks: involves a static type system

- Typescript

Java: enum

Haskell: discriminated union

[발췌]

Instead of passing the field name as an argument, it’s part of the function name - code smell

[메모]"
2023-04-05 23:23:35,"강민규","여러분 다들 잘지내고 계신지요? 이제 4주차도 중간을 넘어가네요! 다음주면 복습 주입니다. 강제적인 활동이 없어서 쉬시려면 조금 쉬실 수도 있는 그런 한 주지요"
2023-04-05 23:24:27,"강민규","저도 1기에 참여했었는데 쉬는건 정말 좋더라고요… 꿀맛 휴식을 즐기기위해 이번 주는 달려봅시다! 화이팅~"
2023-04-05 23:31:33,"정소영","이모티콘"
2023-04-05 23:32:35,"강민규","아주 다들 힘겹게 이어나가고 계신 것 같군요! 
@김형우 @Seo 여러분은 오늘 이틀치 분량으로 제출해보도록 합시다!!"
2023-04-05 23:32:42,"강민규","이모티콘"
2023-04-06 00:08:23,"길인식","[수요일]
[데이터 중심 애플리케이션 설계]
[요약]

원자적 쓰기 연산 : 데이터베이스에서 제공, 동시성 안전, 잠금 획득, 커서 안정성

명시적 잠금 : 애플리케이션에서 잠글 수 있음

갱신 손실 자동 감지 : 병렬 실행을 허용하고, 트랜잭션 관리자가 감지하면 어보트, 스냅숏 격리와 결합해 효율적

compare-and-set : 마지막으로 읽은 후로 변경되지 않았을 때만 갱신을 허용

[발췌]

불행하게도 객체 관계형 매핑 프레임워크를 사용하면 뜻하지 않게 데이터베이스가 제공하는원자적 연산을 사용하는 대신 불안전한 read-modify-write 주기를 실행하는 코드를 작성하기 쉽다 243p"
2023-04-06 00:45:32,"Seo","4/4 화
https://seoshow.notion.site/DAY19-ad02e518b1ef42719bab8e501a8f6f38
4/5 수
https://seoshow.notion.site/DAY20-aaec0d280e614ad095d4b568f3317bf9"
2023-04-06 00:52:12,"오홍근","[쏙쏙 들어오는 함수형 코딩][오홍근][day21]
233-241p
<요약>
- first-class로 만드는 것이 중요하다
  - 일급 값이란 무엇인가?
    (일급 값으로 할 수 있는 것으로 일급을 정의)
    - 변수에 할당
    - 함수의 인자로 넘기기
    - 함수의 리턴값으로 받기
    - 배열이나 객체에 담기
- 값을 명시적으로 전달하지 않고 함수명의 일부(암묵적 인자: implicit argument)로 전달
  -> 함수명은 일급이 아니다. 함수명의 일부를 인자로 바꾸자(드러내기: express)"
2023-04-06 02:00:26,"김형우","[화요일]
https://engineer-diary.tistory.com/177"
2023-04-06 06:22:27,"김채욱","[컴퓨터 네트워킹 하향식 접근_(4/5(수)]
[내용 요약]

[네트워크 서비스 모델]

정의 : 컴퓨터 네트워크 안에서 각 노드들이 통신하기 위한 규칙 혹은 프로토콜을 의미합니다.

서비스들 : 

보장된 전달

지연 제한 이내의 보장된 전달

최소 대역폭 보장

보안

* 최선형 서비스 : 데이터 패킷 전송에 있어서 완전한 신뢰성, 성능을 보여주지 못하지만, 네트워크가 ""최선""을 다해 패킷을 전송하기에 '충분히' 좋습니다. 

​

[라우터 구조]

설명 : 네트워크 장치로 다른 네트워크로 데이터 패킷을 전달하는 역할을 합니다.

구조 :

입력 포트 : 물리적 인터페이스를 의미합니다. 다양한 네트워크에서 오는 데이터 패킷의 출입구입니다. 물리 계층의 프로세스(시그널 감지, bit 동기화)와 패킷 버퍼 기능을 제공합니다.

스위치 구조 : 입력 포트와 출력 포트를 연결하는 역할을 합니다. 

출력 포트 : 물리적 출구로 다음 도착지로 데이터 패킷을 전송합니다. 버퍼 공간이 있으며 다양한 스케줄링 기법으로 효율적으로 전송합니다.

라우팅 프로세서 : 제어 평면에서 라우팅 기능을 합니다. 라우팅 테이블을 관리하고 라우팅 관련 프로토콜을 맡아 효율적으로 데이터 패킷 전송 루트를 찾습니다.

* 데이터 평면은 나노초(ns) 단위로 동작하는 반면에, 라우팅 프로토콜은 밀리촌(ms)가 걸립니다.

​

[입력 포트 프로세싱]

설명 : 라우터의 입력 포트에 데이터 패킷이 도착하면, 처리되는 tasks들을 칭합니다. 데이터 패킷 처리 및 전송을 합니다.

과정 : 

물리 계층 프로세싱 : 데이터 패킷 스트림을 라우터에서 처리가능하도록 전기 시그널을 감지해 bit 동기화를 합니다. 

데이터 링크 프로세싱 : 입력 포트에서 데이터 링크 헤더(source, MAC주소)를 처리합니다. 데이터 오류 및 필터링 과정을 거칩니다. 

버퍼링 : 라우터가 다른 업무로 바쁘거나, 출력포트가 다 찼다면,  일시적으로 들어온 패킷을 입력 포트에 저장합니다.  

라우팅 테이블 참고 : 패킷의 도착지 IP 주소를 라우팅 테이블에서 찾아 적절한 출력 포트로 포워딩합니다. 이때 최장 프리픽스 매칭 규칙을 사용합니다.

패킷 포워딩 : 출력 포트가 전해지면, 출력 포트로 패킷을 포워딩합니다.

ACL & QoS : access control list, quality of service, 몇몇 라우터는 입력 포트에서  접근 제어와 패킷 품질 관리를 합니다. source와 ip 주소를 참조해 우선순위 혹은 필터링 기능을 제공합니다.

최장 프리픽스 : 라우팅 규칙으로 라우팅 테이블 엔트리에서 가장 정확 혹은 길게 매칭되는 ip 주소의 prefix를 선택해 최적의 경로를 선정해 데이터 패킷을 전송합니다.

​

[변환기]

설명 : 스위치 구조는 데이터 패킷을 입력 포트에서 출력 포트로 전송합니다.

방법 : 

메모리 기반 스위칭 : 공유 메모리를 통해서 특정 메모리에 전송할 데이터를 저장 후 포워딩합니다. 간단하고 효율적인 방법이지만, large-scale 네트워크에서는 확장성과 효율성면에서는 한계가 있습니다.

버스 기반 스위칭 : 하나의 공유된 버스가 입력 포트와 출력 포트에 모두 연결되어 있습니다. 공유 버스에 데이터 패킷을 복사하면 이를 출력 포트에 전송합니다. 하지만 확장성의 문제와 bus가 성능의 bottleneck이 됩니다.

interconnection network switching 혹은 크로스바 : 입력 포트와 출력 포트가 여러 루트로 연결되어 있습니다. 각각의 입력포트는 출력포트와 연결되어 있기 때문에 데이터 패킷을 직접 전송을합니다. 구현과 비용의 문제가 있지만 성능과 확장성면에서 적절합니다.

​

[라우터 큐잉]

설명 : 데이터 패킷 관리를 위해 임시 저장한후 처리합니다. 혼잡 상황에 대비해 큐잉과 다양한 스케줄링 방법이 있습니다.

큐잉 : 

입력 큐잉 : 입력 포트에서 들어오는 패킷을 혼잡 상황시 패킷 손실을 방지하기 위해 버퍼링합니다. 하지만 HOL(head-of-line) 블로킹와 같이 앞단의 패킷이 출력 포트를 기다리면서 발생하는 블로킹 현상이 발생합니다.

출력 큐잉 : 다음 도착지로 전송하기 전에 출력 포트에서 버퍼링합니다. 출력 포트가 처리하는게 들어오는 패킷보다 적을 시 버퍼링이 됩니다. 

​

[패킷 스케줄링]

설명 : 출력 포트에서 다음 도착지로 패킷을 전송시, 다양한 스케줄링 알고리즘을 도입할 수 있습니다.

방법 :

FIFO : 가장 간단한 알고리즘으로, 들어온 순서에 따라 전송합니다. 우선순위가 없어 네트워크 QoS 기능등이 무시 될 수 있습니다.

우선순위 큐잉 : 우선순위 기반으로 패킷을 정해 전송합니다. 다만 우선순위가 낮은 패킷은 기아 현상이 나타납니다.

라운드로빈 : 출력 큐를 다양해, 각 큐별로 돌아가면서 전송합니다. 각 패킷은 동등하게 전송될 기회가 있습니다. 다만 QoS와 같이 데이터 품질을 보장하지 않습니다.

WFQ : weighted fair queueing, 라운드 로빈과 우선위를 합쳐서, 큐에 우선순위를 두어서 라운드로빈을 합니다. 이로써 QoS 기능을 보장이 가능합니다."
2023-04-06 08:48:39,"김민수","[목요일] 바바라 민토 논리의 기술
2부 논리적으로 생각하기 - 7장 그룹 내 생각 요약하기 - 행동 결과 기술하기 

[요약]
비즈니스 문서의 대다수는 조치, 제안 등의 행동에 대한 기술이다.
1. 구체적인 말로 표현한다.
2. 그루핑은 명확한 인과관계에 따라야 한다.
3. 각 그룹의 단계는 5개 이내로 제한한다.
4. 이련의 행동을 통해 직접 얻을 수 있는 것을 결과에 기술한다.

[발췌]
""그루핑에 빠진 것이 있는지 보려면 결과가 충분히 구체적으로 표현되어 초종적으로 얻을 수 있는 것이 머릿속에 그려져 있는지 확인해야 한다.""
구체적으로 표현해야 하위 단계의 적합성을 판단할 수 있다.

[메모]
책의 초반부에서 언급된 피라미드 구조가 본격적으로 구성되는 단계이다."
2023-04-06 09:06:27,"김효선","4/5 팩트풀니스

https://heady-dinghy-922.notion.site/2023-04-05-174-181p-d56c1c20b2344eb8a9458438c94a3678"
2023-04-06 09:08:44,"강민규","안녕하새요 여러분 좋은 아침입니다. 오늘도 날씨가 쌀쌀하니 감기 주의해주세요!"
2023-04-06 09:10:58,"강민규","사진"
2023-04-06 11:37:00,"영동","함수형코딩  233~252 수, 목 분량

사용되는 변수의 형태를 함수이름에 직접적으로 명시하면 그건 냄새나는 코드
유사한 형태가 반복된다.

이런 냄새나는 코드를 바꿀 수 있는 두가지 방법이 있다.

1. 암묵적인 인자 드러내기 
2. 함수 본문을 콜백으로 바꾸기


- 암묵적인 인자 드러내기

setPriceByName(cart, name, price) ->SetFieldByName(cart, name, field, value) : 함수 명에 적혀있던걸 인자로 변경하고, 값을 전달한다

일급값 : 다양한 위치에 다양한 목적으로 쓰일 수 있는 것을 말한다.

일반적으로 데이터 형식은 일급이다. 연산자들은 일급이 아님. 다양한 곳에 쓸 수 없어서 ( 연산자를 변수에 할당할 수 없다, 객체의 값으로 넣을 수 없다 등등..)

* 함수형 프로그래밍에서 중요한 것은 일급이 아닌것을 일급으로 바꾸는 방법을 아는 것이다.*

연산자를 함수로 바꾸면 된다. 

+ => function plus = (a,b) => (a+b)


일급 함수를 인자로 받는 ""함수""를 만들어서 사용한다 : 고차함수"
2023-04-06 17:05:36,"소재훈","4월 5일,6일(수,목) 컴퓨터 네트워킹 하양식 접근 제출입니다.
제출자: 소재훈

2. 라우터 내부에는 무엇이 있을까?
https://geode-drizzle-777.notion.site/2-8b044defd86e41dfb1fb717b71d61bc8

3.인터넷 프로토콜(IP) IPv4, 주소지정, IPv6
https://geode-drizzle-777.notion.site/3-IP-IPv4-IPv6-82047808815c4933a477a8a3762312e1"
2023-04-06 17:48:24,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]242 ~ 252pg

First-class fields breaking abstraction barrier?

- No still can support the names we guarantee, can just swap them out

Data orientation: style of programming that uses generic data structures to represent facts about events and entities

Static versus dynamic typing

Static: check types at compile time

Dynamic: run-time checks

Functions are first-class values in JS

For loops?

Higher-order functions take other functions as arguments

- > replace body with callback

[발췌]

You should just be aware that dynamic typing did not crate this problem and static typing doesn’t make it go away. We’re seeing one downside of data: it requires interpretation"
2023-04-06 19:36:17,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
회차: 21회차

### 사람은 누구나 시기심을 가진다.
- 우리는 내가 중요하게 생각하는 영역이 상대보다 열등하다고 생각하면 시기심을 느낀다.
- 시기심은 다른 감정보다 숨기기 쉽기 때문에 더 까다롭다.
- 상대의 시기심으로 인해 우리는 알게 모르게 피해나 손해를 보고 있을 것이다.
- 이러한 시기심을 알기 위해선, 상대가 그런 행동을 하게 된 동기를 분석해야한다.

### 수동적, 능동적 시기심
- 약간의 조롱, 통명스러운 말투과 같은 수동적 시기심은 경우, 사회생활을 하면 자연스레 발생하기에 수동적 시기심은 가볍게 넘어가라
- 그러나 수동적 시기심에 과한 열등감이 더해지면 능등적 시기심이 된다.
- 능동적 시기심은 상대에게 해를 줄 수 있기에, 우리는 능동적 시기심을 파악해야한다.
- 그리고 시기심을 되도록 이면 피하는 게 좋다."
2023-04-06 21:31:27,"김효선","4/6 팩트풀니스

https://www.notion.so/2023-04-06-182-190p-8b108ba1ae8c4aac9552da876ab62c6f?pvs=4"
2023-04-06 22:40:14,"강민규","여러분 퇴근 다들 하셨나요? 집에 오자마자 놀기 시작하면 나중에 마음 다잡기가 참 힘들더라고요, 지치더라도 하고자 한 일을 다 마치고 쉬시면 뿌듯하실겁니다! 화이팅입니다"
2023-04-06 22:43:04,"김민수","사진"
2023-04-06 22:43:18,"김민수","저는 오늘 대학원 끝나구 목표했던 사진보정을 끝냈네요"
2023-04-06 22:43:28,"김민수","편안한밤 보내세요~"
2023-04-06 23:19:05,"김연정","와우"
2023-04-06 23:19:24,"김연정","휴대폰으로 찍으신건가요"
2023-04-07 00:10:49,"강민규","@김형우 @이강욱 @정소영 @최창훈 여러분~ 책 읽고계신가요? 오늘 꼭 해주세요! 아직 모르시는 분도 계시겠지만 8시에 확인했을 때 이틀 연속 결석이신 분들에게는 개인적으로 연락을 드립니다. 굉장히 어색한 상황이니까 가급적 꼭 제출해주시길 바랍니다!"
2023-04-07 01:47:48,"김형우","[수요일]
https://engineer-diary.tistory.com/178"
2023-04-07 02:06:43,"이강욱","https://velog.io/@rivolt0421/Grokking-Simplicity-2122"
2023-04-07 02:25:32,"최창훈","네트워킹 하향식접근 (수요일)

https://cautious-ocarina-cca.notion.site/Chapter4-6b757bf3fdf14fbb9064d3f8c9c14ce4"
2023-04-07 02:44:22,"정소영","수 (200-208)
넛지 파이널 에디션

7장 스마트 공개

우리는 선택 설계의 한 측면을 개선함으로써 모근 것을 할 수 있다. 그 측면은 정보를 수집하는 방식과 이 정보를 소비자가 활용하는 방식

•표준화된 단위와 현명한 선택
- 표준화된 측정 단위를 마련하는 것 : 시장경제가 출발하는 데 필요한 것 
- 미리 전해진 규정을 따르게 할 때 소비자는 수많은 선택지를 쉽게 비교, 그 가운데 하나를 선택할 수 있음 

•최신 기술을 활용한 스마트 공개
- 작은 글자 부분. (동의서의 작은 글자같은)
- 의무적으로 알려야 하지만 꼼꼼하게 읽지 않았으면 하는. 
- 정보를 공개할 지 말 지 , 한다면 어떤 방식으로 공개할 것인가 문제를 잘 생각해야 할 것 "
2023-04-07 02:44:32,"정소영","목 (209-221)
넛지 파이널 에디션

7장 스마트 공개

•각각의 정보를 최대한 활용하라
- 알고리즘 
- 넷플릭스 : 과거에 했던 행동에 관한 자료. 단순 추천이 아닌 고객의 선호도에 맞는 추천, 유도

8장 #슬러지

좋은 선택 설계의 가장 기본적인 원리 “쉽게 만들어라” 
몇몇 행동을 하지 않게 만들고 싶다면, 어렵게 장벽을 세우면 된다.

예) 흡연 자체를 금지하지 않음. 흡연을 어렵게 만드는 조치를 취한다. 식당에서 흡연안됨.

•슬러지 : 사람들이 원하는 바람직한 결과를 얻기 어렵게 만드는 선택 설계의 어떤 측면

- 의도적으로 슬러지를 끼워 넣어 목표 달성 과정이 매끄럽지 않도록 마찰을 일으킴
예) 회원 탈퇴 구조, 구독 취소를 어렵게."
2023-04-07 06:58:44,"김민수","전문가용 카메라입니당 ㅎㅎㅎ"
2023-04-07 07:40:25,"길인식","[목요일]
[데이터 중심 애플리케이션 설계]
[요약]
쓰기 스큐: 두 트랜잭션이 두 개의 다른 객체 갱신, 더 엄격히 격리 필요
팬텀 : 어떤 트랜잭션 실행한 쓰기가 다른 트랜잭션 검색 질의 결과 바꿈
[발췌]
직렬성 격리 수준을 사용할 수 없다면 트랜잭션이 의존하는 로우를 명시적으로 잠그는것이 최선책이다. 248p
[메모]
Typeorm serializable이 스큐나 팬텀을 보장한다 했는데 이해하게 되었다."
2023-04-07 08:02:09,"강민규","사진"
2023-04-07 08:04:40,"강민규","여러분 오늘은 즐거운 금요일입니다~ 몇일 비오더니 날씨도 상쾌하네요! 다들 화이팅입니다~~"
2023-04-07 08:05:26,"김민수","[금요일] 바바라 민토 논리의 기술
2부 논리적으로 생각하기 - 7장 그룹 내 생각 요약하기 - 행동 결과 기술하기 

[요약]
행동을 고려한 생각은 최종 결과를 알 수 있도록 기술한다.
행동은 원인이 될 수도 있고 역할이 될 수 있음을 염두해야 한다.
최종 결과를 표현하는 말은 생각을 발전시키는 데 매우 중요하다.
행동을 질문 형식으로 기술하더라도 이미지화에는 도움이 되지 않는다.

[발췌]
""행동 생각을 기술할 때는 실제로 행동하는 자신의 모습을 이미지화해본다. 그러고 나서 그 행동이 끝난 시점에서 얻을 수 있는 최종 결과나 혹은 얻게 될 것이 무엇인가 하는 관점에서 행동 조치를 말로 표현한다.""
생각을 기술화하는 방법에 대한 제언

[메모]
행동 생각이라는 표현의 원문이 무엇인지 궁금하다. 번역이 약간 어색한 것 같다."
2023-04-07 12:42:47,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]253 ~ 266pg

[요약]

attributes of implicit argument in function name smell:

- similar implementations
- difference cited in function name

Identify the before, body, and after sections

Extract the whole thing into a function

Extract the body section into a function passed as an argument to that function 

handler function: the function you are passing the callback to 

3ways to define functions:

1. globally defined
2. locally defined
3. defined inline: define a function right where it is being used, don’t assign the function to a variable, so ti doesn’t have a name(anonymous function) 

[발췌]

[메모]"
2023-04-07 19:49:14,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
회차: 22회차

### 시기심의 신호
1. 미세한 표정
- 시기심은 첫인상에서 많이 파악할 수 있는데 얼굴에서 잘 드러난다.
- 입가는 내려가고 코는 비웃듯이 올라가며 턱을 내미는 경우가 있다.
- 종종 시기하는 사람 쪽으로 갑자기 고개를 돌리면, 우연히 이런 표정을 볼 수 있다.
2. 독설 같은 칭찬
- 헷갈리고 모순적인 칭찬을 한다.
- 당신이 무언가 성공하면, 시기심을 가진 사람은 그 일을 기뻐하지 않을 법한 사람을 언급한다.
3. 험담
- 험담은 시기심을 숨기기 위한 흔히 사용된다.
- 험담을 할 때, 눈이 반짝이고 목소리에 생기가 돈다.
- 험담을 즐겨하는 사람은 믿을 만한 친구가 되기 어렵다.
4. 밀고 당기기
- 시기심을 가진 사람은 상대애게 상처를 입힐 방법으로 우정이나 친밀감을 이용한다.
- 당신과 가까운 관계가 되어 당신에 대한 자료를 수집하고 약점을 찾아낸다.
- 그리고 그 약점을 이용해 비판을 한다.

### 시기심을 가진 유형 
1. 모두까지 인형
- 이들은 그 누구도 인정하거나 높이 평가하지 않는다.
- 남을 잘 깎아내리지만 자신을 희생시키는 농담은 좀처럼 하지 않는다.
- 이들의 주된 목표는 모든 사람을 자신과 같은 평범한 수준으로 끌어내리는 것이다.
2. 자기도취형 게으름뱅이
- 자신에게는 관심을 얻고 많은 보상을 받는 게 당연하다고 생각한다.(그런데 그 만한 노력도 하지 않음)
- 직장에서 성과가 아닌 본인의 매력, 사내 정치로 지위를 유지하는 사람을 경계해라
3. 지위 집착
- 지위가 자신의 가치를 결정하는 유형이다.
- 비슷한 형편이나 동급 직장동료가 있다면, 뒤에세 비밀스럽게 공격하여 상대의 위치를 손상시킨다.
4. 껌딱지
- 이미 성공하거나 힘을 가진 사람에게 집착한다.
- 이들은 더 많이 가진 사람에게 상처를 입히고 그들을 망치는데 만족감을 느낀다.
- 만약 당신의 삶에 너무 붙으려고 애쓰는 사람이 있다면 경계해라
5. 초조한 상사
- 자기 자신을 믿지 못하고 높은 위치에 올라가면 불안감을 느끼는 유형이다.
- 이들은 나보다 더 많은 재능을 갖고 있는 사람, 심지어 더 낮은 재능을 가진 사람에게까지도 질시의 눈으로 바라본다."
2023-04-07 22:37:24,"김효선","4/7 팩트풀니스

https://www.notion.so/2023-04-07-191-195p-c67f4704c06f4200a627ed1c5231c040?pvs=4"
2023-04-07 22:50:23,"강민규","여러분 즐거운 금요일 보내고 계신가요?"
2023-04-07 22:51:10,"이강욱","네..."
2023-04-07 22:51:25,"정소영","이모티콘"
2023-04-07 22:51:36,"영동","사진"
2023-04-07 22:51:40,"강민규","저는 퇴근하자마자 출발해서 어디론가 가고있습니다. 기차에서도 코딩을 하는데 정말 재밌네요"
2023-04-07 22:51:52,"영동","저두 놀러왔습니다"
2023-04-07 22:51:55,"영동","오늘은 안할래요"
2023-04-07 22:52:16,"강민규","여러분도 즐거운 독서생활 하세요~"
2023-04-07 22:52:26,"영동","네 ㅎ"
2023-04-07 22:52:32,"강민규","ㅎㅎ"
2023-04-07 22:53:52,"정소영","화이팅 하겠읍니다.."
2023-04-07 22:58:46,"김연정","영동님 사진 본인이신가요 매우 신나보이네요 ㅋㅋㅋㅋㅋ"
2023-04-07 23:22:04,"정소영","기차에서 코딩이라.."
2023-04-08 00:08:32,"강민규","@김채욱 @김현진 @김형우 @오홍근 @최창훈 @Seo 

여러분 오늘 불타는 독서의 금요일이 되겠네요.. 이틀치 분량 꼭 해봅시다! 

이렇게 해야할 일을 미루면 쉬고싶은 날 쉴 수가 없답니다..."
2023-04-08 01:06:28,"김채욱","[컴퓨터 네트워킹 하향식 접근_4/6(목)]
[내용 요약]
[IPv4 데이터그램 형식]

정의 : internet protocol 버전4로, 네트워크를 통해 데이터 전송시 사용됩니다. 32비트이며 패킷의 헤더와 페이로드로 구성됩니다.

구성 :

버전 : 4bits, IP 버전을 의미합니다.

헤더길이 : 4bits, 헤더길이를 나타냅니다. 

서비스 타입 : 8bits, 데이터그램 퀄리티를 의미합니다. 우선순위 등 QoS에 사용됩니다.

데이터그램 길이 : 16비트, 헤더와 페이로드를 포함한 전체 데이터그램 길이를 나타냅니다.

인식자 : 16비트, 데이터그램에 할당된 고유값입니다. 추후 재결합에 사용됩니다.

플래그 : 3비트, DF(Dont fragment)와 MF(More fragment)로, 분할 및 재결합에 사용됩니다.

단편화 오프셋 : 13비트, 기존 데이터그램의 fragment 순서를 나타냅니다.

TTL : time to live, 8 bits, 데이터그램이 버려지기 전에 최대 이동할 수 있는 hops의 개수를 의미합니다.

상위 계층 프로토콜 : 8비트, 어떤 트랜스포트 계층 프로토콜이 사용되는지 나타냅니다. 

헤더 체크섬 : 16비트, 에러 감지를 위해 사용됩니다.

출발지 IP 주소 : 32비트, 송신자 주소입니다.

도착지 IP 주소 : 32비트, 도착지 주소입니다.

옵션 : 추가 옵션들을 담는 정도입니다. 예를들어, 보안, timestamp등이 있습니다.

​

​

[IPv4 데이터그램 단편화]

정의 : MTU 제한으로 인해 데이터그램 전송이 힘들시 이를 여러 fragment로 나누어 보냅니다. 도착지 호스트에서 재결합을 합니다.

MTU : maximum transmission unit, 네트워크상에서 관리 가능한 데이터 패킷 크기입니다.

사용 필드 : 

인식자 : 데이터그램에 부여되는 고유번호로, 재결합시 동일한 값을 가진 fragments를 분별합니다.

플래그 : MF(more fragment)인 경우에만 재결합이 되고, DF면 fragment를 버립니다.

단편화 오프셋 : 기존 데이터그램의 fragment위치를 나타냅니다.

​

[IPv4 주소체계]

설명 : IP주소는 네트워크 연결시 사용되는 호스트 고유 번호입니다. 호스트의 인터페이스를 정의하고 네트워크상의 위치를 나타냅니다. 32비트로 구성되며, 십진 표기법을 사용합니다.

서브넷 : 작은 네트워크로 불립니다. IP 네트워크를 작은 단위로 나우는데 사용됩니다. 

서브넷 마스크 : 32비트를 이용해, 서브넷 혹은 작은 네트워크에서 호스트의 값을 나타냅니다. /24로 왼쪽 24비트가 서브넷 주소입니다.

CIDR : classless interdomain routing, ip주소와 라우터 ip 패킷을 더 효율적으로 할당하는 방법입니다. 기존 클래스 주소 시스템을 대체해 a.b.c/x형식의 주소를 사용하며 /24를 prefix라 합니다.

클래스 주소체계 : classful addressing, IPv4주소를 A,B,C 클래스로 나눕니다. 기관 네트워크에 따라 ip주소를 배분합니다. 하지만 B와 C의 주소 할당 공간의 차이가 256과 65,536으로 비할당 혹은 부족한 주소 공간을 효율적으로 해결하기 힘듭니다.
"
2023-04-08 02:47:12,"Seo","4/6 목 
https://seoshow.notion.site/DAY21-2f04fb16ee644b9c95f9de512e20af1b

4/7 금
https://seoshow.notion.site/DAY22-716b4bb43b8d469889d3f2a7d7695763"
2023-04-08 03:01:10,"오홍근","[쏙쏙 들어오는 함수형 코딩][오홍근][day22]
242-252p
<요약>
- 데이터지향 : 이벤트와 엔티티에 대한 사실을 표현하기 위해 일반 데이터 구조를 사용하는 프로그래밍 형식
- 자바스크립트에서 함수는 일급 값
- 고차함수 : 인자로 함수를 받거나, 리턴으로 함수를 넘기는 함수

고찰
- 데이터를 사용할 때 임의의 인터페이스로 감싸지 않아야 한다는 것에는 비동의. 경계 인터페이스인 경우 클래스로 래핑하면 데이터를 지키고 오류를 막을 수 있다. 
- 필드를 문자열로 표현하고 전송하는 것에는 확실히 이점보다 단점이 많을 것이라고 생각."
2023-04-08 05:21:20,"최창훈","컴퓨터 네트워킹 하향식 접근(목)

https://cautious-ocarina-cca.notion.site/Chapter4-6b757bf3fdf14fbb9064d3f8c9c14ce4"
2023-04-08 06:09:11,"김현진","데이터중심 애플리케이션 설계

목요일
https://ongoingjin.notion.site/W04-4-246-250p-05dbbca81e7b4c0a89d8ef5af7467422

금요일
https://ongoingjin.notion.site/W04-5-251-259p-48f7f639ee2c4164a7708e23f8600a52

토요일
https://ongoingjin.notion.site/W04-6-260-272p-0cf94ece435846b7ab8729343bb8a213
"
2023-04-08 06:27:59,"김형우","[목요일]
https://engineer-diary.tistory.com/179"
2023-04-08 07:54:31,"강민규","사진"
2023-04-08 07:56:19,"강민규","여러분 즐거운 주말입니다! 4주차의 마지막이네요... 좋은 하루 보내세요~"
2023-04-08 10:38:22,"김현진","링크 오류로 다시올립니다..!

토요일
https://ongoingjin.notion.site/W04-6-260-272p-b9c5fcf6d75640d79a1f4b4918a6a002"
2023-04-08 15:52:29,"길인식","[금요일]
[데이터 중심 애플리케이션 설계]
[요약]

트랜잭션이 동일한 http 요청을 넘어 일련의 요청들에서 이뤄지려면 스토어드 프로시저 안에서 캡슐화해야한다.

2단계 잠금(2PL)은  다른 쓰기 트랜잭션뿐만 아니라 읽기 트랜잭션도 진행하지 못하게 막고 그 역도 성립(강력), 서술잠금과 색인 범위 잠금

[발췌]

격리 수준은 이해하기 어렵고 데이터베이스마다 그 구현에 일관성이 없다. 251p

[메모]

스토어드 프로시저 구현이 그동안 비판을 많이 받아왔으나 범용 프로그래밍 언어를 활용하는 등 발전"
2023-04-08 15:52:49,"길인식","[토요일]
[데이터 중심 애플리케이션 설계]
[요약]

낙관적 동시성 제어로 직렬성 스냅숏 격리(SSI)가 있다. 

‘오래된 mvcc 읽기’와 ‘과거의 읽기에 영향을 미치는 쓰기’에 대한 감지를 고려하여 해결

[발췌]

트랜잭션에서 실행되는 모든 읽기는 데이터베이스의 일관된 스냅숏을 보게 된다. 262p

[메모]

mvcc = multi-version concurrency control"
2023-04-08 16:19:17,"강민규","안녕하세요, 소중한 여러분! 
책너두 오프라인 행사에 여러분을 초대합니다. 현재 아주 핫한 챗지피티를 주제로 해커톤을 준비했답니다!🔥🔥🔥

참가자분들은 무작위로 팀이 구성되어, 다양한 아이디어를 바탕으로 하나의 서비스를 만들어 가는 흥미진진한 경험을 하게 될 거예요!챗지피티를 활용해 서비스를 만들어 보는 두근두근한 활동에 함께 참여하실 생각이시라면, 기다리세요! 🎉🎉

신청하신 분들께는 4월 11일에 Chat API 사용 가이드, 예시 코드, 그리고 세부적인 행사 계획을 보내드릴 예정입니다. 💌
아래 모집 정보를 확인하시고, 참여를 원하시는 분들은 '좋아요'를 눌러주세요! 💖"
2023-04-08 16:19:30,"강민규","🌟행사 정보:
최근 핫한 챗지피티를 이용해 서비스를 만들어 보는 해커톤에 여러분을 초대합니다! 

- 행사 일자: 4월 15일(토) 10:00 ~ 17:00
- 행사 장소: 노원구 창업디딤터 (참여 인원에 따라 변경될 수 있습니다.)
- 참가비: 1만원 (간단한 점심 식사와 공간 이용료 포함! 😋)
- 모집 마감: 4월 11일(화) 24:00

연락처 정보
전화번호: 010-6222-9409

마음이 설레는 이 기회, 함께해요! 🌟"
2023-04-08 16:19:39,"강민규","챗지피티로 이번 오프라인 행사의 모집글을 써보았습니다. 놀랍지않나요? 다같이 AI 혁명의 시대에 앞서나가는 인재가 돼봅시다~"
2023-04-08 16:20:15,"강민규","참고로 이번 행사에는 책너두 1기, 1.5기 완독자 분들도 함께합니다~"
2023-04-08 18:15:56,"김채욱","[컴퓨터 네트워킹 하향식 접근_4/7(금) + 4/8(토)]
[내용 요약]

[DHCP]

정의 : 네트워크 프로토콜로 네트워크에 연결된 장치에게 IP주소를 자동 할당합니다.

설명 : client-server 방식으로 구현됩니다. DHCP 서버가 클라이언트에게 설정 파라미터를 부여합니다. DHCP는 plug-and-play 프로토콜로, 장치가 자동으로 네트워크에 join해서 IP주소를 할당 받습니다.

과정 : 

Discover : 클라이언트 장치가 네트워크에 연결되고, DHCP discover 메세지를 브로드캐스트로 보냅니다. 현재까지는 DHCP 서버의 IP주소를 모릅니다.

Offer : DHCP 서버가 메세지를 받고 offer 메세지로 응답합니다. 이때 사용 가능한 IP 주소와 설정 파라미터(submet mask, 기본 게이트웨이, DNS 서버)도 함께 보냅니다. 서버는 offered된 IP 주소를 잠시 보관해서, 다른 client에게 동일한 IP주소를 주는것을 방지합니다.

Request : client는 1개 이상의 offer 메시지를 받고 고릅니다. 이후 DHCP 요청 메시지를  1개의 서버에게 보내서 IP주소와 설정값들을 받습니다.

Acknowledge : DCHP 서버는 acknowledge 메시지를 client에게 보내서 IP주소와 설정값들의 사용을 확인합니다. 이제부터 client는 본인의 IP주소를 할당 받게 됩니다.

​

​

[NAT]

정의 : Network Address Translation, 하나의 IP주소와 다른 IP주소를 매핑을 하는 기술입니다. 보편적으로 사설 IP주소에서 public IP주소간의 연결시 사용됩니다.

추가 설명 : NAT은 다수의 사설 IP 주소들이 하나의 공개 IP주소로 연결이 가능케합니다. 이는 네트워크 연결시, IP주소의 masking을 통해 보안계층을 제공합니다.

용어 :

Realm : 사설 개인 주소를 갖는 권역입니다. private realm과 public realm으로 나눠집니다. 

Translation Table : 변환 테이블은 NAT 장치에서 사용하는 자료구조입니다. private과 public주소의 매핑된 값을 저장합니다. 각 테이블의 entry에는 매핑된 2개의 쌍이 있습니다. IP 헤더를 값을 바꾸어 사설 IP주소에서 공개 iP주소와 포트로 변홥합니다.

​

[IPv6]

정의 : IPv4의 연장자로 네트워크 라우팅 및 주소로 사용되는 프로토콜입니다. 

추가 설명 : IPv4의 주소 공간 고갈로 인해 생성되었습니다. 128비트 주소 공간을 사용합니다. 

필드 :

Version : 4비트, IP 버전을 의미합니다.

Traffic Class : 8비트, 우선순위와 혼잡제어를 위해 사용됩니다. IPv4의 ToS(Type of Service)필드와 유사합니다.

Flow Label : 20비트, 동일한 flow에 포함된 패킷들을 분류하는데 사용됩니다. 라우터가 네트워크 트래픽 관리시 사용합니다.

Payload Length : 16비트, payload 길이를 나타냅니다. 

Next Header : 8비트, 헤더 타입을 정의합니다. IPv4의 프로토콜 필드와 유사하며 TCP/UDP 여부를 나타냅니다.

Hop Limit : 8비트, TTL과 유사합니다. 다음 라우터에 넘어갈 때마다 플래그 값이 줄고, 0이 되면 버려집니다.

Source Address : 128비트, 송신자 IP주소를 담습니다.

Destination Address : 128비트, 수신자 IP주소를 담습니다.

​

[IPv4와 IPv6의 차이점]

특징 :

주소 공간 : 32bit와 128비트 공간의 차이가 있습니다.

주소 표시 : IPv4는 십진 표기법을 사용하는 반면에 IPv6는 16진수 표기법을 사용하며 8개의 16비트 블록으로 나눠져 있습니다. 

192.168.1.1 vs 2001:0db8:85a3:0000:0000:8a2e:0370:7334

헤더 포맷 : IPv6는 40byte의 고정값인 반면에 IPv4는 크기가 가변적입니다.

Fragmentation : IPv4같은 경우에는 단편화를 소스 호스트와 중간 라우터에서 가능합니다. IPv6는 end-host에서만 가능합니다. 이로인해 라우팅 처리 과정을 간편화 시킵니다.

Checksum : IPv6는 체크섬 필드를 제거해서, 상위 계층인 TCP/UDP에 의존합니다. 이로써 네트워크 오버헤드를 줄입니다.

​

[IPv4에서 IPv6으로 전환]

설명 : 많은 디바이스에서 IPv4를 사용하기에, 이를 IPv6와 연결하는 방법이 필요합니다. Tunneling 방법으로 IPv6패킷을 캡슐화하여서 IPv4 네트워크에서도 전송이 가능케합니다. 

Tunneling Process :

Encapsulation : 터널 entry point에서 IPv6 패킷을 IPv4 패킷 안에 캡슐화합니다. 이는 IPv6의 패킷에 IPv4 헤더를 추가하면서 실행시킵니다. 

Transmission : IPv4 네트워크 기반으로 캡슐화된 패킷을 전송합니다. 

Decapsulation : 터널의 exit point에서 IPv4헤더를 제거하고 기존 IPv6 패킷을 추출합니다.

​

[SDN]

정의 : Software-Defined Networking, 제어 평면과 데이터 평면의 분리를 위해 네트워크 제어를 중앙에서 관리하는 패러다임입니다. 

추가 설명 : 네트워크를 중앙에서 관리하기에, 더 효율적인 라우팅 계산이 가능합니다. 

Openflow :  SDN의 통신 프로토콜입니다. 제어평면에서 데이터 평면의 트래픽 흐름을 관리할 수 있게 합니다. SDN controller에게 통일된 인터페이스를 제공하여서 각 switch(데이터 평면)와 통신을 합니다. 각 데이터 평면은 하나 이상의 flow tables를 가지고 있습니다. 이를 활용해 특정 규칙에 의해 패킷 포워딩을 합니다.

Flow Table Components :

Match : 카테고리를 정의해서 패킷이 flow entry에 포함되는 규칙을 나타냅니다.

다양한 속성 : TCP/UDP, 포트 번호, 송신자/수신자 IP 주소

Action : 패킷이 flow entry와 매칭 되면 수행할 행위를 정의합니다. 대표적으로 패킷을 포워딩할 output 포트 지정, 패킷 필드 수정, 패킷 drop 등이 있습니다. "
2023-04-08 21:22:15,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
회차: 23회차

### 시기심이 발생하는 상황
- 당신이 성공을 거두면, 비슷한 열망을 가졌으나 아직 성공치 못한 사람들은 당연히 부러움을 느낀다.
- 만약 그들이 당신을 비난한다면, 너무 기쁘게 생각하지 마라
- 그러나 일부 시기심은 위험한 형태로 변경될 수 있음을 유념해라

### 시기심을 피하는 방법
- 자조적인 농담하기
- 당신의 성공에 운이 따랐다고 과장하기
- 최대한 그들을 도와주겠다고 제안하기(단, 상대를 내려다보는 느낌은 X)
- 당신이 남들보다 선천적, 후천적으로 뛰어난 재능이 있다면, 위험성을 감지하거 그 재능을 과시하지말기

### 시기심으로 인한 피해를 피하는 방법
- 상대의 비난에 침착함을 유지하기
- 거리 유지하기
- 당신이 그 관계를 바꿀 수 있다고 착각하지말기

### 비교하는 성향을 생산적으로 바꾸는 요령
- 우리는 누구나 나를 남들과 비교한다.
- 누구나 어떤 형태로든 시기심을 느낀다.
- 이런 감정을 느낄 때 죄책감을 가지기 보다는 스스로 모니터링하여 긍정적인 방향으로 바꿔라

1. 당신이 시샘하는 것과 가까이 해라
2. 나보다 못한 사람과 비교하여 내가 가진 것에 감사하도록 해라
3. 타인의 행운을 축해해라(그들의 기쁨을 함께 느껴라)
4. 시기심이 아닌 본보기의 대상으로 삼아라
"
2023-04-08 23:16:13,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]267 ~ 278pg

[요약]

1. First-class functions: part2
- learn more applications of replace body with callback
- understand how returning functions from functions can give functions superpowers
- get lots of practice writing higher-order functions to sharpen your skills

identify the implicit argument in the name of the function

add explicit argument

use new argument in body in place of hard coded value

update the calling code 

[발췌]

[메모]"
2023-04-08 23:58:14,"영동","함수형 코딩 253 - 266

반복문안에 있는 본문은 항상 달라서 매번 반복문을 만들었는데 고차 함수를 이용해서 반복문에서 다른 부분만 함수로 넘겨주면 된다.
= 함수 본문을 콜백으로 만들기

왜 본문을 함수로 감싸서 넣나? -> 안그러면 함수를 호출할때 먼저 실행 되어 버린다. 실행 시점을 늦추기 위해 함수로 감싼다.

일급이 아닌 기능을 함수로 감싸 일급으로 만들고 고차함수로 넣어서 중복을 없애는 것.

함수형 코딩 267 - 278

카피온 라이트 리팩토링 하기 -> 카피온라이트의 복사, 변경, 리턴의 과정에서  변경 과정만 달라지기 때문에, 그 부분만 콜백으로 입력한다.

"
2023-04-09 00:52:24,"Seo","4/8 토
https://seoshow.notion.site/DAY23-9feb0d6d18d7409aac4cc4eb5ba0c698"
2023-04-09 01:56:39,"최창훈","컴퓨터 네트워킹 하향식 접근 (금, 토)

Chapter 4
https://cautious-ocarina-cca.notion.site/Chapter4-6b757bf3fdf14fbb9064d3f8c9c14ce4

Chapter 5
https://cautious-ocarina-cca.notion.site/Chapter5-181a20277c1448779b170f7a710977db"
2023-04-09 02:42:11,"이강욱","https://velog.io/@rivolt0421/Grokking-Simplicity-2324"
2023-04-09 20:02:18,"김효선","4/8 팩트풀니스

https://www.notion.so/2023-04-08-196-204p-a6352792ed4141eba3245465907ec3a5?pvs=4"
2023-04-09 21:15:16,"소재훈","4월 7일,8일(금,토) 컴퓨터 네트워킹 하양식 접근 제출입니다.
제출자: 소재훈

4.일반적인 포워딩 및 소프트웨어 기반 네트워크(SDN)
https://geode-drizzle-777.notion.site/4-SDN-3d806de6170d4e94a8a59de48a1d273b"
2023-04-09 23:04:29,"강민규","여러분 주말 간 다들 잘 지내셨나요?"
2023-04-09 23:31:22,"이강욱","네~!"
2023-04-09 23:34:22,"강민규","저는 이제 출석체크를 해보도록 하겠습니다! 주말 간 다들 다 해주셨으리라 믿습니다!"
2023-04-09 23:39:28,"강민규","@김형우 @오홍근 @정소영 여러분 탈락 위기이시군요! 다음 주는 복습 주간이긴 하지만 월요일 아침까지 이틀 연속 결석이면 탈락되는 절차는 정상적으로 진행되니 꼭 이틀 치 분량 작성해주세요~"
2023-04-10 01:01:44,"김형우","[금요일]
https://engineer-diary.tistory.com/180"
2023-04-10 01:19:04,"오홍근","[쏙쏙 들어오는 함수형 코딩][오홍근][day23-24]
253-278p
<요약>
- 일급값은 코드로 다룰 수 있는 값
- 일급이 아닌 기능은 함루소 감싸 일급으로 만들 수 있음
- 리팩터링1 : 암묵적 인자 드러내기 : 함수 이름 대신 인자(일급값)로 변경
- 리팩터링2 : 본문을 콜백으로 바꾸기 : 비슷한 함수에 있는 서로 다른 부분을 콜백으로 변경"
2023-04-10 07:52:26,"강민규","안녕하세요 여러분 이번 주는 복습 기간입니다! 강제적인 활동은 없지만 매일 아침 똑같이 간단한 제안 드리겠습니다!"
2023-04-10 07:53:53,"강민규","오늘은 5주차 첫째 날을 맞아 지난 4주의 독서를 되돌아보고 회고를 작성해봅시다!"
2023-04-10 21:43:20,"강민규","여러분 어떻게 지난 한달은 돌이켜보셨는지요? 저도 한달을 한번 해보았는데요, 열심히 했던 것 같네요 ㅎㅎ 좋은 추억이 될 것 같습니다"
2023-04-10 23:21:53,"김형우","[토요일]
https://engineer-diary.tistory.com/181"
2023-04-11 22:39:21,"강민규","여러분들 잘지내고 계신가요? 복습은 하고 계신가요? 4주간 열심히 하셨으니 아마 자면서도 책의 내용이 여러분의 것으로 체화되는 현상이 벌어지고 있을겁니다!"
2023-04-11 22:42:52,"강민규","이번 주 토요일에 해커톤을 하기로 했는데요! 모집 인원 수가 그리 많지는 않아서 참여 인원들의 거주 지역을 고려하여 가까운 곳에서 만나 소소하게 진행될 것 같습니다! 

해커톤 전에 스스로 좀 학습할 수 있도록 하기 위해서 간단한 자료 만들었습니다. 

거의 인터넷만 찾아봐도 다 나오는 얘기라 별 의미는 없지만, 제가 토이프로젝트, 회사 업무 하면서 얻게된 소소한 팁과 돌아가고있는 코드베이스가 담겨있으니 관심 있으신 분들은 한번 보세요!

해커톤 참여하시는 분은 내일 단톡방 초대드릴 예정인데 토요일에 만나기 전까지 꼭 보시고 실습도 한번 해보시고 오는걸 추천드립니다요"
2023-04-11 22:43:20,"강민규","https://breakbook.notion.site/fda2a7f0fa2a41499c1d041d30799ddd"
2023-04-13 07:09:49,"김민수","[토요일] 바바라 민토 논리의 기술
2부 논리적으로 생각하기 - 7장 그룹 내 생각 요약하기 - 행동 결과 기술하기 

[요약]
행동 조치를 배열할 때는 행동 단계를 계층화하여 각 단계에 들어갈 조치의 수를 5개 이하로 제한 필요
그루핑 후 전체 결과를 요약해야하며 요약은 최종 결과물을 이미지화 할 수 있는 말로 표현해야 한다.

[발췌]
""행동 조치를 배열할 때 대부분의 사람들은 자신이 실제로 하고 싶은 행동의 순서로 리스트를 만드는 경향이 있다.""
리스트를 만들 때는 적합한 기준에 따라 그루핑을 해야 한다.

[메모]
회사에서 품의 작성간에 참고해보았더니 큰 도움이 되었던 단계이다"
2023-04-13 07:10:00,"김민수","토요일거 제출 안 한것을 지금 깨달아버렸네요"
2023-04-13 07:10:47,"김민수","오늘 사장님한테 프로젝트 예산 달라고 싸인받으러 가는데, 근거자료 수립 시 이 책에서 제안하는 방식대로 해보았더니 글이 보다 읽기 편해 보이네요 (회사 자료라 공유를 못 하는게 아쉬워요)

저는 그런 1주일을 보내고 있답니다"
2023-04-13 09:36:10,"강민규","멋진데요? 토요일 제출 안하신 분들은  일요일 저녁에 리마인드 예정입니다요"
2023-04-13 11:47:27,"김민수","ㅎㅎ 덕분에? 사장님 싸인을 무사히 획득하고 왔습니다 ~.~ 칼퇴네요 칼퇴"
2023-04-17 00:06:46,"강민규","여러분 복습 주간은 다들 의미있게 보내셨는지요? 내일부터 다시 시작되는 4주간의 독서 레이스~ 다 같이 잘 마무리해보아요!!"
2023-04-17 00:07:35,"강민규","@ㅈㅁㅁ 정민님 아무래도 토요일 분량을 누락하신 것같네요~ 내일까지는 꼭 제출해주세요~"
2023-04-17 00:08:06,"강민규","@정소영 소영님은 금, 토 분량 모두 제출 안하셨습니다! 내일 아침까지 꼭 제출해주세요!"
2023-04-17 00:18:17,"강민규","이번에 책너두에서 진행한 해커톤에서 많은 얘기들을 들을 수 있었는데요, 특히나 인상깊었던 이야기는 챌린지에서 탈락하지 않기 위해서 술자리에서 책을 보고 독서일지를 작성하셨다는 분의 감동 실화였습니다. 

참여비를 받은 만큼 이 시스템이 여러분에게 충분히 도움이 되고 있는지 늘 고민이 많았는데, 그래도 제가 하는 일이 가치가 있음을 조금 더 확신할 수 있게되어 너무 감사했습니다.

이번에 개발자들만 할만한 행사를 진행한 것 같아 개발 직군이 아닌 분들에게 죄송하고, 다음번에는 모두가 함께 즐길만한 것을 생각해보겠습니다!"
2023-04-17 06:33:23,"ㅈㅁㅁ","엥"
2023-04-17 06:33:26,"ㅈㅁㅁ","사진"
2023-04-17 06:33:31,"ㅈㅁㅁ","했어요!"
2023-04-17 07:42:05,"강민규","23이 토요일이었군요! 감사합니다~~"
2023-04-17 07:45:02,"강민규","사진"
2023-04-17 07:46:06,"강민규","여러분 월요일이 다가왔습니다. 책너두의 하반기가 시작되었어요! 오늘도 힘내봅시다~"
2023-04-17 07:47:13,"강민규","다들 독서일지에 라벨을 제각기 붙여주시니 좀 헷갈려서 오늘이 25일차인 것으로 통일해주시면 감사하겠습니다!"
2023-04-17 07:54:24,"김민수","[25일차 월요일] 바바라 민토 논리의 기술
2부 논리적으로 생각하기 - 7장 그룹 내 생각 요약하기 - 결론에서 유사점 찾아내기

[요약]
생각은 행동 생각과 상황 생각 두가지로 분류할 수 있다. 지시 혹은 전달을 이끌어낸다.
문서 작성을 위해서는 생각을 연결하는 구조적 유사점을 찾은 뒤 유사점 사이에서 관련성을 찾아내고 귀납적 추론을 통해 요약 포인트를 도출해내야 한다.

[발췌]
""그루핑을 한 생각에서 명확한 관련성을 찾아내기 힘든 경우에는 그루핑 자체에 문제가 있음을 암시하므로 다시 생각해야 한다.""
문장의 미사여구를 지우고 주부와 술부를 분리해서 여러 문장을 비교할 수 있어야 한다.

[메모]
회사에서 쓰이는 문서들은 그루핑된 문장들이 동일한 주부 혹은 술부를 이루는 경우가 많은 것 같다."
2023-04-17 10:16:29,"정소영","23일차 
넛지 파이널 에디션 

생각 - 슬러지를 단순화하되, 효율을 위해 의도적인 불편함을 남겨놓을 것. 기대감을 활용할 것. 

8장 슬러지
우리를 불편하게 만드는 것들 

구독 취소 함정
- 구독료의 자동갱신 사례. 자동갱신을 막기 위해 여러가지 불편함을 감수하고 알아보는
과정
- 가입 절차와 가입 취소 절차가 크게 다를 때 나타남

리베이트 함정
- 메일 인 리베이트 : 제품 판매 후 일정 금액을 고객에게 다시 돌려주겠다고 하는 제안하는 경우 > 가격 차별화가 있어 기업 입장에서는 균형적

왜 굳이 번거롭게 리베이트를 제공할까?
모든 사람이 현금 상환을 믿는다. 난관을 극복하고 결국 현금을 상환받을 것이라는 비현실적으로 낙관하는 경향이 있기 때문에.

- 쉽게 만들어라 
과정을 단순화해 슬러지를 최소화했을 때 행동의지가 크게 늘어남. 단, 마케팅에서는 효율이 떨어질 수 있음. 현금 상환에 대한 믿음을 이용하기 때문에 "
2023-04-17 12:38:26,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
일차: 25일차

### 성공이라는 망상에 빠지지 말자
- 어떤 형태로든 성공을 경험하면, 그 요인을 분석해라
- 성공이라는 요인에 행운, 그 행운을 작용했던 멘토를 비롯한 남들의 역할을 눈으로 확인해라
- 성공을 분석하면 자신의 능력을 과장하는 성향을 누그러뜨릴 수 있다.
- 커지는 우월감으로 남의 감정을 상하지 않게 해라

### 성공에는 무사안일주의가 따른다
- 성공을 경험하면, 사람은 큰 탈이 없다고 느껴 편안하고 한가로워진다.
- 하지만 이 무사안일주의는 구식 전략을 반복하게한다.
- 성공했다면 경계심을 높여라
- 새로운 것을 시작할 때, 칠판을 깨끗이 지우고 0부터 다시 시작해라
"
2023-04-17 18:52:21,"영동","25일차

요약
고차 함수는 다음과 같은 특징과 목적을 갖는다.

함수를 반환하는 함수.
반복적인 코드를 제거한다.

var saveUserDataWithLogging = warpLogging(saveUserData);

saveUserData => 원래 동작
↓ 고차 함수로 전달
warpLogging => 추가동작
↓ 새로운 함수 리턴
saveUserDataWithLogging => 두가지 일을 하는 새로운 함수
기본틀

function wrappingFunction(inputFunction){
   return function(args){      
         _; //inputFunction 전 실행
       inputFunction(args)
      _; //inputFunction 후 실행      
    }
}

사용

const newFunc = wrappingFunction(funcA)
newFunc(args)
발췌
<287p>
고차 함수로 프로그램을 만들면 더 일반적으로 만들 수 있다.
마치 복잡한 퍼즐을 푸는것 같고 똑똑해지는 느낌을 받지만 좋은 엔지니어링은 퍼즐을 푸는 것이 아닙니다

집중해야 하는 것은 효과적으로 문제를 해결하고 있는가이다.

반복적인 처리를 고차함수로 처리하는 것은 일반화에 큰 도움이 되고 적극 활용해야 한다.

어떤 방법이 좋은가?
코드가 더 읽기 쉬운가?
많은 중복을 없앨 수 있는가?
코드가 하는 일이 무엇인지 쉽게 알 수 있나?

해당 내용을 놓치면 안된다.

능숙하게 쓸 줄 알아야 하지만 더 좋은 코드를 만드는데 사용해야 한다.

메모
최근 Contract Event Handler를 작성하면서 고차함수를 적극 활용했다. 코드는 짧아졌지만 콜백함수에서 동일한 함수를 호출해야 하는 일이 있어 가독성은 좀 떨어진다.
eventListener를 통해 새로운 eventListener를 생성해야 하기 때문에 재귀형태로 구현이될 수 밖에 없었다.
콜백 형태로 코드를 작성해서 콜백지옥;이다.
빨리 읽고 빨리 개선하고 싶다.
"
2023-04-17 19:07:08,"김효선","4/17 팩트풀니스

https://www.notion.so/2023-04-17-205-212p-fc244b7645904a15bed26fd0d0f4f98c"
2023-04-17 19:51:12,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]279 ~ 290pg

[요약]

get rid of duplication, wrap code 

Ch 12 Functional Iteration

- map() filter() reduce()
- replace simple for loops over arrays with functional tools
- derive implementations for the three functional tools

[발췌]

good engineering is not about solving puzzles, it’s about solving problems in effective ways

try higher-order functions in lots of places for lots of purposes & compare to straightforward solution

[메모]"
2023-04-17 20:57:02,"정소영","넛지 파이널 에디션 (24일차)

8장 슬러지
우리를 불편하게 만드는 것들 

[우리에겐 쓸데없는 절차가 너무도 많다]
- 넷플릭스 창업자 ""회사 돈을 마치 자신의 돈인 것처럼 써라""
""자유로움을 보장할 때 경비 지출은 조금 늘어날 수 있다. 그러나 이때 과다 지출에서 비롯되는 비용은 자유로움이 가져다주는 이득만큼 크지 않다."" 

[대학 입시 과정의 슬러지]
- 일류대학은 가난한 학생에게 지원하고 싶어한다. 하지만 가난한 학생들이 지원하지 않는다, 왜?
  - 슬러지가 변수. 대학교 지원 전에 장학금 신청을 보장하게 바꿔버리기.  > 미래에 대한 불확실성을 줄여주는 경험. 

[정부가 만들거나 없애는 슬러지]
예) 통행료 수입과 징수. 통행료를 지불하려고 줄을 서서 기다리며 소모하는 시간은 기획시 생각X 
- 어떤 규칙이든 비용과 편익, 시간이라는 변수를 포함해야 한다. 

[공항에서의 슬러지]
- 911 이후 의도적으로 출입국 심사에 슬러지를 많이 넣은 경우."
2023-04-17 21:09:52,"정소영","넛지 파이널 에디션 (25일차)

8장 슬러지
우리를 불편하게 만드는 것들 

[온라인 세상의 슬러지]
표적 마케팅을 위한 웹사이트의 쿠키
- 쿠키 동의 공지문의 위치 문구 디자인이 사람들의 동의 행동에 실질적으로 영향을 미치며, 선택에 커다란 영향을 줌

[세금]
- 조세 제도의 설계 중 중요한 변수
  - 인센티브, 형평성, 귀착자, 준수성 등 + 슬러지(얼마나 많은 시간과 노력이 세금을 준수하거나 회피하는데 소비될까.)
- 법률을 따르는 것에서 생겨나는 것 뿐 아니라 ""허점을 파고드는 노력""을 기울이는 데서도 슬러지가 발생.

<메모>
프로덕트 및 퍼널의 불편함을 간소화하는 것도 중요하지만 절대적으로 시간이 얼마나 소요되는 지도 놓치면 안 될 요소. 시간비용에 대한 슬러지는 생각보다 더 크다. "
2023-04-17 22:00:33,"강민규","여러분들 오늘 월요일 다들 어떠셨나요? 전 환절기라 그런지 감기기운이 있네요! 여러분도 몸 조심하세요~ 복습기간 후 새로운 시작이라 다시 책 읽는게 쉽진 않겠지만 저흰 모두 잘해낼 수 있습니다! 여러분 모두 화이팅"
2023-04-17 23:01:58,"정소영","감기조심하세용 🥺"
2023-04-17 23:42:50,"김채욱","[컴퓨터 네트워킹 하향식 접근 (25일차)]
내용 요약

[개요]

설명 : 네트워크 시스템에서 데이터가 네트워크 내부에서 전송되는 것을 담당합니다. 네트워크 연결, 설치, 유지 등 라우팅과 관련된 모든 것입니다. 적절한 프로토콜과 매커니즘으로 네트워크 장치끼리 정보 교환 및 데이터 패킷 전송을 결정합니다. 

​

[라우터별 제어와 논리적으로 중앙 집중된 제어]

라우터 제어 설명 : 각 라우터가 독립적으로 라우팅을 결정합니다. 개별 라우팅 테이블과 프로토콜을 가지고 데이터를 전송합니다. 현대 네트워크에 더 적합한 이유로는 확장성과 일정 fault tolerance 특성을 지닙니다. 하나의 라우터 실패가 있더라도 다른 라우터로 트래픽이 전송됩니다.

논리적 중앙 제어 설명 : 단일 중앙 제어기가 전체 네트워크 통신을 결정합니다. 네트워크 관리를 단순화시켜 하나의 통일한 정책을 수행할 수 있습니다. 다만 확장성과 single point of failure 문제가 있습니다. 

Control Agent : 네트워크 장치의 접근 포인트에서 여러 다른 네트워크 컴퍼넌트와 interact합니다. 

Collecting and processing network statistics : 네트워크 성능, 자원 사용과 같은 통계치를 수집하고 네트워크 최적화나 troubleshoot에 사용됩니다.

Implementing network policies : 접근 제어, 트래픽 우선순위, QoS와 같은 정책을 적용할 수 있습니다.

Configuring network devices : 네트워크 장치에 펌웨어나 라우팅 프로토콜 등의 설정을 합니다.

​

​

[라우팅 알고리즘]

정의 : 네트워크 장치가 최적의 데이터 패킷 포워딩 경로를 선정하기 위한 알고리즘입니다. 다음은 분산형 혹은 중앙 집중형 알고리즘을 분별하는 기준입니다.

중앙 집중형 라우팅 알고리즘 : 네트워크 전체에 대한 완전한 정보를 가지고 출발지와 목적지 사이의 최소 비용을 계산합니다. 

분산 라우팅 알고리즘 : 각 라우터들에 의해 반복적이고 분산된 방식으로 수행됩니다.

정적 라우팅 알고리즘 : 사람이 개입하여 느리게 변합니다.

동적 라우팅 알고리즘 : 네트워크 부하나 토폴리지 변화에 따라 라우팅 경로를 바꿉니다. 경로의 루프나 경로 진동 문제에 취약합니다.

부하 민감한 알고리즘 : 링크 비용은 해당 링크의 현재 혼잡 수준을 나타내기 위해 동적으로 변합니다.

부하에 민감하지 않은 알고리즘 : 혼잡을 반영하지 않고 경로 계산을 합니다.

​

[링크 상태 라우팅 알고리즘]

설명 : 동적 라우팅 알고리즘입니다. 각 라우터가 최신 데이터 경로 상태를 유지합니다. 이 정보를 다른 장치와 공유합니다.

과정 : 

Discovery of neighbors : 링크 계층 '발견' 프로토콜을 통해 이웃 라우터와 연결합니다.

Link state advertisement : 이웃 장치를 찾으면, 자신의 연결된 링크 상태 정보(routing table)를 전송합니다.

Building link state database : 각 라우터는 LSA를 받으면 자신의 database에 저장합니다. 해당 데이터베이스에는 전체 네트워크 토폴리지의 매핑 값을 저장합니다.

Shortest path calculation : 각 라우터는 다익스트라와 같은 최소 경로 알고리즘을 적용해 저장합니다.

Building the routing table : 라우터는 라우팅 테이블을 만듭니다.

장점 : 

확장성에 유리합니다.

더 빠르게 데이터 통합이 가능합니다.

문제 : 

라우팅 진동 문제 : 현재 트래픽의 기준이 아닌 과거 트래픽 혼잡에 대한 정보가 라우팅 테이블에 남아서 이를 기반으로 링크별 비용을 계산하면서 진동이 일어나고, 전체 트래픽 비용이 증가합니다. 이로인해 네트워크 오버헤드 문제와 전체 네트워크 성능 저하 문제가 있습니다.

slow convergence : 업데이트 된 라우터 정보가 느리게 업데이트 될 시에, outdated 정보의 결정을 합니다.

count-to-infinity problem : 라우터는 라우팅 테이블 정보를 주기적으로 공유합니다. 만약 링크가 실패시, 그와 연결된 라우터는 실패된 경로의 통계치를 전송하고 무한 counting 문제가 발생합니다."
2023-04-18 01:53:16,"최창훈","[컴퓨터 네트워킹 하향식 접근(25일차)
https://cautious-ocarina-cca.notion.site/Chapter5-181a20277c1448779b170f7a710977db"
2023-04-18 02:29:05,"김형우","[25일차]
https://engineer-diary.tistory.com/182"
2023-04-18 07:54:49,"강민규","사진"
2023-04-18 07:56:14,"강민규","여러분 오늘도 좋은 하루입니다! 저는 갑자기 감기 기운이 심해졌네요"
2023-04-18 09:20:55,"길인식","[월요일]
[데이터 중심 애플리케이션 설계]
[요약]
분산 시스템에서는 부분 장애를 고려해야함. 장애 가능성을 받아들이고 소프트웨어 내결함성을 보완하는것이 효과적
네트워크 환경에서는 비동기 패킷 네트워크이고 요청이 응답 없으면 이유를 알기 힘들다. 
[발췌]
이제 비관주의를 최대한 끌어올려 어떤 것이든지 잘못될 가능성이 있다면 잘못된다고 가정한다 273p
[메모]
슈퍼컴퓨터와 분산시스템의 차이는 부분 장애를 어떻게 대응할 것인가로 구분할수도 있을것같다"
2023-04-18 09:32:02,"김민수","[26일차 화요일] 바바라 민토 논리의 기술
2부 논리적으로 생각하기 - 7장 그룹 내 생각 요약하기 - 결론에서 유사점 찾아내기

[요약]
요약 포인트를 정확하게 표현하면 자신이 정말로 말하고자 하는 것이 무엇인지 찾아낼 수 있다.
또한 독자가 이해하기 쉬운 순서로 말할 수 있다.
상황에 관한 생각과 행동에 관한 생각이 뒤섞인 경우 유사점에 따라 분류한 것으로 간주한 뒤 형식만 간단히 변경한다.

[발췌]
""자신의 논리가 적절하다고 판단된다면, 다소 정확성이 떨어지는 요약 포인트를 만들어도 상관없다.""
매번 이렇게 복잡한 프로세스를 거치는 것은 어려운 일이기 때문

[메모]
복잡한 프로세스를 거치는 것은 언제 필요한 것인지에 대한 고민 필요"
2023-04-18 12:53:38,"Seo","4/17 월
https://seoshow.notion.site/DAY25-ddb92a914b9841eb9f20df3b1ea2f8b3

418 화
https://seoshow.notion.site/DAY26-396e0bbd30c344e4a1ed5160e3fce6a9"
2023-04-18 13:47:09,"영동","함수형코딩 289~302 26일차

요약
함묵적인자는 명시하고 본문(달라지는구현)은 콜백으로 바꾸기

map : 새로운 함수를 리턴하는 카피온라이트로 구현된다.
filter : map + 조건문, 조건문에 부합하는 element만 반환된다.

함수를 전달하는 3가지 방법
전역으로 선언
지역으로 선언
인라인으로 선언 (익명함수)

고차함수는 변수를 미리 세팅해 놓을 수 있다.
```javascript
function emailsForCustomers(customers, GOODS, BESTS){
 return map(customers,  function(customer){
    return emailForCustomer(customer, GOODS, BESTS);
 }  
}
goods와 bests는 고차 함수를 선언할때 미리 지정 가능하다

```"
2023-04-18 18:19:00,"김현진","데이터 중심 애플리케이션 설계

월요일
https://ongoingjin.notion.site/W06-1-273-284p-0166de7c4ead4e1387879a3362b9bef8"
2023-04-18 19:53:03,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
일차: 26일차

### 과대망상에 주의하자
- 과대망상은 자신을 크고 우월한 무엇가로 여기는 현상이다.
- 과대망상을 자각하기는 어려우나 그 현상 자체를 이해하는 게 중요하다.
- 상대와 자신안의 과대망상 신호를 알아야한다.
- 만약 과대망상 신호가 보인다면, 그 에너지를 긍정적인 것으로 바꿔보자.

### 과대망상 발생하는 유형
- 어린시절 응석받이로 관심을 독차지한 유형
- 상대의 권위와 전문성을 존재하지 않는 유형
- 뭐든지 간단하게 본인이 마스터할 수 있다는 유형

### 위험한 리더
- 나는 운명이다라고 여기는 리더
: 과대망상적 리더는 자신이 위대한 것을 이룰 운명이라는 인상을 주려한다.
: 과대망상적 리더의 운명같은 이야기 뒤에 숨겨진 현실적인 사실을 끄집어내고 널리 열려라
- 나는 보통 사람이다라고 여기는 리더
: 사람들에게 자신이 아주 평함한 사람을 대표한다는 인상을 주려한다.
- 뭐든지 자신이 해결한다는 리더
: 이 유형은 종종 고난과 위기의 시절에 권좌에 오른다.
: 이들이 보여주는 자기확신은 일반 대중이나 주주들의 마음을 편하게 한다.
: 이들은 사이비 종교를 만들기 좋아한다.

- 규칙은 내가 정한다라는 리더
- 나는 손대는 것마다 성공한다고 자만하는 리더
"
2023-04-18 21:14:37,"강민규","안녕하세요 여러분 다들 퇴근하셨나요? 저는 오늘 연차쓰고 하루종일 잠만 잤습니다... 이렇게 컨디션 관리 잘하시면서 매일 독서하시는 모습을 보니 존경스럽습니다. 다들 화이팅!"
2023-04-18 21:15:31,"강민규","@오홍근 @이강욱 @소재훈 선생님들 월요일 분량 아직 안하셨네요! 오늘안 월,화 분량 모두 해봅시다~"
2023-04-18 21:41:26,"소재훈","25일차 컴퓨터 네트워킹 하양식 접근 제출입니다.
제출자: 소재훈

1. 라우팅이란?

https://geode-drizzle-777.notion.site/1-ca971f5a20df4be8bbd6064b0110a17d 


2.링크 상태 알고리즘
https://geode-drizzle-777.notion.site/2-77b62e8dac5c460da57e226edc128e98


3. 거리 백터 라우팅 알고리즘
https://geode-drizzle-777.notion.site/3-9eeeded627c949faa37e16ea9f8bdc2d"
2023-04-18 23:10:46,"김효선","4/18 팩트풀니스

https://www.notion.so/2023-04-18-213-217p-33700bb5ae854201946fcb278ee71db0?pvs=4"
2023-04-18 23:38:19,"김채욱","[네트워크 컴퓨팅 26일차]
[내용 요약]

[거리 벡터 라우팅 알고리즘]
정의 : 동적 비동기 라우팅 프로토콜로 네트워크 안에서 최적의 경로를 결정하는 알고리즘입니다. 각 라우터가 라우팅 테이블에서 알고리즘을 실행합니다. 라우팅 테이블은 다음 라우터 홉스까지의 거리에 대한 정보만을 지니고 있습니다.

작동 순서 :

Initialization : 각 라우터는 직접 연결된 이웃 정보를 라우팅 테이블에 저장하고 그 외 도착지는 cost을 무한대로 합니다.

Table exchange : 직접 연결된 이웃에게 라우팅 테이블을 교환합니다. 이는 boradcast 혹은 multicast로 이루어집니다.

Update : 이웃 라우터에게 테이블 정보를 받으면 자신의 테이블에 업데이트를 합니다. 만약 현재 테이블에 있는 특정 경로의 cost가 새로 들어온 정보보다 크다면 새로 들어온 값으로 업데이트합니다.

Convergence : 테이블 교환은 모든 라우터가 정보를 받을때까지 교환합니다.

문제 :

slow convergence : 업데이트 된 라우터 정보가 느리게 업데이트 될 시에, outdated 정보의 결정을 합니다.

Dy(x) = min{ c(y,x) + Dx(x), c(y,z) + Dz(x)} = min{60 + 0, 1 + 5}

count-to-infinity problem : 라우터는 라우팅 테이블 정보를 주기적으로 공유합니다. 만약 링크가 실패시, 그와 연결된 라우터는 실패된 경로의 통계치를 전송하고 무한 counting 문제가 발생합니다.



대표사진 삭제
count-to-infinity problem

[LS와 DV 비교]



대표사진 삭제
사진 설명을 입력하세요.


[OSPF]

정의 : 링크-상태 동적 라우팅 프로토콜입니다. AS(autonomous system)내부에서 내부 게이트웨이로 사용됩니다.

기능 :

Hierarchical Design : 여러 AS의 지역으로 관리합니다. 이 계층 구조는 관리 편리성과 확장성에 유리합니다. 이로 인해 전체 라우팅 정보를 줄입니다.

네트워크들을 AS 단위로 묶어서 관리하면 동일한 라우팅 정책으로 관리가 가능해집니다. 이로 인해 라우팅 테이블의 크기가 작아지며 네트워크 전반의 교환되는 라우팅 정보가 줄어듭니다.

Fast Convergence : 네트워크 변화와 라우팅 테이블 업데이트를 빠르게 적용할 수 있습니다.

Support for VLSM and CIDR : 다양한 길이의 서브넷 마스크를 지원하여서 효율적으로 IP 공간을 사용합니다.

Authentication and Security : 라우터간의 인증 옵션을 주어서 확인된 라우터간의 통신 보안을 제공합니다.


[Autonomous System]

정의 : IP 네트워크의 집합으로 단일 기관에서 라우팅 정책으로 관리합니다. 각 AS은 고유 ID인 ASN을 할당받습니다. 이는 라우팅 정보를 교환시 사용됩니다.

종류 :

Interior Gateway Protocols : AS 내부에서 라우팅 정보를 교환합니다. OSPF 등의 라우팅 프로토콜로 교환합니다.

Exterior Gateway Protocols : AS간의 통신에 사용됩니다. 대표적으로 BGP가 사용됩니다.
"
2023-04-18 23:45:07,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]290 ~ 302pg

[요약]

Ch 12: Functional Iteration

- learn 3 functional tools: map(), filter(), reduce()
- discover how to replace simple for loops over arrays with functional tools
- derive implementations for the three functional tools

map: transforms one array into another array of the same length 

- higher-function that loops through an array , returns new array
- depending on what you pass(action/calculation), expression will become (action/calculation)

3 ways to pass a function to another function in JS

- globally defined
- locally defined
- defined inline
    - var friendGreetings = map(friendsNames, function(name) { return “Hello, “ + name});
    - anonymous function

What if null values are put into the array?

- be mindful  / use a language where null is impossible
    - solution: filter

[발췌]

[메모]"
2023-04-19 02:34:51,"이강욱","https://velog.io/@rivolt0421/Grokking-Simplicity-2526"
2023-04-19 08:22:17,"강민규","사진"
2023-04-19 08:25:18,"강민규","여러분 벌써 수요일입니다! 실물 책 보시는 분들은 아시겠지만 저희 꽤 많이 읽었어요 ㅎㅎ 오늘도 화이팅입니다"
2023-04-19 08:25:42,"길인식","[화요일]
[데이터 중심 애플리케이션 설계]
[요약]
네트워크 환경에서 시간을 맞추기는 어렵지만 다양한 극복 방법이 있다.
시계 속도를 0.05%빠르게 한다든지, ptp프로토콜, 신뢰구간사용 등
[발췌]
왜 데이터센터 네트워크와 인터넷은 패킷 교환을 사옹할까? 이들은 순간적으로 몰리는 트래픽에 최적화됐기 때문이다. 285p
[메모]
스레드는 아주 오랫동안 멈출 수 있다. 예를들면 노트북 덮개를 닫을때"
2023-04-19 14:36:44,"영동","함수형코딩 303-314 27일차

요약
Reduce는 사전적 의미로는 `줄이다`이다. 
배열의 요소들을 조건에 따라서 하나의 값으로 합치는 기능을 수행한다.

그래서 배열 요소들의 총 합 등과 같은 연산이 가능한 것이다.

초기값을 무조건 정해줘야한다. 다만 JS에서는 초기값을 지정하지 않을 경우 배열의 첫번째 값이 초기 값으로 사용된다고 한다.

map : 모든 배열의 요소를 특정 연산을 적용해 새로운 배열로 만든다

filter : 모든 배열 요소들을 특정 조건에 맞는 요소들만 선택해 새로운 배열을 만든다

reduce : 배열의 요소들을 조합해 하나의 값을 만든다


발췌


메모
reduce로 할 수 있는 것들
1. 실행 취소/ 실행 복귀
2. 테스트 할 떄 사용자 입력을 다시 실행하기
3. 시간 여행 디버깅
4. 회계 감사 추적 
...? 감이 안오는데 알아봐야겠다.

최근 배열의 값을 key로 갖는 Object를 reduce로 생성했다.


"
2023-04-19 18:59:38,"오홍근","[쏙쏙 들어오는 함수형 코딩][오홍근][day25-27]
279-314p
<요약>
- 고차 함수로 패턴이나 원칙을 코드로 만들 수 있다.
- 고차 함수는 가독성을 해칠 수 있다.
- map은 값이 있는 배열을 다른 배열로 변환한다.
- filter는 배열에서 일부 항목을 선택한다.
- reduce는 배열을 순회하면서 값을 누적한다.
- reduce로 map이나 filter를 만들 수는 있지만, 반대는 불가하다.
- reduce로 할 수 있는 것들
  - 실행 취소/실행 복귀
  - 테스트할 때 사용자 입력을 다시 실행하기
  - 시간 여행 디버깅
  - 회계 감사 추적"
2023-04-19 19:22:56,"강민규","야 너두 소설 만들 수 있어 내가 직접만든 소설"
2023-04-19 19:22:56,"강민규","여러분 다들 퇴근하셨나요? 오늘 지난 주말 해커톤에서 함께 하신 분들이 최종 배포를 하게 되었다고 해서 여러분에게 공유해봅니다~ 오늘도 유익한 독서활동을 해봅시다! "
2023-04-19 19:23:50,"강민규","책너두 all rights reserved는 참여해주신 분들이 자발적으로 해주신거니 오해하지말아주세요 ㅋㅋ.."
2023-04-19 19:34:53,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
일차: 27일차

### 높은 만족감을 얻는 방법
- 과대망상은 방향만 잘 맞춰주면 우리의 야망을 불태울 연료로도 쓸 수 있다.
- 쓸모있는 과대망상은 현실에 기초한다.
- 그렇다면 높은 만족감을 위해 어떻게 에너지 방향을 잡아야할까? 방법은 아래와 같다.

1. 과대망상적 욕구를 인정해라
- 우선, 우리는 중요한 사람처럼 느끼고 싶고 관심의 중심이 되고 싶다는 사실을 인정해야한다.
- 과대망상적 욕구가 과거의 당신에게 영향을 줬다면, 그 요인을 분석해야한다.

2. 에너지를 집중시켜라
- 단일 프로젝트나 문제에 온전히 집중하는 힘을 길러라
- 집중하는 힘을 키워 능력치를 지속적으로 향상되는 걸 보는 게 목적이다.

3. 현실과의 대화를 유지하라
- 항상 타인에게 피드백을 받아라
- 프로젝트가 조금 성공했다면, 한 발 물러서서 성공이라는 망상에 빠지지 않도록 주의해라

4. 정교하게 계산된 도전을 찾아라
- 판타지 과대망상의 문제점은 뭔가 대단한 새로운 목표를 이루겠다는 상상을 하게 한다는 것이다.
- 훌륭한 도전으로 시작했지만 이내 당신이 준비가 되지 않음을 깨닫고 용두사미가 된다.
- 그러므로, 지난번보다 살작 더 어려운 목표를 설정해서 도전을 해야한다."
2023-04-19 22:16:50,"김효선","4/19 팩트풀니스

https://www.notion.so/2023-04-19-218-224p-81ba3767adb74d378dd6b6dd5121199c?pvs=4"
2023-04-19 23:52:42,"강민규","여러분 터프한 하루를 보내고 계신가요~ 저도 금방 전 노트북 배터리가 나갈 떄 까지 회사 일에 매진하다가 왔답니다. 일도 참 중독성이 있군요. 그렇지만 맨날 하는 일만 하다가는 어느새 처진다는 사실… 일과 공부가 적절하게 병행되어야만 지속적인 성장을 하실 수 있습니다!!"
2023-04-19 23:54:13,"강민규","@김현진 @김형우 @소재훈 @정소영 @최창훈 
여러분은 오늘 수요일 목요일 분량 해주세요! 내일 아침 공지까지 독서일지 작성안하시면 저의 개인적인 연락을 받게됩니다! 서로 매우 불편하니 유의해주세요~"
2023-04-20 00:12:45,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]303 ~ 314pg

[요약]

filter: second functional tool, create a new array based on an existing array 

3 ways to define a function

- globally / locally / defined inline

predicates: function that that return true or false 

reduce: accumulate a value as it iterates over the array, can be used to concatenate strings

Reduce:

- Undo/redo
- Replay user interaction for testing
- Time traveling debugger
- Audit trails

[발췌]

[메모]"
2023-04-20 09:03:16,"김현진","https://ongoingjin.notion.site/W06-4-319-327p-f6ca3843b7944a959cae2847b12ce0dd"
2023-04-20 09:03:55,"김현진","데이터중심 애플리케이션 설계 - 목요일"
2023-04-20 09:19:38,"길인식","[수요일]
[데이터 중심 애플리케이션 설계]
[요약]
분산시스템에서 진실은 다수결로 결정된다.
부주의한 오류는 펜싱 토큰 등에 의해 감지, 거짓말에는 비잔틴 결함
알고리즘은 안정성(나쁜일은 일어나지 않음)과 활동성(좋은 일은 결국 일어남)

[발췌]
비잔틴 내결함성은 이런 중앙 권한이 없는 피어투피어 네트워크에 더 적절하다. 305p

[메모]
노드 하나를 침해할 수 있다면 대부분의 경우에 다른 모든 노드도 침해할 수있다는 생각이 필요"
2023-04-20 12:21:20,"김효선","4/20 팩트풀니스

https://www.notion.so/2023-04-20-225-231p-6f54adb29d684aa7b0075e64316db26e?pvs=4"
2023-04-20 12:58:43,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
일차: 28일차

사람은 남성적, 여성적 속성 두가지를 가지고 있다.
하지만 사회에서는 일관된 정체성을 기대하기에 우리는 다른 속성을 억누르는데 이는 사고를 경직시킨다.
잃어버린 남성성, 여성성을 끄집어내면 사고가 유연해질 것이다.
남들이 기대하는 성 역할을 연기하지말고 당신에게 맞는 성 역할을 창조해라

### 내 안의 다양한 측면을 끄집어내라
- 우리는 나의 문화와 시대가 기대하는 역할을 순응하면서 다차원적인 측면이 줄어든다.
- 특정 성 역할에 지나치게 몰입하게끔 당신을 장악하는 경직된 태도를 버려라
- 사람들의 기대를 거슬러 남성성과 여성성 사이의 그 중간 영역을 탐험해라
- 문제에 직면하거나 남들의 저항에 부딧혔을 때 다른 방식으로 대응하는 법을 연습해라
- 만약 평소에 방어적이었다면 공격을 해보고, 반대의 경우 뒤집어서 해봐라
- 달라진 당신에 대한 사람들의 반응을 걱정하지말고 분류하기 힘든 사람이 되라
- 그러면 사람들은 당신이라는 사람에 매력을 느끼게 되고 당신은 사람들에게 어떤 모습을 보여줄지 자유자재로 바꿀 수 있는 힘이 생길 것이다.

### 상대의 억압된 부분을 포착해라
- 우리는 상대를 잘 파악하고 자신을 잘 안다고 생각한다.
- 하지만 우리는 사람에 빠지면 마치 취한 사람처럼 이성적이지 못한 행동을 한다.
- 사랑에 빠진 상대를 포착하면 그의 억압된 부분을 알 수 있다.

### 동성, 이성을 대할 때의 행동을 포착해라
- 내 자신이 반대의 성을 대할 때 보이는 다른 행동이 동성을 대할 때보다 부정적이라면 이를 인지하고 행동을 개선하자"
2023-04-20 16:55:04,"영동","함수형코딩 315~326 28일차

요약
체이닝 : 체인처럼 엮어 복합적인 계산을 표현한다.

비즈니스 로직 : 우수고객을 뽑은 다음 -> 가장 비싼 구매를 가져온다.

```javascript
function biggestPurchasesBestCustomer(customers){
    var bestCustomers = filter(customers, isGoodCustomer);
    var biggestPurchases = map(bestCustomers, getBiggestPurchases);
    return biggestPurchases;  
}

function isGoodCustomer(customer){
 return customer.purchaeses.length >=3;
}

function getBiggestPurchases(customer){
 return maxKey(customer.purchases, {total:0}, getPurchaseTotal)
}

function getPurchaseTotal(purchases){
return purchases.total
}  
```

체이닝의 목적은 코드의 가독성을 높이고, 중복을 줄이며, 비즈니스 로직을 간결하고 명확하게 표현하는 것이다.

```javascript
function biggestPurchasesBestCustomer(customers) {
  return customers.filter(isGoodCustomer)
                  .map(getBiggestPurchases);
}

const isGoodCustomer = (customer) => customer.purchases.length >= 3;

const getBiggestPurchases = (customer) =>
  Object.values(customer.purchases)
        .reduce((max, purchase) => max.total < purchase.total ? purchase : max, { total: 0 });
```"
2023-04-20 22:35:32,"강민규","여러분 다들 퇴근 다들 하셨나요? 벌써 목요일입니다. 이제 하루만 더 고생하면 이번 주는 안전해지니 힘내세요~~"
2023-04-20 23:49:13,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]315~ 326pg

[요약]

Ch13 Chaining - functional tools

- Learn to combine functional tools to do complex queries over data
- Understand how to replace complex, existing for loops with chains of functional tools
- Learn how to build data transformation pipelines to do work

[발췌]

One way to understand the functional tools is to figure out what they do at the extremes.

filter(array, function(_x) { return false;})

- > we prepend an underscore to indicate an unused argument

Map() filter() can be written in terms of reduce() but not the other way around

[메모]

MAX_VALUE, MIN_VALUE"
2023-04-20 23:57:23,"강민규","@정소영 @최창훈 @김형우 여러분 오늘은 이틀치 완수해주세요~ 휴일이 여러분을 기다리고 있습니다~ 화이팅!"
2023-04-20 23:58:02,"정소영","저 어제 분량은 냈습니다! 오늘 분량 곧 완료 예정임다"
2023-04-21 01:12:46,"Seo","4/19 수
https://seoshow.notion.site/DAY27-1d61bcd5f7544482a8f0f262a8a379e8

4/20 목 
https://seoshow.notion.site/DAY28-ddc89377f2784b2fa365f711f1c6e92f"
2023-04-21 01:17:04,"강민규","@김민수 @김채욱 님 오늘 이틀치 하셔야하네요 화이팅입니다~"
2023-04-21 01:31:08,"김민수","네네 외국갔다가 오늘 귀국해서 ㅎㅎ 일찍 사무실 나가서 밀린숙제 하려구요~"
2023-04-21 01:36:22,"이강욱","https://velog.io/@rivolt0421/Grokking-Simplicity-2728"
2023-04-21 01:36:38,"이강욱","함수형 코딩 예제코드 깃헙을 오늘 첨 알았습니다..."
2023-04-21 01:36:48,"이강욱","https://github.com/ericnormand/grokking-simplicity-code"
2023-04-21 01:53:48,"정소영","삭제된 메시지입니다."
2023-04-21 01:58:10,"정소영","넛지 파이널 에디션 (28일차)

3부 - 넛지가 우리를 부유하게 만든다

<요약 및 핵심> : “지금 당장 자제력을 발휘하는 것이 미래의 어느 시점에 발휘하는 것보다 훨씬 어려움.”

[‘미래를 위한 보다 더 많은 저축’ 설계]
자동가입의 적법성 사례 (자동가입을 적법하게 하려면?)
- 한 번에 저축 납입률을 높이는 것이 아닌, 나중에 이금이 오르면 그에 맞춰 높이겠다고 “사전에 결심하도록 독려”

• 미래를 위한 보더 더 많은 저축(점진적 저축 증대) : 심리학적 원인을 토대로 선택 설계 시스템을 만듦
- 많은 사람들은 저축을 더 많이 할 계획을 세워야 한다고 말하지만 실제로 그렇게 하지 못함. 
- 손실 회피
- 화폐 환상 : 손실은 실질 가치가 아닌 명목 가치로 느껴짐. 인플레이션율이 4%여도 임금 인상이 3%를 이득으로 생각. 눈에 보이는 삭감에 대해서는 강력하게 저항함
- 타성이 강력한 역할을 함 

• 지금 당장 납입률을 올리고 싶지 않은 사람 대상으로 해당 연금 제안. 머뭇거리는 사람 중 78%가 가입. 
- 연금 상담을 받겠다는 사람 90%. 그 중 상담사의 조언대로 납입률을 5% 올리는 것을 받아들인 사람이 25%. 나머지 사람에게 미래를 위한 저축 제도 제안. 그 중 75%가 가입 > 유지율도 높음 (인금 인상과 함께 일어나기에)

<생각>
후불제 결제 시스템에 해당 연금 설계 시스템을 도입해봐도 좋을 것 같음. 단 납입 기간에 대한 이슈가 있을 수 있겠다. 하지만 납입 여부 자체를 하지 않는 것을 막을 수 있을 수도."
2023-04-21 02:42:40,"김채욱","[네트워크_27차]
[내용 요약]

[BGP]

정의 : Border Gateway Protocol, 외부 게이트 웨이 프로토콜로 AS간의 라우팅 정보를 공유합니다. 

추가 설명 : 주요 기능으로는 새로 연결된 IP 접두사를 advertise합니다. 

종류 :

Internal BGP : 동일 AS안의 라우터간의 통신에 사용됩니다. 네트워크의 각 토폴리지의 상태 정보를 교환합니다. 주요점으로는 iBGP 연결은 모두 직접적으로 연결이 되어 있어야만 합니다.

External BGP : 다른 AS간의 라우터 연결시 사용됩니다. 이때 BGP 속성을 변경해 최적의 경로를 찾습니다. 대표적인 속성으로는 AS-path와 NEXT-HOP이 있습니다.

​

[AS-path와 NEXT-HOP]

AS-path 정의 : BGP 속성으로 도착지에 도달하기 위한 연속된 AS 루트를 의미합니다. 각 AS는 ASN 고유 번호가 있습니다. external BGP가 새로운 라우터를 advertise할 때, ASN을 AS-path 속성에 추가합니다. 

Loop prevention : AS-path에 현재 AS의 번호가 있으면 버립니다.

Path selection : AS-path를 이용해 최적의 도착지 경로를 정합니다. 짧은 AS-path일수록 최적의 경로인 경우가 보편적입니다.

NEXT-HOP 정의 : 도착지로 가기 위해 다음 라우터의 IP 주소를 설정합니다. external BGP가 advertise를 할시, NEXT-HOP속성에 인터페이스 IP주소를 설정합니다. 전달받은 라우터는 NEXT-HOP 속성을 이용해 적절한 다음 라우터를 선정합니다. 주로 advertising router's interface가 속성에 선정됩니다. 

​

[Hot Potato Routing]

정의 : 최적의 경로 탐색을 위해 직접 연결된 네트워크에서 가장 적은 비용의 경로를 선택합니다. ISP 네트워크 안에서 트래픽 비용을 줄입니다. 

​

[IP Anycast]

정의 : 멀티 서버나 장치가 동일한 IP주소를 공유해, 들어오는 트래픽을 가장 가까운 서버에 라우팅하는 기술입니다. 로드 밸런싱이나, latency 감소 등 클라이언트를 하여금 최적의 서버를 찾을 수 있습니다. 

추가 설명 : 클라이언트가 동일한 IP주소를 여러 군데에서 요청합니다. BGP와 같은 프로토콜로 최적의 서버 위치로 요청을 연결합니다. 이때 클라이언트는 anycast 여부 상관없이 IP주소로만 동작되는 것처럼 추상화 되어 있습니다. 

DNS, CDN에 사용되는 이유 :

Reduced latency : client 요청을 최적의 서버로 라우팅하는 것으로 응답 시간을 줄입니다.

Load balancing : anycast는 다수의 서버가 동일 IP주소를 사용할 수 있게합니다. 이는 트래픽 분산, 단일 서버 과부하 예방하는 역할을 합니다. 

​

[SDN 구성요소]

설명 : 네트워크 관리를 위해 제어 평면을 나누어 라우팅을 담당합니다. 논리적 중앙 집약적  제어 관리를 하며, 유연성과 확장성 그리고 효율성 면에서 유리합니다.

통신 계층 : SDN 컨트롤와 네트워크 장치와 통신을 합니다. 소통을 위한 프로토콜과 API로 구성되어 있습니다. 대표적으로 Openflow이 있습니다. southbound 프로토콜로 SDN 컨트롤러와 네트워크 장치 사이의 통신 역할을 합니다. 컨트롤러가 네트워크 장치의 플로우 테이블을 관리할 수 있게 트패픽을 관리합니다. 

네트워크 상태 계층 : 현재 네트워크 상태에 대한 정보를 지니는 계층입니다. 각 토폴리지의 설정값과 통신 상태정보들을 가지고 있습니다. SDN 컨트롤러가 네트워크 상태 계층에 대한 정보를 퇴신화 합니다.

네트워크 제어 응용 계층 : SDN 애플리케이션을 호스트하여서 중앙 관리를 합니다. northbound interface를 통해 SDN 컨트롤러와 소통합니다."
2023-04-21 03:03:07,"최창훈","[네트워크] 수요일
https://cautious-ocarina-cca.notion.site/Chapter5-181a20277c1448779b170f7a710977db"
2023-04-21 04:03:55,"김형우","[27일차]
https://engineer-diary.tistory.com/184"
2023-04-21 07:43:58,"강민규","사진"
2023-04-21 07:45:17,"강민규","여러분 오늘 벌써 금요일이네요 5주차도 이렇게 흘러갑니다. 최고로 즐거운 금요일 보내길 바라요~"
2023-04-21 07:57:44,"김민수","[27일차 수요일] 바바라 민토 논리의 기술
3부 논리적으로 문제 해결하기 - 8장 문제 정의하기

[요약]
일반적으로 회사에서 사용하는 문서들은 간단하게 작성되지 않기 때문에 문제를 정의하는 것이 어렵다.
자료 수집에 많은 시간과 비용이 소요되기도 하고 하나의 글을 작성하는 저자가 여러명일 수도 있다.
원하지 않은 결과를 원하는 결과로 만들기 위한 방법을 찾기 위해 어떻게에 대한 답을 구하는 것이 순차적 분석 프로세스의 초기 단계이다.
제안서와 보고서의 도입부를 쉽게 쓸 수 있도록 문제를 정확히 정의하는 방법

[발췌]
""전달하고자 하는 메시지를 결정하기 전에 분류하고 검토해야 할 사실이나 자료, 정보, 생각이 너무 많아서 정신을 차리지 못할 수도 있다.""
또한 저자가 너무 많을 수도 있다.

[메모]
저자는 때때로 지나치게 이상적인 것 같다. 하지만 이상을 지향해야함은 지당하다."
2023-04-21 07:57:52,"김민수","[28일차 목요일] 바바라 민토 논리의 기술
3부 논리적으로 문제 해결하기 - 8장 문제 정의하기 - 문제 정의 틀

[요약]
현재와 목표간의 간극을 이해하기 위해서는 그 간극의 성격과 중요성을 파악하고 있어야 한다.
문제를 파악/정의한 뒤 정의된 문제를 글로 바꾼다.

[발췌]
""문제 해결이라는 관점에서 현재 자신의 태도를 명확하게 한다.""
일은 상식에 맞게 해야한다. 때때로 나의 의견보다는 이치에 맞는지를 따지게 되는데 문제와 해결에 대하여 태도를 가지기 어려운 순간들이 항상 찾아오곤 한다.

[메모]
글에서 주장하는 바는 일관적이나 해결책이 구체화가 될 수록 복잡해지고 있다.
실제로 회사에서 해결해야 하는 문제들은 더욱 복잡한 문제일텐데 이 글쓰기 방법은 어느 정도로 중요한 글에 적용해야 하는지, 또한 어느 정도의 depth까지 활용해야 하는지에 대한 의문이 들었다."
2023-04-21 08:05:49,"김민수","[29일차 금요일] 바바라 민토 논리의 기술
3부 논리적으로 문제 해결하기 - 8장 문제 정의하기 - 문제 배치하기

[요약]
문제를 정확하게 정의하고 해결책을 찾아내는 첫 단계는 다음 4가지 요소를 구체적으로 정의하는 데서 시작된다.
1. 출발점, 시작 상황
2. 방해되는 사건
3. 원하지 않은 결과
4. 원하는 결과

[발췌]
""원하지 않은 결과는 해결하고자 하거나 혹은 직면하는 문제이면서 동시에 그가 이용할 개선 기회이기도 하다.""
해결책을 알고 있는 문제는 그저 기회이다. 원하지 않은 결과의 이유는 고객조차도 모르는 경우가 많다.
하지만 다양한 문제를 해결하다보면 경향성을 발견할 수 있을 것이다.

[메모]
원하는 결과를 수체적인 수치로 기술하는 것이 매우 어려운 일인 것 같다.
수치를 원하는 수준으로 제공하지 못하는 경우에 대한 두려움 때문이다.
책에서 말하듯 독자가 기존에 조치한 히스토리를 파악하고 그에 따라서 기대치를 파악하는 것이 중요하다."
2023-04-21 09:01:52,"길인식","삭제된 메시지입니다."
2023-04-21 09:02:11,"길인식","[목요일]
[데이터 중심 애플리케이션 설계]
[요약]
복제 데이터베이스는 대부분 최소한 최종적 일관성을 보장한다.
선형성은 강한 일관성 모델로 최신성을 보장한다는 말이다. 이는 직렬성과 혼동하기 쉬운데 직렬성 스냅숏은 선형적이지 않다
[발췌]
대부분의 시간동안 애플리케이션이 잘 동작할 수도 있기때문에 버그는 종종 미묘하며 테스트로 발견하기 어렵다. 321p
[메모]
분산 시스템의 가장 중요한 추상화는 무엇일까? 그 중 하나는 합의"
2023-04-21 09:07:29,"김현진","데이터 중심 애플리케이션 설계"
2023-04-21 09:07:58,"김현진","데이터 중심 애플리케이션 설계
금요일
https://ongoingjin.notion.site/W06-5-328-336p-67b40868c4f849c2ac63aa0a99fc44b1"
2023-04-21 14:04:55,"김효선","4/21 팩트풀니스

https://www.notion.so/2023-04-21-232-236p-4752ad3493d74e4bbe4af4ab8faa27b6?pvs=4"
2023-04-21 19:02:29,"영동","함수형코딩 327~336 29일차

요약

가진 것: 전체고객 배열
필요한 것 : 1번이상 구매한 고객들의 이메일 목록

```javascript
const 결과 = 고객배열.filter(한번이상구매)
                    .map(이메일)
```

and조건은 filter 2번 사용하면 됨.

앞으로 반복문은 map, filter, reduce를 사용해서 해결하자.


배열 일부에서만 동작 시키려면 해당하는 배열을 따로 만든다.
만든 subArray를 map으로 전체 반복시킨다.
복잡한로직을 단순하게 여러번 나눈다.

메모 : 
오늘 이 내용을 읽고 for문 찾아서 다 고쳤다."
2023-04-21 21:40:12,"강민규","여러분 다들 불금 즐기고 계신가요~ 저도 저의 집에서 친구와 좋은 시간을 보내고 있습니다! 데브시스터즈 다니는 개발자인데 혹시 만나보고싶은 분은 연락주세요~"
2023-04-21 21:41:39,"강민규","@김채욱 @김형우 @소재훈 @오홍근 @최창훈  여러분은 오눌 이틀분량으로 해주세요~"
2023-04-21 21:42:06,"강민규","언급되신 분은 확인 하시면 체크 표시 해주세요~"
2023-04-21 21:47:10,"Seo","4/21 
https://seoshow.notion.site/DAY29-d951454da0214f5c9acc583f219286db"
2023-04-21 22:28:35,"소재훈","28,29일차 컴퓨터 네트워킹 하양식 접근 제출입니다.
제출자: 소재훈

7.OpenFlow, ICMP
https://geode-drizzle-777.notion.site/7-OpenFlow-ICMP-17230e7b2480429da2bb38e3f87d3a0b 

1. 링크 계층 소개
https://geode-drizzle-777.notion.site/1-c6e6dc26b70d43379b38b1f8a766ca33 

2. 오류 검출 정정 기술
https://geode-drizzle-777.notion.site/2-ffd1a16131174f8baae4b2b9ed609249 

"
2023-04-21 22:32:15,"소재훈","오?! 저요! 커피챗인가요??🙋🏻🙋🏻"
2023-04-21 22:34:21,"강민규","오~ 관심이 있으신 분이 있다니 놀랍네요"
2023-04-21 22:34:41,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
일차: 29일차

### 젠더의 6가지 투영 유형 
1. 악마같은 로맨티스트
- 악마같은 로맨티스트는 난봉꾼처럼 보이지만 사랑하는 상대에게 많은 관심을 준다.
- 부모와 강렬하고 심지어 추파에 가까운 관계를 가진 경우, 이 악마같은 로맨티스트에게 끌린다.
- 하지만 이 유형에 끌리는 사람은 상상했던 것보다 더 많은 관심을 받지 못해 실망한다.
- 이 유형이 끌리는 사람은, 과거 부모에게 받았던 관심과 그에 수반한 권력을 얻는 걸 목표로 여기기 때문이다.
2.  규정할 수 없는 완벽한 사람
- 완벽한 사람에게 끌리는 유형은, 어린시절 어머니가 본인을 위해 늘 그 자리에 있지 않은 경우이다.
- 그런 사람은 자기 안에 채워져야할 공백이 있으며, 평생 그 여성성만을 쫓기에 현실의 여성에게 정착하지 못한다.
3.  매력적인 반항아
- 이 유형에 끌리는 사람은, 어린시절 부모가 냉담하고 엄격하며 가부정적인 경우가 많다.
- 사실 상대는 반항아가 아니라 게으르고 능력이 없는거지만, 마치 매력적인 반항아인 것처럼 여긴다.
4. 타락한 사람
- 타락한 사람은 미심쩍고 보호와 교육과 돈이 필요한 이를 말한다.
- 이 유형에 끌리는 사람은 마치 자신이 상대를 그 상황에서 구조해주려고 한다.
- 이 유형에 끌리는 사람은 대체로 어린 시절 강인한 어머니상을 가지고 있는 경우가 많다.
5. 우월한 사람
- 우월한 사람은 자기 확신이 매력적인 아우라를 형성하고 똑똑하고 유능한 이를 말한다.
- 이 유형에 끌리는 사람은 열등감을 가진 경우가 많다.
- 스스로 강인함이나 자신감을 키워본 적이 없기에 상대로부터 그 흔적을 찾으려 한다.
6. 나를 숭배할 사람
- 목표 지향적이고 야망이 크나 삶이 고달픈 사람은 나를 숭배할 사람에게 끌린다. 
- 이 유형에 끌리는 사람은 과거 어머니가 애지중지하고 많은 관심을 준 경우이다.
- 주로 상대에게 어머니처럼 행동하도록 유도한다.

### 본성으로 돌아가라
- 우리는 중년이 되면 정체성의 위기가 온다.
- 이 경우, 이제까지와는 다른 반대편에 대해 마음을 여는 것이 해결책이 된다.

1. 이제까지 전체에 초점 맞췄다면 개별에 초첨을 맞춰라 혹은, 개별에 초첨 맞췄다면 전체에 초첨을 맞춰라
2. 상황을 탐구하고 정복하는 사람이었다면 ↔ 반대로 한 발 물러서 여러 선택지를 깊이 고민해라
3. 실수를 저지렀을 때 외부에서 문제를 찾았다면  ↔ 반대로 내면에서 문제를 찾아라
4. 스스로 리더가 되려 열망했다면  ↔  집단의 사기를 유지하는 방향으로도 해봐라"
2023-04-21 23:51:27,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]327 ~ 336pg

[요약]

filter, map: create new arrays, add many items to them each time they are called

→ not inefficient b/c arrays are created and garbage-collected very quickly 

Clarify chains, method 1: Name the steps 

Clarify chains, method 2: Naming the callbacks

Tips

make data

operate on whole array

take many small steps

[발췌]

[메모]"
2023-04-22 01:39:10,"오홍근","[쏙쏙 들어오는 함수형 코딩][오홍근][day28-29]
315-336p
<요약>
- 체이닝 : 여러 단계를 하나로 조합하는 것
- 체인을 명확하게 만들기
  1. 단계에 이름 붙이기
  2. 콜백에 이름 붙이기
- 반복문을 함수형 도구로 리팩터링
  1. 데이터를 배열에 넣을 것
  2. 전체 항목을 반복
  3. 작은 단계로 분리"
2023-04-22 03:46:51,"김형우","[28일차]
https://engineer-diary.tistory.com/185"
2023-04-22 05:35:54,"최창훈","28일차 네트워크
https://cautious-ocarina-cca.notion.site/Chapter5-181a20277c1448779b170f7a710977db"
2023-04-22 07:54:28,"김채욱","[네트워크 28일차]
[내용 요약]

[SDN 컨트롤러 시나리오 : 링크 상태 변화]
설명 : 라우터간의 링크 상태에 변화가 생겼을 때, SDN 컨트롤러는 해당 상태 변화 정보를 받아 라우팅 계산을 합니다. 링크 상태의 변화는, 물리적 단절, 혼잡, 유지보수 등의 경우에서 발생합니다.

링크 단절 시나리오 : 

Detecting the link state change : 라우터가 연결된 다른 라우터와의 단절을 감지하면, SDN 컨트롤러에게 알립니다. 추가로 네트워크 모니터링 매커니즘에 의해 상태 변화를 알려질 수도 있습니다.

Updating the network topology : 링크 상태 관리자는 링크 상태 데이터베이스를 갱신합니다.

Recalculating routes : 새로운 링크 상태 정보는 네트워크 관리자 응용 프로그램에서 라우팅 됩니다.

Pushing new flow rules : 라우티 이후, 플로우 테이블을 수정합니다. 이후, 오픈 플로우를 이용해 갱신되어야하는 스위치들의 플로우 테이블을 계산합니다.

​

[ICMP]

정의 : Internet Control Message Protocol, 장치간의 통신 제어 및 에러 정보 교환을 위해 사용되는 프로토콜입니다. 주 사용은 IP관련 송수신 이슈를 진단하는데 사용됩니다. 

구성 : 

타입 : 8 비트 필드로 ICMP 메시지 타입을 선정해서 메시지의 목적을 나타냅니다.

코드 : 8 비트 필드로 타입의 추가 정보를 나타냅니다.

체크섬 : 16 비트 필드로 에러 확인에 사용됩니다.

payload : 메시지 타입과 코드에 따라 전달되는 메시지 페이로드가 달라집니다. 

​

[SNMP]

정의 : 네트워크 장치를 관리 및 모니터링하기 위한 프로토콜입니다. 네트워크 관리자가 네트워크 구성 요소들의 성능, 설정, 상태를 수집하는 것을 가능케 합니다.

주요 구성 :

Managed devides :  모니터링 할 네트워크 장치들(라우터, 스위치, 서버 등)입니다. 각 장치들은 SNMP 에이전트를 실행해 호스트 상태 정보를 관리 서버로 보냅니다.

SNMP agents : 소프트웨어 컴포넌트로 관리 대상 장치에서 동작합니다. 특정 이벤트 발생시 정보를 전송합니다.

Network management systems : 중앙 서버로 SNMP agent와 통신을 하여서 데이터를 수집, 처리, 분석합니다.

PDU : NMS와 agent간의 데이터 정보 교환을 위한 정보 단위입니다. SNMP 메세지 안에 캡슐화되어 있습니다. 이후에는 주로 UDP 데이터 그램의 페이로드에 실립니다.

구성 헤더 : 

타입 : 실행 형태로 요청인지 혹은 실행인지 나타냅니다. (GetRequest, SetRequest, Response 등)

요청 ID : NMS 요청을 나타내는 고유 번호로, 해당되는 agent를 찾는데 사용됩니다.

에러 상태 : SNMP 수행 성공 여부를 나타냅니다. 응답 PDU에서 해당 정보를 포함합니다.

​

​

Chapter 5 Review Questions

​

SECTION 5.1

1) What is meant by a control plane that is based on per-router control?

per-router란 하나의 라우터에 하나의 라우팅 알고리즘이 진행된다는 의미이다.  다른 라우터와 통신을 하며 포워딩 테이블의 값을 계산한다. 개별적으로 포워딩과 라우팅을 하는 것을 per-router라 한다

​

2) What is meant by a control plane that is based on logically centralized control?

논리적 집합으로 구성한 제어평면은 데이터 평면의 기기와 분리되어 포워딩 테이블을 값을 따로 배분한다.

​

​

SECTION 5.1

1) Give an example of a routing protocol that takes a centralized and a decentralized approach.

논리적 중앙 집합적 알고리즘은 다익스트라 알고리즘을 활용하는데, 전체의 노드와 엣지의 값을 안다는 전제조건에서 최소비용으로 라우팅되는 값을 도출한다.

개별적 알고리즘에서는 하나의 라우터에 연결된 여러 링크의 값만을 이용해 다른 라우터와의 지속적인 정보교류를 통해 최소 비용을 도출한다.

​

2) Compare and contrast link-state and distance-vector routing algorithms.

link state은 소스와 도착지의 최소비용 경로를 도출하는 것으로 전체 노드와 링크를 알아야한다.

distance-vector은 하나의 라우터 노드는 이웃 노드까지의 비용만 알기에 서로간의 비용 정보 교류로 최소비용을 도출한다.

​

3) What is the “count to infinity” problem in distance vector routing?

distance-vector 라우팅에서 발생할 수 있는 무한 카운팅은 링크 비용의 값이 증가하여서 다른 경로로 가기까지 반복하는 횟수를 의미한다

​

4) Is it necessary that every autonomous system use the same intra-AS routing algorithm?

Why or why not?

각각의 AS들은 다른 라우팅 알고리즘을 활용한다. 단 AS 내부에서는 하나의 알고리즘으로 통일한다

​

​

SECTIONS 5.3–5.4

​

1) Why are different inter-AS and intra-AS protocols used in the Internet?

크게 정책적, 확장성, 성능의 이유로 2개의 다른 프로토콜을 선택한다.

정책적 문제로인해 inter와 intra AS 프로토콜이 상이하다. intra같은 경우 하나의 관리조직에 의해 통제되기에 하프로토콜 설정이 상대적으로 덜 중요하지만 AS간의 트래픽 전달은 중요하기에 상이한 프로토콜이 되었다.

​

2) When an OSPF route sends its link state information, it is sent only to those nodes directly attached neighbors. Explain.

OSPF란 open shorteest path first으로 하나의 AS안에 동작하는 LS 라우팅 프로토콜이다.

AS내부에 있는 모든 라우터들에게 LS 정보를 브로드캐스팅한다. 모든 라우터에서 최신정보로 업데이트를 하여야만 Dijkstra 알고리즘을 사용가능하다.

​

3) What is meant by an area in an OSPF autonomous system? Why was the concept of an area introduced?

특정 지역은 라우터들의 집합으로 서로간의 브로드케스팅이 가능하다. OSPF AS는 지역간의 계층이 존재하는데, 이는 확장성을 위한 것이다. 

​

4) Define and contrast the following terms: subnet, prefix, and BGP route.

​

subnet은 커다란 네트워크의 일부를 지칭하는 것으로 라우터를 포함하고 있지 않다. 라우터와 호스트 인터페이스를 경계로 정의가 된다

*서브넷은 네트워크 A/B/C/D로 나누어 개별 기관의 호스트 주소를 적절히 나눌 수가 없기에 나왔다. 

prefix는 a.b.c.d/x형태로 하나 이상의 서브넷을 포함한다. 서브넷 마스크의 1의 개수를 표기한 것이 x이다

BGP 라우터는 prefix와 속성을 담은 것이다

​

5) How does BGP use the NEXT-HOP attribute? How does it use the AS-PATH attribute?

​

as-path란 목적지 주소까지 가는데 거쳐가는 AS들의 주소이다. 이는 여러 paths중에서 경로를 선택시 사용된다. 

next-hop란 목적지까지 가기위한 다음 라우터나 경로를 의미하는데, 포워딩 테이블 설정시 사용된다

​

6) Describe how a network administrator of an upper-tier ISP can "
2023-04-22 11:04:09,"강민규","사진"
2023-04-22 11:06:28,"강민규","여러분 즐거운 주말입니다. 이제 다음 주면 책너두 3기도 시작되네요.

가장 힘든 5주차도 이제 무사히 넘었습니다. 다들 주말 잘보내세요!!"
2023-04-22 18:23:20,"김현진","데이터 중심 애플리케이션 설계
토요일
https://ongoingjin.notion.site/W06-6-337-349p-bb4f7ccad3b04e0ab893336a7ff61d7e"
2023-04-22 19:09:52,"김효선","4/22 팩트풀니스

https://www.notion.so/2023-04-22-237-241p-e448de67029741728c5401332e23bc69?pvs=4"
2023-04-22 20:23:32,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
일차: 30일차

### 인생의 소명을 발견하고 지침으로 삼아라
- 우리는 세상에 일관되고 성숙한 얼굴을 보여주고 싶어한다.
- 그러나 속으로는 주어진 환경에 따라 여러가지 얼굴을 갖고 있다는 사실을 알고 있다.
- 우리는 순간순간의 기분에 따라 비이성적일 수 있다.
- 우리에게는 여러가지 얼굴이 있기에, 떄로는 이 얼굴의 충돌이 우리를 고통스럽게 한다.

- 이 딜레마의 해결책은 ‘나 자신의 소명, 인생의 과업을 찾는’ 것이다.
- 목적의식을 찾는다면 우리는 모두가 갈망하던 통일성과 방향성이 생길 것이다.
- 살아야할 이유를 가진 사람은 과정이 어떻든 참아낼 수 있다.

### 인생의 과업을 찾는 법
- 우리의 내면에서 목소리가 있다.
- 만약 성격에 맞지 않는 커리어를 가려고 하면 불편한 기분의 형태 목소리가 경고한다.
- 그리고 당신의 천성과 어울리는 활동이나 목표가 있는 곳으로 알려줄 것이다."
2023-04-22 22:33:22,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]337 ~ 346pg

[요약]

Tip3: Take many small steps

Summary of chaining tips:

- make data
- operate on whole array -process whole array uniformly as a single operation?
- take many small steps
- replace conditionals with filter()
- extract helper functions
- experiment to improve

Debugging tips for chaining

- keep it concrete: use clear names
- print it out: for really complex chain, add one step at a time and check the result before you add the next
- flow your types

[발췌]

[메모]

lodash"
2023-04-22 23:26:04,"김채욱","[네트워크_29+30일차]
내용 요약

[링크 계층 개요]

설명 : LAN에서 노드간의 데이터 전송을 담당한 계층입니다. 여행객은 데이터그램, 교통편은 링크, 운송 방식은 링크 계층 프로토콜, 여행사 직원은 라우팅 프로토콜로 비유합니다. 

주요 용어 :

node : 네트워크에 포함된 장치나 개체를 의미합니다. 데이터를 전송하고 수신하는 모든 걸 의미합니다. 고유 MAC 주소를 지니고 있으며 NIC를 가지고 있습니다.

link : 두 노드간의 물리적, 논리적 연결을 의미합니다. 연결은 케이블, 와이파이 등에 의해 연결됩니다. 

주요 특징 :

프레임화 : 데이터그램을 캡슐화합니다. 링크 계층 프로토콜 별로 상이한 구조를 띄웁니다. 주로 헤더에는 전송자와 도착지의 MAC 주소, 오류 검출, 오류 정적 비트가 담겨 있습니다. 

링크 접속 : Medium(Multy) Access Control, 매체 접속 제어 프로토콜이 링크상으로 프레임을 전송하는 규칙을 명시합니다. 

신뢰적 전달 : 확인 응답과 재전송으로 신뢰적 전달을 합니다. 다만, 물리적 연결로 된 경우 오류가 적어 오류 검출 헤드가 오버헤드가 될 수 있어서, 신뢰적 전달을 제공하지 않을 수도 있습니다.

오류 검출과 정정 : 프레임 헤더의 오류 검출 비트를 검사해서 정정까지 가능합니다.

​

[NIC&network adapter]

설명 : network interface card와 network adapter는 거의 동일한 용어입니다. 컴퓨터나 네트워크 장치의 하드웨어 컴포넌트입니다. 네트워크상에서 다른 장치와의 소통을 위해 사용됩니다. 

주요 기능 : 

Data Transmission and Reception : 올바른 프로토콜로 네트워크에서 다른 데이터를 전송, 수신 합니다.

Addressing : 각 network adapter는 고유 MAC주소를 할당 받습니다. 링크 계층 LAN에서 소통을 위한 주소입니다.

Converting Data : 데이터를 네트워크 상에 맞게 형태를 전환해 전송합니다.

Interfacing with the Network Medium : 네트워크 미디엄(와이파이 접속 포인트, 이더넷 케이블)의 연결점으로 사용됩니다.

​

[링크 계층 역할 - SW,HW]

설명 :  컴퓨터 호스트에서는 링크 계층의 업무가 SW와 HW로 나누어 집니다.

소프트웨어 :

Protocol Implementation : 링크 계층 프로토콜을 적용합니다. 프레임 생성, 에러 확인, 흐름제어 등과 같은 알로리즘 관리를 합니다.

Device Drivers : 호스트 운영체제가 네트워크 어댑터를 관리할 수 있게 합니다.

Network Stack : 네트워크 계층과 링크 계층의 데이터 교환을 관리합니다. 

하드웨어 :

Network Interface Card : 올바른 네트워크 미디엄 형태로 데이터 전환을 합니다.

Addressing : 고유 번호가 있어서, 로컬 네트워크에서 소통시 사용됩니다.

Physical Conenctions : 다른 장치와 물리적 연결시 사용됩니다.

Error Detection : 프레임 에러 검출을 하드웨어에서 합니다.

​

[오류 검출 방법]

설명 : 프레임 헤더에 오류 검출 비트(EDC- error detection correction)를 추가합니다. 수신 노드는 EDC를 활용해 EDC외의 비트가 변하였는지 확인합니다. 오류가 없으면 데이터그램을 상위계층으로 보내고, 오류가 있으면 drop out합니다.

방법 :

패리티 검사 : 패리티 비트 0과1를 세팅합니다. 수신 노드는 비트 1의 개수가 짝수 혹은 홀수 여부에 따라 오류 검출을 합니다. 

2차원 패리티 : 순향향 오류 정정이 가능해 재전송할 필요 없이 수신 노드에서 비트 수정을 합니다.

체크섬 : 데이터 블록을 특정 세그먼트(16비트)로 나누어 1의 보수를 취해서 합이 전부 1이 되는지 여부로 에러를 검출합니다.

CRC : cyclic redundancy check, 순환중복검사로 양 노드가 전한 G(geneator)의 비트패턴으로 데이터 블록을 나누고 나머지가 CRC 값입니다. 이 CRC값을 데이터 블록에 덧붙이고 송신합니다. 수신 노드가 동일한 계산 후, 데이터블록에 붙여진 CRC값이 같으면 error-free입니다.

​

[다중 접속 프로토콜]

설명 : 대부분 링크는 점대점 링크로 구성되어서, 링크의 양쪽 끝은 하나의 노드로 구성되어 있습니다. 하지만 브로드캐스트 링크는 하나의 링크의 다수의 노두가 송수신을 하면서 충돌 문제가 있습니다. 이를 관리하는 프로토콜이 다중 접속 프로토콜입니다.

종류 :

Channel Partitioning Protocols : 하나의 bandwidth를 분할해서 통신합니다. TSM 방식인 시간 슬롯으로 분할과 FDM 방식인 bandwidth 분할이 있습니다.

Random Access Protocols : 특정 규칙 없이 데이터 전송을 합니다. 충돌 발생의 위험이 있어, 재전송을 합니다.

CSMA/CD : carrier sense multiple access with collision detection, 이름처럼 전송 전에 링크의 상태를 확인 후 전송을 하되, 링크 탐지 시간에 맞불려 다른 노드에서 데이터를 전송해 충돌이 일어나면, 빠른 충돌 탐지로 일정 시간 후 재전송을 합니다.

Taking Turns Protocols :  네트워크 접근을 정해진 규칙에 의해 전송합니다. 네트워크 load가 높을 시 효율성이 좋습니다. 각 노드별 균등한 네트워크 전송을 보장하며, 충돌 문제를 회피 할 수 있습니다. 다만 네트워크 load가 낮을 시, 채널 이용율이 낮아지며, 일정 turn을 불필요하게 넘기기에 latency와 오버헤드가 생깁니다.

Polling : master 장치(컨트롤러, 스위치)가 여러 클라이언트의 접속을 관장합니다. 일정 주기 별로 polls를 나누어 데이터 전송을 시킵니다.

Token Ring : 특별한 프레임인 토큰을 장치별로 순환합니다. 해당 토큰을 가진 자치가 데이터 전송을 합니다. 일정 주기 후 다음 장치로 토큰을 반환합니다."
2023-04-23 00:51:22,"최창훈","네트워크 29일차

https://cautious-ocarina-cca.notion.site/Chapter5-181a20277c1448779b170f7a710977db"
2023-04-23 02:29:35,"정소영","넛지 파이널 에디션 (29일차)

3부 - 넛지가 우리를 부유하게 만든다
10장 - 넛지는 영원히 계속될까

스웨덴의 퇴직연금제도 사례로 보는 넛지

선택의 다양성을 포하뫠 모든 형태의 설계나 구조에서는 세부 사항 하나하나가 전부 중요하다. 
선택지의 가짓수를 최대로 늘리는 것과 기본 설정의 효과가 약화될 가능성, 타성의 힘 등과 관련된 문제에 대해 세부사항이 한층 중요한 교훈을 줌 

• 스웨덴 연금제도 특징 : 선택 우선주의(최대한 많은 선택지를 제시해 사람들이 원하는 것을 선택하게 하는 전략) 
- 의무 + 기본 설정 펀드 + 선택지 가짓수 극대화
• 생각해볼 수 있는 것 : 인간에게 많은 설득권을 주면 오히려 온갖 문제가 일어나지 않는가? "
2023-04-23 02:29:58,"정소영","넛지 파이널 에디션 (30일차)

3부 - 넛지가 우리를 부유하게 만든다
10장 - 넛지는 영원히 계속될까

• 기본 설정 펀드와 스웨덴 국민의 선택
- 설계자 : 기본 설정 펀드가 선정되어 있지만, 가입자가 이것을 선택하지 않도록 유도한다.
- 설계자가 해당 기본 설정펀드를 어떻게 설명할지 미리 판단해야 하는 것과 그 결과는 기본설정펀드의 시장점유율에 영향을 미칠 것 
- 넛지의 승리는 광고. 펀드 공익광고*상업광고로 가입자 2/3가 스스로 포트폴리오를 만듦
> 이때, 가입자들은 큰 이득과 손실이 걸려 있을 때 능동적인 선택자가 될 가능성이 높았음 

• 능동적인 선택자는 좋은 선택을 할까
- 기본 설정보다 10% 이상 주식에 설정 : 당시 주식이 호황이였어서.
- 능동적인 선택자는 투자금의 절반이상을 스웨덴 기업에 투자. -> 자국 평향 현상 : 세계 경제 1% 차지하는 스웨덴에 투자는 합리적이지 않음
- 투자자는 전통적으로 과거의 수익률과 미래의 예상 수익률을 명확하게 구분하지 못함

•능동적인 선택자는 좋은 선택을 할까 => no "
2023-04-23 14:16:47,"길인식","[금요일]
[데이터 중심 애플리케이션 설계]
[요약]
애플리케이션에서 유일성 제약 조건 등을 위해 선형성이 필요하다고 생각하지만 실제는 외래키나 속성 제약 조건 등은 선형성 없이도 구현 가능하다
선형성을 제거하는 이유는 내결함성이 아니라 성능때문이다.
[발췌]
선형성이 필요없는 애플리케이션은 네트워크 문제에 더 강인하다. 354p
다중코어 CPU의 RAM조차 선형적이지 않다. 355p
[메모]
트레이드오프를 고려해서 무조건적 선형은 지양하자"
2023-04-23 16:07:14,"강민규","여러분 다들 잘지내고 계신가요? 제가 심심해서 책너두 2기에 가장 언급을 많이 당하신 분이 누군지 확인을 해보았습니다! 여러분도 알고싶으신가요?"
2023-04-23 16:07:51,"정소영","이모티콘"
2023-04-23 16:10:18,"강민규","소영님이 2등으로 많이 언급되셨네요! 많이 언급된게 꼭 탈락 위기에 많이 놓였다는 뜻은 아닙니다 ㅎㅎ"
2023-04-23 16:10:43,"이미정","이모티콘"
2023-04-23 16:11:30,"정소영","휴우 1등은 아니군요 ~ "
2023-04-23 16:12:12,"강민규","1등은 책너두 1,2,3기에 모두 참여하신 메타인지가 매우 높으신 분입니다"
2023-04-24 00:29:57,"이강욱","https://velog.io/@rivolt0421/Grokking-Simplicity-2930"
2023-04-24 00:29:58,"길인식","[토요일]
[데이터 중심 애플리케이션 설계]
[요약]
순서화가 인과성을 보장하는데 도움을 준다 이를 위해 램포트 타임스탬프나 전체 순서 브로드캐스트, 선형성 일련번호 생성기 등을 사용할 수 있다.
[발췌]
선형성은 인과성을 보존하는 유일한 방법이 아니다. 340p
[메모]
선형성 일련번호 생성기는 블록체인을 닮았다. 이도 고민하다 보면 합의 알고리즘에 도달한다"
2023-04-24 00:34:29,"강민규","@김형우 형우님 독서일지 잊고계신건 아니지요? 이틀치 분량 올려주세요~"
2023-04-24 03:31:22,"김형우","[29일차]
https://engineer-diary.tistory.com/186"
2023-04-24 03:31:28,"김형우","[30일차]
https://engineer-diary.tistory.com/187"
2023-04-24 07:40:52,"강민규","사진"
2023-04-24 07:41:28,"강민규","이번주도 잘 진행하시고 독서일지로 아름답게 하루 끝내보시죠 ㅎㅎ "
2023-04-24 11:06:12,"영동","함수형코딩 337~358 (30, 31일차) 이틀치 분량

체이닝 팁
- 데이터만들기 : 함수형 도구는 배열 전체를 다룰 때 잘 동작한다. 특정 배열중 일부를 다룰 때는 그 일부를 다른 배열로 생성해야 한다.

- 배열 전체 다루기 : map, filter, reduce로 배열을 처리한다.

- 작은 단계로 나누기 : 알고리즘이 한번에 많은 일을 한다면 두 단계 이상으로 나눈다.

- 조건문을 filter로 바꾸기

- map filter reduce 말고도 다른 함수형 도구가 많다. 함수를 추출하고 좋은 이름을 붙여 사용하자


체이닝 디버깅을 위한 팁
- 구체적인 것은 유지하기 : 명확한 이름을 쉽게 지어야 한다.
- 단계 사이에 print해보기


- 구매 리스트를 장바구니로 만들기
```javascript
const 구매 내역 = [a,b,c,d,e] 
1. 장바구니에 없는 물건을 처음 입력하는 경우
2. 이미 장바구니에 있는 경우
                      
if (장바구니에 item name이 없으면){
구매내역.reduce(addItem, {name, quantity:1, pricepriceLookup(item)})
}else{
  const 수량 = cart[item].quantity;
  cart[item].setFieldByName('quantity', quantity+1)
}            
                      
```

- 함수형 도구는 체인으로 연결할 수 있다
- 함수형 도구를 체인으로 연결하는건 SQL같은 쿼리언어로 볼 수 있다.
- 체인을 연결할 때 기존 데이터를 인자로 사용하거나, 새로운 데이터를 반환해야 하는 경우가 있다. 최대한 정보를 명시적으로 처리해야한다.

"
2023-04-24 11:06:14,"김현진","데이터중심 애플리케이션 설계
월요일
https://ongoingjin.notion.site/W07-1-349-356p-a30a225231344ce4a97f659007959514"
2023-04-24 17:46:58,"소재훈","30일, 31일 컴퓨터 네트워킹 하양식 접근 제출입니다.
제출자: 소재훈

3. 다중 접속 링크와 프로토콜
https://geode-drizzle-777.notion.site/3-c4cec0f3ae1d4dfb9fad9d2f21f4fe9a 

4.스위치 근거리 네트워크
https://geode-drizzle-777.notion.site/4-42eb40e4be4a49dd80b267b5fd1eb653 "
2023-04-24 18:48:54,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
일차: 31일차

### 개성을 찾고 발전시켜라
- 인간은 타고난 본성이 ‘방향성’을 갈망한다.
- 모든 인간은 철저한 개성을 가지고 있는데, 이 개성은 DNA, 뇌구조, 경험으로 구성된다.
- 이 개성은 우리가 태어날 때 심어져 있던 잠재적 성정상을 지난 씨앗이다.
- 우리는 이 개성에 접속해 개발하려고 해야한다.
- 본인의 소명과 방향성을 가진 사람은 위기가 와도 크게 방향이 흔들리지 않는다.

### 인생의 장애물을 해쳐나가는 전략
1. 인생의 소명을 발견해라
2. 저항과 부정적 자극을 이용해라
3. 목적이 주는 에너지를 흡수해라
4. 작은 목표로 된 사다리를 만들어라
5. 일에 온전히 몰두해라"
2023-04-24 20:55:38,"강민규","여러분 주말에 쉬다가 다시 하시려니 힘들진 않으신가요~ 이주차가 심적으로 가장 힘들 때입니다. 이번주만 잘 넘기시면 통계적으로 약 90프로 완주하니 힘내봅시다!

라고 2주차 첫날에 말했었네요! 역대 최고의 완주율을 자랑하는 2기 계속 화이팅 합시다!!"
2023-04-24 22:25:22,"강민규","@길인식 @김민수 @오홍근 @최창훈 @Seo 
선생님들 요새 감기가 유행인데 아프신건 아니지요? 잘하시던 분들이 연락이 없으니 걱정이 되네요…. 오늘 월요일이니만큼 이틀치 분량하여 지난 주 것은 청산하고 새롭게 시작해봅시다~~"
2023-04-24 22:28:07,"김민수","감기... 조심하세요..."
2023-04-24 22:29:35,"김민수","사진 5장"
2023-04-24 22:29:36,"김민수","감기와 바꾼 사진 보내드립니다..."
2023-04-24 22:29:54,"김효선","4/24 팩트풀니스

https://www.notion.so/2023-04-24-242-254p-7a26551bd16a4a539d7b5d90498be8c3?pvs=4"
2023-04-24 22:30:47,"김민수","사진"
2023-04-24 22:30:50,"김민수","미국감기약 추천드립니다..."
2023-04-24 22:31:09,"김민수","이모티콘"
2023-04-24 22:32:03,"김연정","바꿀만 했네요~ ㅋㅋㅋ👍"
2023-04-24 22:33:26,"강민규","감기약 이름 앞에 나이 가 붙어있으면 밤에 먹는 감기약이라는 사실 아시나요? 감기약에 예기치 못한 부작용으로 졸음이 있었는데, 그것을 저녁용 감기약이라고 리패키징하여 팔기시작했다고 합니다.

출처 -7가지 코드"
2023-04-24 23:28:47,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]347 ~ 358pg

[요약]

augment the data: common functional technique

- help build better chains of functional tools
- when chaining, think about whether augmenting the data you are returning would help a later step in the chain

line up dots - long line of vertical dots means you’re using the functional tools together well

- becomes more like a pipeline with input data coming at the top and output data coming out of the bottom

chains: multistep process

chaining functional tools lets you express complex queries over arrays of data

Ch14 : Functional tools for nested data

- build higher-order functions that operate on values stores in hash maps
- learn to easily operate on deeply nested data with higher-order functions
- understand recursion and how to do it safely
- understand when to apply abstraction barriers to deep nested entities

make the field name explicit

[발췌]

[메모]"
2023-04-24 23:31:31,"김채욱","[네트워크_31차]

[내용 요약]
[네트워크 계층과 링크 계층의 차이점]

설명 : 네트워크 계층의 라우터 테이블은 다른 네트워크 혹은 서브넷에 패킷을 전달하기도 하지만, 동일 네트워크에서 다음 홉으로 가기위해 패킷을 전송하기도 합니다. 하지만 논리적 주소인 IP 주소로 상이한 네트워크 간의 통신을 하는 것이 핵심 목적입니다.

목적 :

네트워크 계층의 주요 목적은 패킷 라우팅과 포워딩을 통한 상이한 네트워크 사이로 패킷을 전송하는 것입니다.

링크 계층의 목적은 동일 네트워크 혹은 서브넷에서 물리적 장치간에 통신입니다.


[MAC 주소]

정의 : 네트워크 인터페이스에 고유번호가 할당된 2계층 통신 주소입니다.

추가 설명 : 주로 48 비트의 16진수 형태로 되어서 6개 단위와 2개의 문자로 되어 있습니다. 처음 24비트는 IEEE에서 주관한 고정 번호이고 나머지 24비트는 제작사에서 선정한 번호입니다.

활용 : LAN 혹은 동일 네트워크 안에서 2계층 통신간의 데이터 교환시 사용됩니다. MAC주소가 일치해야 다음 상위 스택으로 패킷을 올립니다. 때때로 MAC 브로드캐스트 주소로 모든 노드에게 전송하기도 합니다.


[ARP]

정의 : Address Resolution Protocol, 네트워크와 링크 계층 사이의 프로토콜로 IP주소와 MAC 주소의 변환을 해줍니다.

추가 설명 : 각 호스트와 라우터는 ARP 테이블을 가집니다.

형태 : IP 주소, MAC주소, TTL 행태로 행을 이룹니다.

활용 :

ARP Request : 도착지로 패킷을 전송하기 위해서 전송자는 브로드캐스트 형태의 ARP 요청을 LAN에 보냅니다. 전송자의 패킷에 도착지 패킷을 가진 MAC주소를 가진 호스트는가 요청을 받습니다.

ARP Response : 최종 도착지 혹은 동일 서브넷 안에서 다음 홉의 경계점에 있는 호스트가 응답을 보냅니다. 그리고 다음 홉 혹은 네트워크로 요청을 보냅니다.


[이더넷]

정의 : LAN에서 사용되는 소통 프로토콜입니다. 2계층에서 사용되며 데이터 통신에 사용됩니다.

주요 구성 :

Frame Structure : 정해진 형태로 데이터를 전송합니다. 다수의 필드, 송신/수신 MAC 주소, 이더넷 타입, 페이로드, CRC로 이루어져있습니다.

MAC Addressing : 이더넷은 MAC주소를 이용해 LAN에서 통신합니다.

CSMA/CD : 해당 프로토콜을 이용해 데이터 통신을 합니다.

데이터 속도 호환 : 장치 네트워크 인터페이스 간의 데이터 처리가 다르지만, 이더넷 프로토콜은 송수신 처리 호환을 보장합니다.
"
2023-04-25 00:14:19,"김형우","삭제된 메시지입니다."
2023-04-25 00:14:35,"김형우","[31일차]
https://engineer-diary.tistory.com/188"
2023-04-25 00:23:26,"Seo","4/22 토
https://seoshow.notion.site/DAY30-ec8451023eca4967ac3b5c48b00f998f

4/24 월
https://seoshow.notion.site/DAY-7f55f6f332e64cadade213348dce2311"
2023-04-25 00:50:01,"길인식","[월요일]
[데이터 중심 애플리케이션 설계]
[요약]
단일 노드에서 트랜잭션 커밋은 순서에 결정적으로 의존한다. 여러 노드가 관여하면 2단계 커밋을 서용한다.
코디네이터는 2단계 커밋에서 트랜잭션 관리자이다. 이는 커밋중에 죽으면 다른 참여자는 코디네이터가 복구될때까지 기다린다.
[발췌]
2pc는 분산 데이터베이스에서 원자적 커밋을 제공하는 반면 2pl은 직렬성 격리를 제공한다.
[메모]
3단계 커밋이 제안되었으나 완벽한 장애 감지기가 필요해서 잘 쓰이지않음"
2023-04-25 00:50:29,"길인식","금, 토 내용은 저번에 올렸습니다~"
2023-04-25 01:15:54,"최창훈","토요일
네트워크

https://cautious-ocarina-cca.notion.site/Chapter-6-0c310d7e6df9476997a389020a366024"
2023-04-25 07:24:06,"오홍근","[쏙쏙 들어오는 함수형 코딩][오홍근][day30-31]
337-358p
<요약>
- 체이닝 각 단계의 이름을 쉽게 지어 디버깅할 수 있도록 한다.
- 인자를 데이터로 만들어 체이닝하기 유리하게 만든다
- 점 연산자를 통해 체이닝한 것을 수직으로 정렬
- 함수형 도구를 이용하면 중첩된 데이터를 쉽거 다룰 수 있다"
2023-04-25 07:46:56,"강민규","@김민수 민수님 독서일지 제출을 잊으셨나요??"
2023-04-25 07:47:12,"강민규","사진"
2023-04-25 07:49:08,"강민규","여러분 32일차가 시작되었습니다! 오늘도 좋은하루 보내봐요"
2023-04-25 09:20:55,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]359 ~ 370pg

[요약]

update(): doesn’t modify the original hash map, uses copy-on-write discipline

returns a modified copy o the hash map you pass it

1) express implicit argument and 2) replace body with callback

steps of replace get, modify, sit with update9):

1) identify the get, modify and set

2) replace the code with a call to update(), passing the modify operation as a callback

what update() needs: 1) object to modify, 2) key for where to find the value to modify 3) the function to call to modify the value(calculation)

[발췌]

[메모]"
2023-04-25 12:30:20,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
일차: 32일차

### 가짜목적의 함정
- 목적을 찾는 건, 인간의 본성이다.
- 그 이유는 우리는 나의 행동을 인도하고 제한할 방향성을 필요로 하기 때문이며, 두번째 이유는 나라는 개인보다 더 큰 무언가를 느끼고 나를 초월할 무언가에 연결되고 싶기 때문이다.
- 그러나 이 목적성을 값싸게 만들고 싶어하는 경우가 있다.
- 최소한의 노력으로 가장 쉽고 편한 방법으로 목적과 초월성을 찾아내려 한다.
- 그런 사람들은 가짜 목적에 자신을 넘긴다.

### 가짜 목적의 종류
1. 쾌락 추구: 반복적으로 쾌락을 추구하며, 쾌락이 반복될 수록 둔감해잔다.
2. 대의와 사이비 종교
: 인간은 무언가를 믿고 싶어하는 욕구가 있는데, 그 공허함을 채우려 사소한 대의와 사이비종교에 빠진다.
: 이에 빠진 사람들은 특별한 진실을 아는 집단이라는 우월감을 느끼곤 한다.
3. 돈과 성공
: 돈과 지위는 상대적이며 끝이 없기 때문에, 언제가 충분한지 알기 어렵다.
: 그래서 여정은 끝이 없고 진이 빠져버린다.
4. 관심: 매 순간 관심이 조금이라도 줄어들면 괴로워진다.
5. 냉소주의
: 그 어떤 형태의 권위도 신뢰하지 않는다.
: 인생에 의미가 없다고 생각하기에 어떤 것도 이루기 어렵다."
2023-04-25 16:02:49,"김민수","[30일차 토요일] 바바라 민토 논리의 기술
3부 논리적으로 문제 해결하기 - 8장 문제 정의하기 - 도입부에 옮기기

[요약]
문제 정의의 몇가지 예시
1. 우리는 어떻게 해야 하는가? : N개의 단계를 통해 '어떻게'를 설명
2. 지금 하려고 생각하는 것을 해야 하는가? : N개의 어떻게(변경)를 근거로 '그렇게'를 설명
3. 하고 싶은 것을 어떻게 해야 하는가? : N개의 단계를 통해 절차를 설명
4. 해결책이 통하지 않았다. 어떻게 해야 하는가? : 1번째 구조를 변형시킨 것이나 2, 3중 구조가 될 수 있음
5. 어떤 대안을 선택해야 하는가? : 대안에 대한 '왜'를 설명
6. 우리의 전략은 무엇이어야 하는가? : 사고의 흐름에 방법(어떻게)의 끝에 이유(왜)를 주장
7. 우리에게 문제가 있는가? : 주장의 끝에 행동을 제안

[발췌]
""대부분의 문제 정의 틀은 도입부에서 쉽게 사용할 수 있는 순서로 문제 요소를 배열한다.""

[메모]
항상 도식화된 문제는 간단하지만 문제를 도식화하는 과정은 간단하지 않은 것 같다."
2023-04-25 16:02:54,"김민수","[31일차 월요일] 바바라 민토 논리의 기술
3부 논리적으로 문제 해결하기 - 8장 문제 정의하기 - 실제 사례

[요약]
문제 정의부터 피라미드를 만드는 과정까지를 분석
문제가 발생한 분야를 그림으로 그리고 사건들을 기술한다.
실제 결과와 원하는 결과를 기술하고 지금까지 취해진 해결책을 기술한다.
분석의 목적과 답변을 파악한다.

[발췌]
""문제에 대한 해결책을 제안하는 문서에서는 간결한 도입부를 작성하는 훌륭한 안내자 역할을 한다.""

[메모]
좋은 도입부를 쓰는 것은 항상 어려운 일이다.
책에서 주장하는 바는 이론적으로는 잘 알겠고, 컨설팅의 산출물이란 원래 오랜 시간을 들여서 만드는 것이지만... 나는 많은 문서들을 매일 같이 만들어야 하는 입장이기 때문에 잘 적용시킬 수 있을지 의구심이 든다.
지금 이 모임에서 책을 읽는 것도 자주 하기 어려운 방식으로 글을 읽는 것이다.
때때로는 어렵게 읽고 어렵게 쓰는 것이 필요하지만 자주 쓰이지 않는 것을 준비하는 것은 쉽지 않은 일이다."
2023-04-25 16:02:59,"김민수","[32일차 화요일] 바바라 민토 논리의 기술
3부 논리적으로 문제 해결하기 - 9장 문제 분석 구조화하기

[요약]
일반적인 문제 분석 프로세스 : 자료 수집 > 조사 결과의 기술 > 결론 도출 > 행동 제안
과거에는 자료를 최대한 수집한 뒤 분석하는 것이 일반적인 접근법이었다.
하지만 이 중에서 본질적인 문제와 연관있는 정보는 극히 일부에 지나지 않는다.
따라서 대부분의 컨설팅 회사는 체계적인 접근법이 필요하다고 판단하여 다양한 방법론을 적용했다.
하지만 이 결과는 만족스럽지 못 했고 그에 따라 자료 수집 이전에 문제 분석을 구조화해야 한다는 결론을 내렸다. 

[발췌]
""대부분의 사람들은 먼저 조사에 착수해서 손에 넣을 수 있는 자료를 모두 수집한 후, 여러 군데에서 수집한 사실과 수치를 모두 통합하여 그 의미를 생각한다.""

[메모]
컨설팅회사는 보고서를 작성하는데에 있어서 프로이다.
그런 사람들이 작성한 보고서를 통해서 우리는 이상에 조금 더 가까워진 글을 쓰게 된다.
어제 교수님과 면담을 했는데 맥킨지 보고서 형태로 PPT를 작성하라고 주문하셨는데 문득 이 책이 생각났다.
세상 모든 사람들이 글을 쓰는데에 있어서 프로일 필요는 없으나 이 책을 읽으며 조금 더 글을 계획적으로 쓸 수 있게 되었으면 한다. "
2023-04-25 18:31:06,"김현진","데이터중심 애플리케이션 설계
화요일
https://ongoingjin.notion.site/W07-2-357-370p-06eba66d1c6a4bc5acf5f19ea7081b14"
2023-04-25 20:42:31,"강민규","여러분 다들 퇴근하셨나요? 다들 후반부에 들어서니 고통에 허덕이시는 것 같군요~ 아침에 탈락 위기의 참여자분과 개별적으로 대화를 나누게 되는 일이 종종 있네요;; 협심증에 걸릴 것 같은 기분입니다.. 다들 화이팅 우리 다 잘해낼겁니다!"
2023-04-25 20:54:16,"강민규","@이강욱 "
2023-04-25 20:54:19,"강민규","@정소영 "
2023-04-25 20:54:32,"강민규","선생님들은 이틀치 분량 해봅시다~"
2023-04-25 20:54:51,"정소영","넵! 감사합니다 ! "
2023-04-25 20:58:17,"김효선","4/25 팩트풀니스

https://heady-dinghy-922.notion.site/2023-04-25-255-257p-11efa2dc0d5b4ac8b361a2fc4aa4ac5f"
2023-04-26 00:02:32,"김채욱","[네트워크_32일차]
[내용요약]

[이더넷]
정의 : LAN에서 사용되는 소통 프로토콜입니다. 2계층에서 사용되며 데이터 통신에 사용됩니다.

주요 구성 : 

Frame Structure : 정해진 형태로 데이터를 전송합니다. 다수의 필드, 송신/수신 MAC 주소, 이더넷 타입, 페이로드, CRC로 이루어져있습니다.

MAC Addressing : 이더넷은 MAC주소를 이용해 LAN에서 통신합니다.

CSMA/CD : 해당 프로토콜을 이용해 데이터 통신을 합니다.

데이터 속도 호환 : 장치 네트워크 인터페이스 간의 데이터 처리가 다르지만, 이더넷 프로토콜은 송수신 처리 호환을 보장합니다. 

​

[링크 계층 스위치]

정의 : 2계층 네트워크 장치로 MAC 주소를 기반으로 패킷 포워딩, 필터링, 플로딩을 합니다. 

특징 : 

자가 학습 : 별도 라우팅 없이 송수신 패킷의 MAC주소와 인터페이스 번호를 스위치 테이블에 저장합니다. 이후 도착지 MAC 주소가 스위치 테이블에 있으면, 매칭이 되어 보내지고 없으면 브로드캐스트를 한 후, 모든 스위치에 해당 MAC주소를 가지게 됩니다.

플러그앤플레이 : 설치만 하면 자동실행이 됩니다.

충돌 제거 : 프레임을 저장 후 전송하는 방식입니다. 전송시 하나 프레임만 전송합니다.

이질적인 링크들 : 각 스위치는 링크를 별개로 분리하여 동작합니다.

​

[스위치 대 라우터]

스위치 장점 :

Fast and Efficient : 2계층으로 데이터 패킷을 MAC 주소만으로 전송이 가능합니다. 이로 인해 추가 프로세싱 없이 하드웨어단에서 처리하기에 성능면에서 유리합니다.

Scalability : 여러 네트워크를 성능의 영향을 덜 받기에, 확장성에 유리합니다.

Plug-N-Play : 설치만으로 실행이 가능합니다.

스위치 단점 :

Broadcast Domains : 스위치 테이블에 없는 주소인 경우, 브로드케스트를 통한 도착지를 찾습니다. 이는 전체 네트워크 트래픽을 늘립니다.

라우터 장점 :

Routing Capabilities : 다른 네트워크의 주소간의 연결을 지웒바니다.

Support for Advanced Network Services : NAT, DHCP, QoS와 같은응용 서비스를 지원합니다. 

라우터 단점 :

Higher Latency : IP 주소 처리 및 라우팅 결정으로 인해 지연이 발생합니다.

​

[VLAN]

정의 : Virtual Local Area Network은 논리적 네트워크 세그먼트화 기술입니다. 하나의 물리적 스위치 안에 논리적으로 나누어 브로드캐스트 범위를 제한시킵니다. 

예시 : EE학과와 CS학과가 동일한 스위치로 연결되어 있으면, 불필요한 브로드케스트를 통해 트래픽 낭비와 보안 상의 문제가 있습니다. VLAN을 사용해 논리적으로 나누어 브로드케스트 범위를 학과로 제한시킵니다.

VLAN Trunking : VLAN 정보를 스위치 간의 공유하기 위해, 하나의 포트를 트렁킹 포트로 두어서 연결합니다. 

VLAN Tag : VLAN 프레임 헤더에 추가해, 어떤 VLAN에 속하는지 알려주는 고유 번호를 가집니다. 

VLAN 프레임 구조 : 

Preamble

Frame Delimiter

도착지 MAC 주소

송신자 MAC wnth

802.1Q Tag

Ethertype

Payload

Frame Check Sequence 혹은 CRC

​

[MPLS]

정의 : 긴 IP 주소 대신, 고정된 레이블을 통해 네트워크에서 데이터 패킷을 전달합니다. 계층 2.5 프로토콜로 네트워크 통신의 성능, 확장성, 신뢰성을 증진시킨 기술입니다.

추가 설명 : 네트워크에 진입시에 사용되는데, 패킷 포워딩 경로를 포함합니다. MPLS-enabled routers 혹은 LSR에서 사용이 가능합니다.

구성 : 이더넷 구조 중간에 MPLS 헤더를 추가해서 사용합니다.

MPLS 헤더 : 레이블, exp, s, ttl

사용 : 

VPN : IP 주소를 대신에 레이블을 사용해 보안, 성능, 확장성면에서 유리합니다.

​

[Data Center Networking]

정의 : 데이터 센터에서 네트워크 인프라를 관리합니다. 다수의 서버 호스트를 빠른 처리 및 확장성을 목적으로 설립되었습니다.

주요 컴포넌트 : 

ToR Switch : Top of Rack 스위치는 하나의 rack의 최상단에 있는 스위치로 다른 rack과의 연결을 위해 스위치 역할을 합니다. 

Load Balancer : 다수의 서버 호스트의 최적의 활용을 위해 4계층 연결을 합니다. 들어오는 트래픽을 분산 처리 시켜줍니다."
2023-04-26 00:11:24,"최창훈","네트워크 31일차
https://cautious-ocarina-cca.notion.site/Chapter-6-0c310d7e6df9476997a389020a366024"
2023-04-26 00:47:10,"Seo","4/25 화
https://seoshow.notion.site/DAY32-745a6c5623d442789e47b91668f789f2"
2023-04-26 00:59:23,"이강욱","https://velog.io/@rivolt0421/Grokking-Simplicity-3132"
2023-04-26 02:26:07,"정소영","삭제된 메시지입니다."
2023-04-26 02:26:32,"정소영","삭제된 메시지입니다."
2023-04-26 02:27:39,"정소영","넛지 파이널 에디션 (31일차)

10장 넛지는 영원히 계속 될까

넛지효과, 얼마나 오래 지속될까
• 얼마나 오래 지속되는가? 사람이니 처음의 현상 유지 편향에 따라 설정된 기본적인 행동을, 시간이 지나면서 맨 처음에 한 선택을 합리적인 쪽으로 바꾸려 하는 것으로 지속 가능성을 살펴볼 수 있음
- 다만 넛지 효과가 지속된다면, 수십년동안 지속될 수 있음.
- 사례) 스웨덴 퇴직연금제도

• 시간이 지남에 따라 과연 무슨 일이 일어나느냐
- 퇴직연금제도의 초기 광고. (이후 가입자가 많아지자 광고비 집행x)
- 광고를 접한 사람은 접하지 않은 사람에 비해 능동적인 선택자가 될 확률이 6배 높았음.
- 초기에 능동적인 선택자였던 사람은 이후에도 극소수만이 위임자(스스로 결정하지 않고 펀드 투자 위임)로 돌아섬. 
> 한 번 능동적 선택자가 되면 끝까지 능동 선택자로 남는다.
> 대규모의 금융 사기 사건에서도 대다수의 사람이 투자금을 뺐을 것이라는 추측에 반해 실제로는 그런 일이 일어나지않았다. (겨우 1.4%뿐.)
"
2023-04-26 02:28:24,"정소영","넛지 파이널 에디션 (32일차)

10장 넛지는 영원히 계속 될까

• 스웨덴 사례가 우리에게 알려주는 것
스웨덴 경험은 여러차원의 타성의 힘을 보여줌 

• 넛지 효과의 지속성에 대한 일반적 사항을 추론하기에는 주의가 필요함
- 넛지의 수명은 경험적 차원. 모집단의 특성이나 상황에 따라 얼마든지 바뀔 수 있음.
- 사람들이 당면한 일에 얼마나 많은 관심을 쏟느냐에 따라 크게 달라짐

- 경고 메시지가 장기적으로 영향을 줄 수도 있고 않을 수도 있음
    - 경고에 익숙해지면 경고의 효과는 사라짐. 

-

11장 오늘 더 많은 돈을 빌려라 : 담보대출과 신용카드

인간은 자제력과 관련된 여러 문제를 겪을 수 있고, 그 바람에 현재 상황에만 집착하는 편향에 사로잡힐 수 있음 -> 지금 가질 수 있는 것을 나중에 얻을 수 있는 것보다 더 중요하게 여김.

오늘 더 많은 돈을 소비하려고, 돈을 빌리는 행위. 금융 행동. “담보 대출과, 신용카드”

카드는 선택보다 사용이 중요
주택담보대출은 선택이 중요 "
2023-04-26 07:41:31,"강민규","밤 중에 다들 애써주셨군요~ 이런 템포로 7주차 끝까지 달려보아요"
2023-04-26 07:42:41,"강민규","사진"
2023-04-26 08:23:34,"길인식","[화요일]
[데이터 중심 애플리케이션 설계]
[요약]
분산 트랜잭션은 내부 분산과 이종 분산이 있다. 
XA트랜잭션은 이종 기술에 걸친 2단계 커밋을 구현하는 표준. 코디네이터의 장애를 해결할때 경험적 결정이 필요하고 이는 원자성 깰수있음
합의 알고리즘의 속성으로 균일한 동의, 무결성, 유효성, 종료가 있다
합의에 2번의 투표가 있다.
[발췌]
이득에는 대가가 따르기 때문이다. .. 제안에 투표하는 과정은 일종의 동기식 복제이다. 366p
[메모]
주키퍼가 궁금해서 알아보니 분산 코디네이션 서비스를 제공한다고 설명된다"
2023-04-26 09:34:46,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]371 ~ 383pg

[요약]

Steps in express implicit argument refactoring:

Identify implicit argument

Add explicit argument

Use new argument in body

Update calling mode

Code smell: having implicit argument in function name

Write code that most clearly represents your intentions

- Recursion is clearer as it takes advantage of the function call stack that keeps track of the argument values and return locations of function calls

In order to stop recursion: need a base case

1. Base Case
- Base case: where recursion stops & doesn’t include any recursive call
- Base case is easiest case to write
- Base case occurs when your argument is an empty array, countdown goes to zero, found what you’re looking for

2. Recursive Case

Recursive function needs at least one recursive case: where call happens

1. Progress toward the base case

Need to make sure that at least one of the arguments is smaller

= it’s at least on step closer to the base case

worst: make a recursive call with the same arguments you were passed, making infinite loop

[발췌]

A base case in recursion is a case with no recursive call that stops the recursion. Each recursive call should make progress toward the base case.

Recursive: function that calls itself

[메모]"
2023-04-26 11:24:07,"영동","함수형코딩 359~383 (32,33일차)

- 객체 업데이트 하기
배열과 같은 방법으로 조회, 변경, 반환 순으로 작업한다.
```javascript
function update(object, key, modify){
 const value = object[key]
 const newValue = modify(value)
 const newObject = ObjectSet(object, key, newValue);
  return newObject  
}
```

중첩된 Object의 경우 조회1-조회2-변경-설정2-설정1 순서로 작업한다.

조회1-조회2-변경-설정2-설정1 해당 부분에서
조회1-`조회2-변경-설정2`-설정1 안쪽 조회 변경 설정을 update함수로 감싸준다.

```javascript
function nestObject(){
 return update(){
   return update()   
 }

}
```


---

- nestUpdate만들기


```javascript
function nestedUpdate(object, keys, modify){
 if(keys.length === 0){
    return modify(object)
 }
 const key1 = keys[0];
 const restOfkeys = drop_first(keys);
 
 return update(object, key1, function(value1){
  return nestedUpdate(value1, restOfkeys, modify); 
 }
  
}
```

안전한 재귀 사용법
1. 종료 조건
2. 최소 하나의 재귀 호출
3. 종료 조건에 다가가기"
2023-04-26 11:24:44,"김현진","데이터중심 애플리케이션 설계
수요일
https://ongoingjin.notion.site/W07-3-370-386p-bc45ad01b8da4825b1165578248be831"
2023-04-26 12:29:00,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
일차: 33일차

### 인간의 본성을 억지로 바꿀 수 없다.
- 인간의 집단 행동은 고대의 특정한 패턴을 따른다.
- 인간의 본성을 뿌리 뽑을 수 없다.
- 인간 본성을 바꾸려하면 다른 모양, 형태로 다시 출현한다.

### 집단으로부터 나를 분리해라
- 집단은 우리에게 강력한 영향력을 미친다.
- 우리는 집단에 녹아들어야 한다는 필요성 때문에 내 사고가 틀어지고 바꿜 수 있다.
- 그러므로 집단으로부터 나를 분리시킴으로서 진짜 독립적 사고가 가능한 정신적 여유 공간을 만들려고 해야한다."
2023-04-26 15:10:50,"소재훈","32일,33일 컴퓨터 네트워킹 하양식 접근 제출입니다.
제출자: 소재훈

5. 링크 가상화
https://geode-drizzle-777.notion.site/5-1434eab4b25044698dd3916cdec0fa59 

6. 데이터 센터 네트워킹
https://geode-drizzle-777.notion.site/6-ffbb72ce1dea4f34b93bb05b229e5499 

7. 총정리
https://geode-drizzle-777.notion.site/7-b06cd1be995b4849825c08e7c1ffda7d 
"
2023-04-26 15:15:25,"김효선","4/26 팩트풀니스

https://www.notion.so/2023-04-26-258-264p-e14e88aedb064b4f8bcc42121bbf2477?pvs=4"
2023-04-26 20:42:23,"강민규","다들 퇴근은 하셨나요? 저는 요새 좀 바빠서 저의 야망인 책너두 무료버전 개발을 못하고있습니다. 여러분들은 꼭 하고자했던 일들 잘 마무리하시길 바랍니다.."
2023-04-26 20:42:45,"강민규","@김형우  @오홍근  @최창훈 님은 오늘 이틀치 해봐요~~  "
2023-04-26 21:09:34,"김형우","책읽으러 카페가는중입니다.. 책너두가 사람을 바꿔놓는군요"
2023-04-26 21:17:37,"길인식","저도 책읽으러 가겠습니다 화이팅 ㅎㅎ"
2023-04-26 23:30:03,"김채욱","[네트워크_33일차]
[문제풀이]
SECTIONS 6.1–6.2

1) If the passenger is analagous to a datagram, what is analogous to the link layer frame?

​

데이터그램을 승객인 경우 링크 계층은 교통수단이다

​

2) If all the links in the Internet were to provide reliable delivery service, would the TCP reliable delivery service be redundant? Why or why not?

​

인터넷 내에 모든 링크가 연결되어 있다하더라고 기계 오류나 라우팅 과정에서 패킷 분실 위험이 있다. 라우팅 과정에서 경로가 다양하게 전달되기에 데이터 스트림에 순서가 없다. 고로 TCP 사용은 애플리케이션에 따라 필요할 여지가 많다.

​

3) What are some of the possible services that a link-layer protocol can offer to the network layer? Which of these link-layer services have corresponding services in IP? In TCP?

​

다음은 링크 계층 프로토콜이 네트워크 계층 프로토콜과의 기능 유사점이다

Framing, link access, reliable delivery, flow control, error detection, full duplex

​

​

SECTION 6.3

​

1) Suppose two nodes start to transmit at the same time a packet of length L over a broadcast channel of rate R. Denote the propagation delay between the two nodes as d . Will there be a collision if d<L/R? Why or why not?

​

만약 전송 속도가 d<L/R인 경우에는 충돌이 발생할 수 있다. 하나의 노드에서 전송시에 다른 노드의 패킷을 받고 있을 수 있기 때문이다.

​

2) we listed four desirable characteristics of a broadcast channel. Which of these characteristics does slotted ALOHA have? Which of these characteristics does token passing have?

​

slotted ALOHA는 기존 ALOHA의 효율성을 대폭 증가시킨것이다. 모든 노드들을 동기화한 후에 slot별 동일한 길이로 전송하여 충돌이 발생하면 임의의 대기시간을 갖는다

​

3) In CSMA/CD, after the fifth collision, what is the probability that a node chooses  k=4? The result k=4 corresponds to a delay of how many seconds on a 10 Mbps Ethernet?

​

5번째 충돌 후 4번째 노드를 선택할 확률은 1/32이다.  대기시간은 204.9microsec이다

​

4) Describe polling and token-passing protocols using the analogy of cocktail party interactions. 

​

polling(투표)는 한번에 한명의 참가자만 이야기하며 돌아간다. 

token ring은 참가자 모두가 이야기를 번갈가가면서 한다

​

5) Why would the token-ring protocol be inefficient if a LAN had a very large perimeter?

​

노드가 프레임을 전송하였을 때, 노드는 프레임이 모든 ring을 순환하기 까지 기다려야한다. 

그럼으로 만약 L/R이 전송 속도보다 느릴시 비효율적이다

​

​

SECTION 6.4

​

1) How big is the MAC address space? The IPv4 address space? The IPv6 address space?

​

MAC주소는 48비트, ipv4는 32비트, ipv6는 128비트이다

​

2) Suppose nodes A, B, and C each attach to the same broadcast LAN (through their adapters). If A sends thousands of IP datagrams to B with each encapsulating frame addressed to the MAC address of B, will C’s adapter process these frames? If so, will C’s adapter pass the IP datagrams in these frames to the network layer C? How would your answers change if A sends frames with the MAC broadcast address?

​

C어탭터는 프레임을 진행시키지만, 데이터그램을 역다중화하지 않는다. lan 브로드케스트 주소가 사용된다면, C어탭터는 프레임을 진행시키고 역다중화를 진행한다.

​

3) Why is an ARP query sent within a broadcast frame? Why is an ARP response sent within a frame with a specific destination MAC address?

​

ARP 쿼리가 브로드케스트 프레임에 포함되어서 전송되는데 , 호스트가 ip로 어탭터 주소를 알 수 없기 때문이다. 응답으로는 브로드케스트를 보낼 필요가 없는게, 전송 mac주소를 알기 때문이다.

​

4) the router has two ARP modules, each with its own ARP table. Is it possible that the same MAC address appears in both tables?

​

개별 LAN에는 유일한 랜주소가 있기에 2개의 테이블에 같은 mac주소가 있을 수 없다.

​

5) Compare the frame structures for 10BASE-T, 100BASE-T, and Gigabit Ethernet. How do they differ?

​

3개의 이터넷 프레임 구조는 동일하다

​

6) How many subnetworks are there, in the addressing sense of Section 4.3 ?

​

2개의 서브 네트워크 (the internal subnet and the external internet)

​

7) What is the maximum number of VLANs that can be configured on a switch supporting the 802.1Q protocol? Why?

​

In 802.1Q there is a 12- bit VLAN identifier. Thus 212 = 4,096 VLANs can be supported.

​

8) Suppose that N switches supporting K VLAN groups are to be connected via a trunking protocol. How many ports are needed to connect the switches? Justify your answer

​

We can string the N switches together. The first and last switch would use one port for trunking; the middle N-2 switches would use two ports. So the total number of ports is 2+ 2(N-2) = 2N-2 ports. 

​"
2023-04-26 23:45:28,"길인식","[수요일]
[데이터 중심 애플리케이션 설계]
[요약]
선형성은 쉬운 방법이지만 느리다. 인과성은 충분하지 않다. 결국 유일성을 보장하기 위해 합의가 필요하다.
[발췌]
그럼에도 모든 시스템이 반드시 합의가 필요한 것은 아니다 372p
[메모]
다음은 파트3 시작이고 파생데이터에 대해 다룬다. 동시에 모든 요구 사항을 만족하는 하나의 데이터베이스는 없다고 한다. 다양한 데이터베이스를 이용하는 통합 작업을 배운다고 한다."
2023-04-27 00:26:36,"Seo","4/26 수 https://seoshow.notion.site/DAY33-8ffa2c598d3c4db18199ff3f5f303540"
2023-04-27 00:55:33,"김형우","[32일차]
https://engineer-diary.tistory.com/191"
2023-04-27 02:07:36,"최창훈","네트워크 화요일 
https://cautious-ocarina-cca.notion.site/Chapter-6-0c310d7e6df9476997a389020a366024"
2023-04-27 07:10:59,"오홍근","저는 요즘 회사 일정이 너무 바빠서.. 여기까지만 하는 게 좋을 것 같네요!
다들 수고하세요~"
2023-04-27 07:11:09,"오홍근","오홍근님이 나갔습니다."
2023-04-27 07:43:56,"강민규","사진"
2023-04-27 07:46:36,"강민규","여러분 목요일입니다! 끝을 향해 가는 책너두와 함께 알찬 하루 보내봐요"
2023-04-27 12:56:21,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
일차: 34일차

### 집단은 개인에게 많은 영향력을 준다.
- 수천 명이 다같이 느끼는 흥분, 분노 혹은 기쁨은 우리를 관통한다.
- 이러한 감정은 집단에서 저절로 발생한다.
- 위와 같은 감정들은 이성적으로 인식되는 게 아니다.

### 사회의 힘
- 사회의 힘은 공유되는 어떤 느낌을 통해 집단을 하나로 묶고, 구성원에게 영향을 미치며 강렬한 유대감을 형성하는 힘이다.
- 사회의 힘은 우리 내외부에 동시에 존재하는데, 그 이유는 내 편에 속한 사람들은 똑같은 것을 느끼고 있다 확신하기 떄문이다.
- 집단의 크기와 조합에 따라 사회의 힘은 달라지는데, 크기가 클수록 사회의 힘이 미치는 효과도 더 강렬해진다. 만약에 적이 존재한다면 이렇게 커진 사회의 힘이 쉽게 분노나 폭력으로 돌변할 수 있다.
- 또한, 우리는 사회의 힘에 끌리는데 특히 숫자에 끌린다.
- 무언가 하나로 뭉친 군중에 있는 경우, 그리고 그 숫자가 많은 경우 우리는 사회의 힘에 끌린다.
- 대표적으로 음악과 춤은 사회의 힘을 표출하는 수단이 된다.

- 우리는 집단 내에 녹아들고 내 역할을 하고 싶다는 간절한 욕구가 있다.
- 그리고 무의식적으로 리더의 행동이나 제스처를 따라한다.
- 사회의 힘은 우리 본성의 생리적 일부이다.
- 사회의 힘은 우리의 독립적이고 이성적인 사고를 저하시킬수도 있지만, 고차원적인 협력이나 공감을 위해 우리의 수준을 높이는데 쓰이기도 한다.

### 사회의 힘과 집단지성의 조화
- 집단지성이란, 집단이라는 공간을 더 쉽게 헤치고 나아가기 위해 어떤 법칙과 역학관계를 가지고 움직이고 이해하는 것이다.
- 만약 이 지성을 알고 있다면, 겉으로는 집단에 잘 녹아들면서 속으로는 독립성을 유지할 수 있다.
- 이 독립성은 나의 정체성과 상황에 맞는 인생의 여러 의사결정을 내리는데 도움을 준다.

### 사회의 힘이 개인에게 미치는 영향
1. 집단에 녹아들고 쉽게 한다.
2. 집단에 속하기 위해 집단이 원하는 모습으로 연기하게 한다.
3. 집단의 감정이 개인의 감정에 영향을 준다.
4. 잘못된 판단일지리라도 집단에서 대다수가 동의한 거라면, 괜찮은 판단이라 확신한다."
2023-04-27 16:52:41,"이미정","삭제된 메시지입니다."
2023-04-27 16:53:04,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]384 ~ 394pg

[요약]

Abstraction barrier is a layer of functions that hide the implementation so well that you can completely forget about how it is implemented, even while using those functions

Summary of use of higher-order functions

- Replace for loops over arrays
- Operate effectively on nested data
- Apply a copy-on-write discipline
- Codify our try/catch logging policy

update(): implements a common pattern, modify a value inside of an object without manually pulling the value out and setting it back in

nestedUpdate(): operates on deeply nested data, useful for modifying a value when you know the path of keys to where it is located

Recursion- lets recursive function’s structure mirror the structure of nested data

Deep nesting - lead to difficulty of understanding

Apply abstraction barriers to key data structures

Ch15 Isolating Timelines

- Draw timeline diagrams from code
- Understand how to read timeline diagrams to find bugs
- How to improve code design by reducing resources shared between timelines
- 

[발췌]

[메모]"
2023-04-27 16:56:50,"김민수","제가 책이 사무실에 있는데 급하게 외근을 나와서 오늘 못 올릴 것 같습니다 ㅜㅜ 내일 한번에 올리도록 하겠습니다!"
2023-04-27 18:11:41,"강민규","넵 민수님 미리 공유해주셔서 감사합니다!"
2023-04-27 18:21:53,"Seo","4/27 목
https://seoshow.notion.site/DAY34-a788fcac5f0249598417161a7d782818"
2023-04-27 20:09:42,"김효선","4/27 팩트풀니스

https://heady-dinghy-922.notion.site/2023-04-27-265-267p-ce959235d9f14bef8e57473e7a7d813c"
2023-04-27 20:29:36,"강민규","반갑습니다 여러분 잘지내고 계신지요? 벌써 목요일이 끝났습니다. 일주일이 훌쩍 가버렸네요.. 내일 금요일 지나면 다음주는 휴일이 이틀이나 있는 아주 멋진 주네요. 벌써부터 기대가 됩니다~ 

일하고 오면 다들 피곤하고 지칠텐데 이렇게 발전을 위해 노력하시는 모습이 아주 멋집니다! 오늘도 할당된 분량을 읽으시고 좋은 루틴을 만들어가봅시다~ 화이팅!!"
2023-04-27 22:03:23,"강민규","@김형우 @이강욱 @정소영 @최창훈 선생님들 오늘 이틀치 하셔야하는 것 다들 아시지요? 화이팅입니다~~"
2023-04-27 22:32:13,"김형우","[33일차]
https://engineer-diary.tistory.com/193"
2023-04-27 22:34:53,"김채욱","[네트워크_34일차_4/27(목)]
주요 내용 요약

[무선 네트워크 요소]

설명 : 무선 네트워크를 구성하는 다양한 요소가 존재합니다. 

구성 : 

무선 호스트 : 핸드폰, 노트북 등 와이파이와 같은 무선 연결을 통해 사용되는 장치입니다. 

무선 링크 : 무선으로 데이터를 통신하는 연결 상태입니다. 전자파인 radio frequency나 inrared waves등이 있습니다. 

기지국 : 고정된 커뮤니케이션 인프라 구조입니다. 무선 통신을 위해 세워진 중심 서버로 여러 무선 호스트를 무선 링크로 연결해 자원을 공유합니다.

Cell Tower : 안테나, 트랜스미터 등과 같은 거대한 하우스 구조로 무선 통신을 위해 존재합니다.

802.11 : IEEE에서 세운 wireless LAN 기준입니다. 무선 통신시에 사용되는 기준으로 현재 다양한 버전이 존재하여서 데이터 전송, 범위, 신뢰성 기능이 있습니다.

Access Point : 무선 호스트 간의 브릿지 역할을 하는 네트워크 장치입니다. 

Infrastructure Mode : 무선 호스트 간이 중앙 AP나 무선 라우터를 통해 통신하기 위한 무선 네트워크 설정입니다. 인프라 모드에서는 AP가 네트워크 인터넷에 연결을 관리합니다. 주로 집이나 회사 와이파이 공간에서 사용됩니다.

Ad Hoc 네트워크 : 비중앙화된 무선 네트워크로 무선 호스트간의 직접적 연결을 합니다. 각 무선 호스트는 임시 네트워크를 형성해서 통신합니다. 주로 파일 공유나 인터넷 공유를 위해 일시적으로 사용됩니다.

Handoff : 하나의 기지국에서 다른 기지국 으로 무선 연결을 옮기는 과정을 의미합니다. 지속적인 인터넷 연결이 주 목적입니다. 

​

[무선 네트워크 종류]

단일 홉, 기반 구조 : 무선 호스트 통신은 인프라 모드 혹은 중앙 기지국이나 AP로 통해 연결됩니다. 모든 통신은 하나의 홉을 통해 전달되기에 모든 장치는 중앙 인프라를 통해 연결됩니다. 와이파이가 대표적인 케이스입니다.

단일 홉, 기반 구조 없음 : 무선 호스트는 중앙 관리 없이 서로 직접적으로 연결됩니다.  ad hoc 네트워크 형태로 임시 연결시에 사용됩니다.

다중 홉, 기반 구조 존재 : 무선 호스트 통신은 중앙 인프라를 통해 되지만 다수의 중앙 장치를 거쳐서 갑니다. 이는 중앙 기지국에서 거리적으로 먼 경우 안정적인 통신을 위해 사용됩니다. mesh network 형태라고도 칭해집니다.

다중 홉, 기반 구조 없음 : 중앙 연결 없이 무선 호스트 간의 연결을 하지만 통신을 위해 중간 홉을 거칩니다. MANET(mobile ad hoc network)이라고도 칭해지는데, 군사적, 일시적 이벤트, 재난 상황에서 고정된 인프라가 없을 때 사용됩니다. 

​

[무선 랜과 네트워크 특징]

설명 : 무선 네트워크와 유선 네트워크의 차이점으로는 신호 세기의 감소, 다른 출발지로부터의 간섭, 다중 경로 전파를 통해 전자기파가 부딪히는 현상 등이 발생합니다. 이를 고려해 SNR와 BER의 적절한 비율로 무선 통신을 합니다.

SNR : signal-to-noise ratio, 신호의 데시벨의 세기에 따라 일으키는 진폭과 잡음의 비율입니다. 신호의 세기가 강할 수록 잡읍에 대한 영향을 덜 받습니다. 이는 더 나은 통신을 보장하지만, 더 많은 에너지를 소모합니다.

BER : bit error rate, 무선 통신 시스템에서 오류 비트의 비율입니다. SNR이 낮을 수록 BER이 증가하지만 일정 임계점에서는 비율이 나아지지 않습니다.

숨은 터미널 문제 : 무선 네트워크에서 2개 이상의 장치가 AP와 같은 수신자의 범위 안에 있지만 호스트간의 통신 범위가 벗어나있는 경우에 다른 호스트의 전송을 알 수 없는 상황입니다. A-B와  B-C가 연결이 되어 있고, A-C는 통신 범위를 벗어난 경우, 상대방의 통신 상태를 몰라, B에게 동시에 데이터 전송을 해서 충돌이 일어나는 현상입니다.

"
2023-04-27 22:41:11,"길인식","삭제된 메시지입니다."
2023-04-27 22:41:34,"길인식","[목요일]
[데이터 중심 애플리케이션 설계]
[요약]
리눅스는 확장성면에서 뛰어나다.
허용메모리보다 큰 작업에서 인메모리가 아닌 정렬 집계법을 사용이 빛을 발한다.
[발췌]
유닉스의 철학
1. 각 프로그램이 한 가지 일만 하도록 작성하라
2. 모든 프로그램의 출력은 아직 알려지지 않은 다른 프로그램의 입력으로 쓰일 수 있다고 생각하라
3. 소프트웨어를 빠르게 써볼 수 있게 설계하고 구축하라
4. 프로그래밍 작업을 줄이려면 미숙한 도움보단 도구를 사용하라
391p"
2023-04-27 23:48:54,"정소영","삭제된 메시지입니다."
2023-04-27 23:49:37,"정소영","삭제된 메시지입니다."
2023-04-27 23:50:35,"강민규","소영님.. 헷갈립니다.."
2023-04-27 23:51:30,"정소영","아 일자를 제가 잘못 입력했꾼요.."
2023-04-27 23:51:56,"정소영","넛지 파이널 에디션 (33일차)

11장 오늘 더 많은 돈을 빌려라 : 담보대출과 신용카드

지나치게 복잡해진 주택 담보대출 

주택 담보대출 시장은 고도로 탈중심적이고 경쟁적이다. 이 시장은 쇼핑을 한층 어렵게 하는 슬러지가 가즉하다. 소비자는 실제로 자신이 어람를 지불 하는지 모를 수 있다. 대출업자는 사람들의 주의력이 제한적인 수밖에 없다는 점을 이용하기도 함. 

선택설계자는 구매자 및 판매자의 선택을 어느정도까지 제한할지 분명하게 정해야 한다. "
2023-04-27 23:53:09,"정소영","넛지 파이널 에디션 (34일차)

11장 오늘 더 많은 돈을 빌려라 : 담보대출과 신용카드

신용카드, 어쨌거나 사용법이 중요하다.
신용카드 등장 전에는 한도 내에서 소비하는 방식을 따를 수 밖에 없었음. > 당장 이득이 없어도 미래에 이득이 될 것 같은 저축상품 등록이 예시. (금리 등에 이득이 없어도 크리스마스에 끝나는 적금을 드는 것) 

소비자입장에서는 신용카드를 어떻게 사용하느냐가 어떤 신용카드를 선택하느냐보다 중요하다. 

쉽게 만들어라 라고 강조하지만, 
쉽게 만드는 가장 좋은 방법 가운데 하나는 자동으로 설정하는 것이다."
2023-04-28 01:30:55,"이강욱","삭제된 메시지입니다."
2023-04-28 01:31:26,"이강욱","https://velog.io/@rivolt0421/Grokking-Simplicity-3334"
2023-04-28 01:37:31,"최창훈","33일차, 34일차

6장 : https://cautious-ocarina-cca.notion.site/Chapter-6-0c310d7e6df9476997a389020a366024
7장 : https://cautious-ocarina-cca.notion.site/Chapter7-b94f77d0d8f04556835d4190a5ab8ad7"
2023-04-28 07:45:42,"강민규","사진"
2023-04-28 07:45:48,"강민규","여러분 오늘 날씨 너무 좋네요~ 곧 여름이 올 것 같은  하늘입니다! 오늘도 화이팅입니다!!"
2023-04-28 09:38:00,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]395 ~ 408pg

[요약]

timeline diagram: shows what happens over time, shows how actions can interact and interfere with each other, there can be multiple timelines running at the same time in your system 

- show 2 main things: what actions will run in sequence and what will run in parallel
- express uncertainty of ordering amoung parallel code

timeline: sequence of actions

it’s important to identify every action and to understand what order they are executed in. 

every language has its own execution details

1. ++ += are really three steps 

var temp = total  [reads total]

temp = temp + 1 [adds one]

total = temp  [writes total back]

1. arguments are executed before the function is called
- console.log(total) → argument is executed before the function you’re passing it to. defines the order of execution that needs to show up in the timeline diagram

Drawing timeline diagaram:

- identify the actions
- draw each action, whether sequential or parallel
- simplify using platform-specific language

Single-threaded, synchronous

- PHP without threading library (everything happens in order)

Single-threaded, asynchronous

- JavaScript

Multi-threaded

- Java, Python, Ruby, C, C#
- most difficult to program because it gives you almost no constraints for ordering
- every new thread crates a new timeline
- need to use constructs like locks which prevent two threads from running code protected by the lock at the same time

Message-passing processes

- Erlang & Elixir
- don’t share any memory, communicate using messages

[발췌]

[메모]

pg 396 case diagram"
2023-04-28 12:09:46,"Seo","4/28 금 
https://seoshow.notion.site/DAY35-232081edab6f4db19a03a549f32dbe9c"
2023-04-28 13:30:16,"김민수","[33일차 수요일] 바바라 민토 논리의 기술
3부 논리적으로 문제 해결하기 - 9장 문제 분석 구조화하기 - 진단 틀 짜기

[요약]
인과관계 추적하기 - 문제를 진단하는 두 번째 방법
재무적 구성 요소와 필요로 하는 업무 혹은 원하지 않는 활동 등에 따라 단계를 나누기
재무구조, 업무구조, 활동구조 등 
각 요소를 세분화하여 영향도를 파악할 수 있다.

[발췌]
""각각의 가능성에 대해 질문을 던지다보면 사실을 수집하고 분석해야 하는 분야를완벽하게 리스트로 정리할 수 있다.""

[메모]
모든 정보를 리스트업하는 작업이다보니 불필요한 것도 많아보인다."
2023-04-28 13:30:21,"김민수","[34일차 목요일] 바바라 민토 논리의 기술
3부 논리적으로 문제 해결하기 - 9장 문제 분석 구조화하기

[요약]
가능성 있는 원인 분류하기 - 문제를 진단하는 세 번째 방법
문제의 원인을유사성에 따라 분류하는 방법.
가설을 설정한 뒤 원인을 파악하기 위해 필요한 정보를 판별한다.
1. 로직트리의 가지에서 MECE분류를 하여 리스트를 만드는 방법이 주효하다. 그 다음 Yes/No로 대답할 수 있는 질문을 통해 판별한다.
2. 선택형 구조로 분류
진단 틀은 Yes/No로 대답하는 질문이 중요하며 이는 의사결정 트리나 PERT와의 차별 포인트가 된다.

[발췌]
""일단 진단 틀이 개발되면 고객과 커뮤니케이션을 할 때 훌륭한 설득의 도구로 활용할 수 있다.""

[메모]
간단한 작업인듯 하지만 나에게 필요한 정보가 나에게 없거나 존재하지 않을 수 있는데 인사이트를 위한 데이터 수집 단계가 궁금해지는 지점이다."
2023-04-28 13:30:26,"김민수","[35일차 금요일] 바바라 민토 논리의 기술
3부 논리적으로 문제 해결하기 - 9장 문제 분석 구조화하기 - 툴 적용하기

[요약]
분석 대상 및 분야에 따라서 틀을 사용하는 시점과 범위가 상이하다.
큰 대상을 목표로 하는 경우에는 넓은 범위의 정보가 필욯나데 이를 모두 수집하기는 매우 어렵다.
이런 경우에는 진단 틀을 위한 자료부터 수집해야 한다.
업무 구조와의 관련성을 명확하게 밝혀낸 후 이를 바탕으로 정보를 수집할 수 있다.

[발췌]
""진단 틀을 만드는 데 필요한 자료를 수집하는 것부터 시작해서, 일단 그 틀에서 현재의 업무 구조와의 관련성을 명확하게 밝혀내는 작업에 몰두해야 한다.""

[메모]
자료 수집의 범위에 대해 판단하는 것이 핵심적인 능력일 것 같다."
2023-04-28 13:54:17,"영동","함수형코딩 384-408

중첩구조를 찾아가기위한 키가 많으면 외우기 어렵기 때문에 추상화 구조를 가지고 가면 좀 더 쉽다.

타임라인 격리시키기

함수에는 다양한 숨겨진 액션들이 존재한다
특히 비동기 액션은 또 다른 타임라인으로 고려해야한다.
동시에 일어나지 않은 액션은 구분해서 표시해야한다.
동시에 실행되는 다양한 타임라인은 실제로 아주 동시에 실행되지는 않는다.

이러한 문제는 많은 것을 야기하기 때문에   반드시 인지해야한다.

타임라인은 짧을 수록 좋다. 공유하는 자원이 적을 수록 좋다. 독립적인 데이터를 가지고 실행하는 것이 베스트.

타임라인을 다루는 재사용한 객체를 만들면 타이밍 문제를 쉽게해결할 수 있다"
2023-04-28 13:57:21,"영동","34, 35일차 입니다"
2023-04-28 17:05:25,"소재훈","34일, 35일 컴퓨터 네트워킹 하양식 접근 제출입니다.
제출자: 소재훈


1. 개요
https://geode-drizzle-777.notion.site/1-a9a2577940934abe82c3200a7b951a43

2.무선 랜과 네트워킹의 특징
https://geode-drizzle-777.notion.site/2-a275d69c03bb4d8291691979b5b4f6e7

3. Wifi : 802.11 무선 랜( 3. IEEE 802.11 프레임까지)
https://geode-drizzle-777.notion.site/3-Wifi-802-11-ac1a6831b17640bd8181f356e9651b6f

"
2023-04-28 20:32:33,"강민규","안녕하세요 여러분 즐거운 금요일 보내고 계신가요? @김현진 @김형우 님은 오늘 이틀치 분량으로 작성해주세요~"
2023-04-28 21:33:36,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
일차: 35일차

### 집단이 빠지기 쉬운 패턴의 종류
1. 집단 문화
- 집단은 언제나 정체성이라고 할 말한 문화나 정신을 가진다.
- 집단의 문화는 집단이 상상하는 어떤 이상을 중심으로 하는 경우가 많다.
- 그 이상이 하나의 신화처럼 작용해, 구성워들을 하나로 묶어준다.
- 집단의 문화는 그 집단의 설립자를 반영하고 있는 경우가 많다.
- 집단의 문화가 클수록 시간이 지나면서 문화가 더 고착화된다.
- 고착화되고 보수적이 되면, 환경에 대한 적응 능력이 서서히 상실된다.

2. 집단의 규칙과 코드
- 어떤 집단이든, 규칙이나 코드가 문서화되지 않았지만 당연하게 존재하고 당연한 것으로 간주된다.
- 그래서 적극적 감시 없이도 자체 질서를 세우게 된다.
- 집단에 새로 들어가면 이런 암묵적 코드에 특별히 주의를 기울여야 한다.
- 그리고 집단에 신성시되는 대상이 있는데 절대로 피해라

3. 집단의 궁중암투
- 리더의 힘이 강력할수록 눈치싸움도 치열해진다.
- 조신들은 리더의 환심을 사기위해 아첨을 한다.
- 아첨은 최대한 간접적으로, 그리고 아무도 관심을 가지지 않는 부분을 칭찬해야한다.
- 항상 다른 조신들의 행동을 관찰해야한다.

4. 집단의 적
- 가상의 적은 집단은 하나로 뭉치게 한다.
- 본인 집단의 결점을 눈 돌리게 하기 위한 방법으로 가상의 적을 만들곤 한다.
- 우리에게 필요한 것은 이런 역학관계로부터 한 발 떨어져 적을 왜곡없이 그대로 볼 수 있는 능력이다.
- 여기서 한 걸음 더 나아가면, 적으로부터 배울 수 있고, 적의 우월한 전략을 수용해 이용할 수도 있게 된다.

5. 집단 내 파벌
- 시간이 충분히 지나면 집단 내의 개인들은 파벌로 갈라지게 된다.
- 이 경우, 집단들은 신나게 만들고 단결시킬 수 있는 긍정적 문화를 만들어야 한다.

### 집단에서 우리가 주의해야할 점
- 당신 자신을 완벽히 관찰해라 그래서 집단으로부터 독립적인 사고를 가지도록 해라. 
- 집단으로부터 고립되라는 것이 아니다.
- 겉으로는 집단에 스매들면서, 내부에서는 자신의 확신과 가치관을 가지고 이성적인 판단을 하라는 것이다."
2023-04-28 21:36:42,"김효선","4/28 팩트풀니스

https://heady-dinghy-922.notion.site/2023-04-28-268-277p-b9d3e186bd7f478daf3bcd0bdcdf7747"
2023-04-28 23:42:52,"길인식","[금요일]
[데이터 중심 애플리케이션 설계]
[요약]
맵리듀스 작업은 매퍼와 리듀서를 구현해야함.
셔플은 리듀스를 기준으로 파티셔닝, 매퍼로 파티션 복사
맵리듀스는 전체 테이블 스캔, 정렬 병합 조인
매퍼에서 키 값은 주소 역할

[발췌]
하지만 맵리듀스는 적어도 일반적으로 이야기하는 색인 개념이 없다. 400p

[메모]
몽고db에서 맵리듀스 기술을 지원한다"
2023-04-29 04:14:28,"김현진","데이터 중심 애플리케이션 설계
목요일
https://ongoingjin.notion.site/W07-4-387-393p-cf8a4651cfe04462a7550bc6634c0014

금요일
https://ongoingjin.notion.site/W07-5-394-406p-0e1ab43fb8c1487889133bc70468716d"
2023-04-29 04:46:55,"김형우","삭제된 메시지입니다."
2023-04-29 04:47:19,"김형우","[34일차]
https://engineer-diary.tistory.com/195"
2023-04-29 07:44:20,"강민규","사진"
2023-04-29 07:44:34,"강민규","여러분 즐거운 주말이네요~ 비도 오고 날씨도 쌀쌀한데 감기걸리지 않게 조심해요 우리~"
2023-04-29 07:47:04,"김민수","[36일차 토요일] 바바라 민토 논리의 기술
3부 논리적으로 문제 해결하기 - 9장 문제 분석 구조화하기 - 로직트리 만들기

[요약]
로직트리는 여러 활동을 논리적으로 리스트화 할 수 있다.
다양한 해결책들을 정리한 뒤 비교하여 최종적으로 제안할 행동을 결정한다.

그루핑된 행동의 결함을 밝히는 과정은 행동의 논리적 관계를 명확하게 해주기 때문에 점검에 도움이 된다.

[발췌]
""생각에 대한 그루핑은 머릿속에서 일어나는 분석 행동에 근원을 두고 있다는 점을 명심해야 한다.""

[메모]
생각과 구조를 일치시키며 논리적 타당성을 검증할 수 있다."
2023-04-29 11:18:52,"영동","함수형코딩 409-419 36일차

자바스크립트는 단일 스레드 이벤트 루프 방식으로 동작한다.

비동기 요청에 대한 콜백은 비동기 요청이 완료된뒤 작업큐에 순차적으로 등록된다.

이벤트 루프는 작업큐에 있는 작업을 순차적으로 수행한다.

자바스크립트는 논리적으로는 다른 타임라인을 가지고 있지만 타임라인이 끝나는 곳에서 새로운 타임라인 하나만 생긴다면 통합할 수 있다 
"
2023-04-29 12:25:14,"Seo","4/29 토
https://seoshow.notion.site/DAY36-c54133c5fd58469785f1f69ca94dd58b"
2023-04-29 13:08:16,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]409 ~ 419pg
[요약]
Principles of working with timelines
1. fewer timelines are easier 
if we can reduce timelines- makes system easier to understand
2.shorter timelines are easier
try to reduce num of steps
3.sharing fewer resources is easier
4. coordinate when resources are shared
5. manipulate time as a first-class concept

JavaScript has one thread
- synch actions like modifying global variables cannot be interleaved btw timelines 
- async calls are run by runtime at unknown time in future
- no 2 sync calls can run simultaneously
- it's yours, meaning you can read write as much as you want with no interleaving 

JavaScript's Async Queues:
job queue: processed by event loop
event loop: 
- takes one job off of the queue and runs it to completion 
- run in single thread, no 2 jobs can be run at the same time 

Async JavaScript And XML (AJAX): term for browser-based web requests
 callback: function that is called when event is fired

load: called when res been completely downloaded

consolidate actions
consolidate timelines



[발췌]
[메모]
pg411 job queue"
2023-04-29 16:39:15,"김효선","4/29 팩트풀니스

https://www.notion.so/2023-04-29-278-286p-8d2f06e2f2d647e48bd1406d7fe91cf2?pvs=4"
2023-04-29 20:59:10,"강민규","여러분~ 좋은 주말 보내고 계신가요? 일요일에 일이 있으시다면 주말 분량은 오늘 해보도록 합시다~"
2023-04-29 23:30:45,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
일차: 36일차

### 리더를 둘러싼 암투
- 모든 궁중 암투는 리더를 중심으로 돌아간다.
- 조신의 권력은 리더와 얼마나 가까운 관계를 유지하느냐에 달려있다.
- 조신은 자신의 리더를 실제보다 더 똑똑하고 영리하고 완벽하다 생각한다.
- 우리는 어머니나 아버지에게 했던 것처럼, 리더의 관심을 독점하고 싶어할지 모른다.

### 조신의 종류
1. 모사꾼
- 무척 알아보기 힘든 유형이다.
- 겉으로는 충성스러워 보이지만, 음모를 꾸미고 있다.
- 어린시절, 부모와 경쟁관계를 가진 사람이 이 유형이 되기 쉽다.
- 이들은 열심히 일하여, 리더를 자신에게 의존하게 만들고 사람들을 자신에게 묶어두려 한다.
2. 말썽꾼
- 이들의 목표는 말썽을 피워, 집단 전체에 의심과 불안을 감염시키는 것이다.
- 그렇게 되면, 본인이 활동의 중심이 되고 리더에게 더 다가갈 수 있기 때문이다.
- 이들은 또한, 문제의 조신에 대한 루머나 험담을 퍼뜨린다.
- 만약, 나쁜 일이 벌어졌을 때 몰래 기뻐하는 사람이 있다면 말썽꾼일 확률이 높다.
3. 게이트 키퍼
- 게이트키퍼의 동기는 최고 위치에 있는 사람에 대한 지독한 흠모다.
- 이들은 리더를 이상화하고 리더가 하찮은 정치 싸움에 직접 노출되지 않게 한다.
- 키퍼의 최종 목표는 리더가 자신들에게 멀어지는 게 두려워하게 하는 것이다.
4. 배후의 조종자
- 리더는 물론 타인의 억압된 욕망을 감지하는 데 능한 유형이다.
- 이 들은 리더의 억압된 욕망(그림자)와 관게를 구축하여 리더에게 그림자를 분출할 방법을 제안한다.
5. 궁정의 광대
- 리더를 웃음거리로 만들거나 온건한 반항아인 유형이다. 
- 겉으로는 드러나지 않지만 책임을 두려워하고 실패를 무서워한다.
- 유머나 익살 덕에 실제로 큰 스트레스없이 한 자리를 차지한다.
6. 공감의 여왕
- 다른 사람을 흉내내는 걸 잘하는 유형이다.
- 동료 조신들까지 유혹하는데 능하고, 넓은 지지 기반을 가지고 있다.
7. 총신
- 권력자로 부상한 총신은, 왕과 더 사적이고 친구같은 관계를 구축한 경우가 많다.
- 많은 리더는 그렇게 형식적이고 정중한 필요가 없기를 갈망한다.
- 총신은 리더가 느끼는 다정함에 의존한다.
8. 동네북
- 사람들은 동네북 유형을 괴롭히며 우월감을 느끼는데, 이떄 이 행동에 엮이지 않도록 해라

### 어떻게 현실집단을 만들 것인가
- 집단에서 모험적인 일을 추친하다가 실패하면 개인을 탓하고 파벌이 형성된다.
- 진짜 문제의 원인은 ‘집단의 역학관계가 제 기능을 못하는 점’에서 온다.
- 집단의 존재이유가 일을 완수하고, 무언가를 만들어내고 문제를 해결하기 위함임을 인지해라
- 건강한 집단은 일 자체를 먼저 강조한다.

### 건강한 집단을 만드는 법
1. 공동의 목적의식을 주입해라
2. 훌륭한 보좌전 팀을 꾸려라
- 공동의 목적의식으로 무정하고 아이디어 실행을 관리할 신뢰성 있는 팀을 만들 것
3. 정보와 아이디어가 자유롭게 흐르게 해라
- 생각이나 정보를 터놓고 소통하는 분위기를 만들 것 
4. 집단 내에 생산적 감정을 전염시켜라
5. 실전테스트를 거친 집단을 만들어라
- 몇 번의 전쟁을 거치고 상대를 어떻게 상대하는지 하는 실전 집단을 만들 것
- 이 집단과 함꼐라면 서서히 그들에게 요구할 수 있는 한계를 확장할 수 있음

"
2023-04-30 00:05:32,"정소영","넛지 파이널 에디션 (35일차)

신용카드 어쨌거나 사용법이 중요하다

[요약]
연체료가 있는 신용카드, 사용법이 중요하다. 신용카드는 여러 방법으로 자제력을 무력화한다. 현금이 아닌 신용카드로 지불할 수 있다면 2배 가격으로도 기꺼이 입찰함. 
- 전통적인 접근법은 철저하게 규제하는 것
- 신용카드의 감추어진 속성을 잘 띄도록 넛지를 넘어 규제하는 것

- 수입을 최대화하려면? 청구서와 납입기간을 좁혀라

- 연체료 수립 중 20%는 신용도가 최고 수준인 사람들에게서 나온다. 이것이 신용카드 시업이 높은 수익을 올리는 이유 중 하나
- 신용카드 관리 앱의 예시. 특징은 “쉽게 만들어라” 사람들이 쉽게 사용하게 하고, 잊지 못하게 해라 "
2023-04-30 00:06:11,"정소영","넛지 파이널 에디션 (36일차)

12장 사소한 것에 목숨 걸지 마라 : 보험

[요약]
사소한 것에 목숨 걸지마라, 모든 게 사소하다

대규모 손실에 대한 것은 개인 재정 상황에 따라 다르지만, ‘작은 사고에는 보험을 들지마라‘

가능한 공제액이 가장 큰 상품을 선택해라. 사람들은 자신이 부담해야 하는 공제액을 지나치게 낮게 설정하는 경향이 있다.(현재의 보험금 납부를 보고) 

공제액 회피의 실수 
- 나 자신의 계좌라고 하는 심리 계정 ‘자가 보험‘을 하는 것을 추천한다. "
2023-04-30 02:37:02,"소재훈","36일차 컴퓨터 네트워킹 하양식 제출입니다.
제출자: 소재훈

3. Wifi : 802.11 무선 랜
https://geode-drizzle-777.notion.site/3-Wifi-802-11-ac1a6831b17640bd8181f356e9651b6f

4. 셀룰러 인터넷의 접근
https://geode-drizzle-777.notion.site/4-5ee9bd5371f249d3b96ca59ea7c4ea92 "
2023-04-30 09:31:52,"길인식","[토요일]
[데이터 중심 애플리케이션 설계]
[요약]
일괄처리는 보고서가 아닌 검색, 머신러닝, 추천 부분에서 주로 쓰임
맵리듀스는 데이터 파일을 생성하며 활용하는것이 좋음. 자료구조가 단순해짐
극단적으로 하둡은 덤프 이후 데이터처리 생각, MPP는 선행 모델링 필요
맵리듀스는 실패를 견딜수 있고, 효율성이 좋다

[발췌]
일괄처리 작업은 사실상 ""식탁 아라에서 조각을 모은다"" 415p"
2023-04-30 17:22:00,"김현진","데이터 중심 애플리케이션 설계
토요일
https://ongoingjin.notion.site/W07-6-407-414p-967fd61750a84fa385e248fc65c1953c"
2023-04-30 20:05:34,"소재훈","@강민규 민규님! 이전에 잠깐 이야기 나왔던 커피챗은 어떻게 할까요??"
2023-04-30 20:05:55,"강민규","오 제가 한번 진행시켜보겠습니다"
2023-04-30 20:40:17,"강민규","좋은 주말 보내고계신가요? 주말 분량을 안하신 분들이 많네요~ 하루 결석한채로 진행되면 스트레스도 많이 받고 예상치 못한 스케줄 변동에 매우 취약해지니 시간 많을때 빠르게 분량을 다 채워봅시다~

@김채욱 @김형우 @이강욱 @최창훈 
선생님들은 금요일 분량부터 확인이 되지 않네요~ 이틀치 분량으로 제출 바랍니다!"
2023-04-30 20:45:46,"김채욱","[네트워크 35, 36일차, 금,토]
[내용 요약]
[CDMA]
정의 : Code Division Multiple Access, 디지털 셀룰러 기술로 다수의 유저가 하나의 밴드위드를 공유하기 위한 방법입니다. 각 유저의 시그널이 고유 코드를 이용해 전파합니다. 수신자는 동일한 코드를 이용해 시그널을 원본 데이터로 복구합니다. 

[Wi-Fi]
정의 : LAN에서 무선 통신을 위한 기술입니다. IEEE 802.11 기준의 프로토콜로, 주로 CSMA/CA , 장치간의 데이터 교환 합니다.
추가 설명 : CSMA/CA(carrier sense multiple access with collision avoidance) 프로토콜을 이용해 데이터 패킷을 전송합니다. 전송하기 전에 채널의 상태가 비어 있으면 전송하는 방식으로 충돌을 예방합니다.
관련 용어 : 
BSS : basic service set, 와아파이 네트워크를 구성하는 기본 블록입니다. 다수의 장치들이 하나의 AP에 연결됩니다.
Independent BSS : ad-hoc 네트워크에서 사용되는 방식으로, AP없이 장치간의 직접 연결을 합니다.
Infrastructure BSS : 장치들이 AP 혹은 중앙 hub를 통해 무선으로 연결하는 방식입니다.
SSID : service set identifier, 와이파이 네트워크에 할당된 고유 이름입니다. 이를 이용해서 장치들을 판별해 주변의 WLAN에 연결합니다. 각 장치들이 SSID 리스트를 받으면 최적의 네트워크를 선택합니다.
asscociate : 무선 장치를 AP에 연결하는 과정을 칭합니다. 장치들이 AP에게 요청을 보내고 AP가 응답을 한다면 데이터 통신이 시작됩니다.
Beacon Frame : AP가 정기적으로 beacon 프레임을 announce합니다. 이때 전달하는 데이터에는 SSID, 전송률, 보안 세팅, MAC 주소 등이 있습니다. 무선 장치들은 해당 beacon 프레임을 발견하면 연결이 가능합니다.
Active Scanning : 무선 장치가 정찰 요청을 보내 주변에 활성화된 AP를 찾습니다. 정찰 요청을 받은 AP는 응답을 보내서 네트워크 정보를 보냅니다. 무선 장치는 응답 받은 AP 중 선택하여서 가장 강한 시그널을 가진 네트워크를 선택해서 연결합니다.

[CSMA/CA]
정의 : carrier sense multiple access with collision avoidance, Media Access Control 프로토콜로 와이파이 네트워크에서 데이터 통신을 조율하기 위해 사용됩니다.
주요 용어 : 
DIFS : distributed inter-frame space, 특정 시간 인터벌로 장치가 데이터 패킷을 채널에 전송시 기다리는 시간입니다. 
SIFS : short inter-frame space, 장치가 데이터를 전송 받고 나서 SIFS 기간 동안 기다린 후에 ACK을 보내 확인 메세지로 응답합니다. 
과정 : 
장치가 데이터를 전송하기전에, 채널을 listen하여서 idle 혹은 busy 상태 여부를 확인합니다. idle인 상태이면 데이터 전송 준비를 합니다.
DIFS 기간 동안 대기 후에, 채널이 여전히 idle 상태이면 데이터 전송을 합니다.
만약 DIFS 기간에 다른 장치가 데이터 전송을 보냈다면, 다시 idle 상태까지 대기합니다. 
데이터가 성공적으로 보내졌다면, 수신자는 SIFS 기간동안 대기 후 ACK로 응답합니다.
전송자가 ACK를 받지 못하면, 데이터가 손실된 것으로 간주해 재전송합니다.
DIFS를 사용하는 이유 :
Carrier Sensing : DIFS 기간을 기다리면서, 채널 탐지 직전의 다른 장치가 전송 준비를 함으로써 생기는 충돌 문제를 해결합니다. 고로 전체적인 잠재 충돌 문제를 줄입니다.
Fairness : 고정된 DIFS기간을 기다림으로써, 장치간 채널 연결 속도에 의해 기회를 불균형을 줄입니다.
[Bluetooth]
정의 : 적은 범위의 무선 통신 기술로 10미터 정도의 범위를 가집니다. 
주요 용어 :
Frequency Hopping Spread Specturm : FHSS 기술은 시그널을 강화시키고 방해를 피합니다. 통신 채널은 다수의 밴드로 나누어집니다. 장치들은 해당 밴드 hop으로 데이터 를 전송합니다. 주로 초당 1600개의 hops가 있고 해당 hop당 전송률은 고정되어 있습니다.
Piconet : 피코넷은 작은 ad-hoc 네트워크로 블루투스 장치들에 의해 형성됩니다. 피코넷 안에 하나의 마스터 장치가 있고 7개의 slave 장치들이 있습니다. 마스터 장치가 시간과 hopping의 반복률을 제어합니다. 
과정 : 
Discovery : 2개의 블루투스 장치가 연결을 하고자 한다면, 발견 과정을 거칩니다. 하나의 장치가 discoverable mode로 도입하여서 다른 장치를 스캔합니다. 스캔 후 발견시 연결을 시작합니다.
Pairing : 2개의 장치가 연결이 되기전에, 보안 링크를 형성하기 위해 암호 키를 교환합니다. 주소, 장치 이름, 지원 서비스 정보를 공유도 합니다.
Connection : 페어링 이후 장치는 피코넷을 형성합니다. 마스터 장치가 hopping 주기와 slave 장치의 동기화 여부를 설정합니다. 이때 사용되는 기술이 FHSS입니다.
[4G-LTE]
정의 : Fourth Generation Long-Term Evolution, 무선 통신 기준으로 높은 속도의 모바일 인터넷 연결 서비스를 제공합니다. 

구조 : 

데이터 평면 : 실제 유저 데이터를 전송하는 부분을 책임집니다. 데이터 형태는 음성, 비디오 등 여러 타입이 존재합니다. 주요 책임으로 데이터 캡슐화, 전송, 네트워크 라우팅입니다.

제어 평면 : 네트워크 관리를 책임지어서 유저 장치가 네트워크에 연결을 할 수 있도록합니다. All-ip 환경에서 유저 장치가 네트워크에 연결하면, 제어 평면에 유저 정보(IP주소)를 저장하고 연결 시킵니다. 이때 유저가 이동에 따라 네트워크 연결이 끊임없이 지속되기 위해 연결 상태를 각기 다른 기지국에 전달을 합니다. "
2023-04-30 23:05:45,"최창훈","네트워크 35일차
https://cautious-ocarina-cca.notion.site/Chapter7-b94f77d0d8f04556835d4190a5ab8ad7"
2023-05-01 00:35:57,"이강욱","https://velog.io/@rivolt0421/Grokking-Simplicity-3536"
2023-05-01 02:14:23,"김형우","[35일차]
https://engineer-diary.tistory.com/198"
2023-05-01 10:15:35,"강민규","사진"
2023-05-01 10:16:13,"강민규","안녕하세요 선생님들 좋은 휴일 보내고 계신가요? 최고네요.. 이제 2주 남았습니다~ 마지막까지 화이팅!!"
2023-05-01 10:16:34,"김민수","[37일차 월요일] 바바라 민토 논리의 기술
3부 논리적으로 문제 해결하기 - 9장 문제 분석 구조화하기 - 이슈 분석 실시하기

[요약]
이슈 분석 : 진단 틀을 개발하는 프로세스
복잡한 상황에서 의사결정을 분석하기 위해 개발한 기술을 의미하기도 함
여러 안건은 서로 상충될 수 있으며 이슈 분석을 통하여 여러 가지 목적의 조화를 이룰 수 있는지 고민할 수 있다.

[발췌]
""보고서가 명쾌하지 않은 이유는 그에 요구되는 사고를 초기 단계에 충분히 하지 않았다는 사실을 의미한다.""

[메모]
짧은 컨설팅 보고서에는 아주 많은 시간과 비용이 소요된다는 것을 새삼 느낄 수 있었다."
2023-05-01 11:37:42,"김효선","5/1 팩트풀니스

https://heady-dinghy-922.notion.site/2023-05-01-287-290p-bb45d7a212f44350aec239a231539ddc"
2023-05-01 11:41:30,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]420 ~ 430pg

[요약]

Reading our finished timeline: 

2 orderings: certain & uncertain 

2 Simplification Steps:

1. Consolidate all actions on a single timeline
2. Consolidate timelines that end by creating one new timeline

Drawing timeline diagrams:

- identify actions: be careful with operations that look. like one action but are multiple acitons
- draw actions: sequence/parallel
- actions that execute in sequence
- actions that execute in parallel
- simplify the timeline
- reading timelines

Two fast clicks can get the result one: ajax response comes back a little late 

- need a better way to guarantee that our code will work
- remove problems by not sharing resources
    - using same global variables & stepping all over each other when they run interleaved

[발췌]

[메모]"
2023-05-01 17:24:31,"김현진","데이터중심 애플리케이션 설계
월요일
https://ongoingjin.notion.site/W08-1-415-434p-0cf94ece435846b7ab8729343bb8a213"
2023-05-01 20:30:18,"강민규","여러분 좋은 휴일 보내고 계신가요~ 남은 2주의 시작입니다! 이번 주만 끝나면 마지막 한 주는 자연스럽게 흘러갈 것이니 참고 견뎌보아요~ 

@김형우 @최창훈  선생님은 토, 월 분량 제출 바랍니다~"
2023-05-01 21:01:39,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
일차: 37일차

### 권위란, 따르고 싶은 모습을 연출하는 기술이다.
- 대중은 늘 권력자에게 이중적인 감정을 품는다.
- 권력자를 따르고 싶어 하면서도 동시에 자유롭길 바라며, 보호받고 번영을 누리고 싶으나 희생을 바라지 않는다.
- 저들의 충성심을 얻으려면 저들과 평등하게 보이거나 친구처럼 보여야한다는 이 시대의 편견에 넘어가지 마라
- 권위란, 겉으로 힘 있고 정당하고 공정한 모습을 연출하는 섬세한 기술이다. 
- 봉사하는 리더라는 인식을 주어야한다.

### 당연한 것은 없다.
- 사람은 자신이 이룬 것이 아무리 하찮더라도 자신의 업적을 당연히 존경받길 원한다.
- 또한, 남들이 내 아이디어와 프로젝트를 진지하게 받아들여야한다 생각한다.
- 이렇게 생각하는 이유는 실질적인 노력없이 기술이 우리에게 막강한 힘을 주었기 때문이다.
- 삶의 모든 게 빠르고 쉬어야 한다고 당연하게 생각하게 된 것이다.

- 우리는 이 것을 저주로 여겨야 한다.
- 이 저주는 우리를 게으르게 만들고 하찮은 아이디어나 초안 수준의 작업에도 만족하게 만든다.
- 만약 우리가 집단 내의 리더가 된다면, 나에 대한 존경심을 당연시 여기는 저주는 악화될 것이다.
- 당연히 남들이 와서 충성심과 존경심을 보여주길 바랄 것이다.
- 실수를 했을 때 외부 요인 탓만 하며 각종 특전과 특혜만 바랄 것이다.

- 우리는 실제로 내 위치가 공고하지 않다는 사실을 꺠달아야 한다.
- 내가 이끄는 사람에게 아무것도 기대하지 말아야 한다
- 온전히 적극적으로 나서야 한다.
- 나의 첫번째 고려 사항은 나자신이나 예민한 자존심이 아닌 집단 전체의 행복이어야 한다.
- 필요하면 나의 이해관계를 희생하고 실수가 있다면 책임져야한다.
- 이 방식으로 행동한다면 사람들은 우리의 영향력에 마음을 열게 될 것이다. "
2023-05-02 01:07:48,"김형우","[36일차]
https://engineer-diary.tistory.com/201"
2023-05-02 02:01:14,"최창훈","네트워크 36일차 
https://cautious-ocarina-cca.notion.site/Chapter7-b94f77d0d8f04556835d4190a5ab8ad7"
2023-05-02 07:45:27,"강민규","사진"
2023-05-02 07:46:51,"강민규","여러분 오랜만에 평일인데 힘들지는 않으신가요? 화이팅입니다!"
2023-05-02 12:36:01,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
일차: 38일차

### 인간은 늘 양면적인 감정을 느낀다.
- 사람의 감정은 단순하지않고, 거의 늘 양면적인 감정을 느낀다.
- 우리는 사랑하면서 동시에 증오할 수도, 존경심과 시기심을 동시에 느낄 수 있다.
- 이런 양면적 감정은 어린시절부터 시작한다.
- 부모에게 나의 생존이 달려 있기에, 분노와 좌절의 순간에도 필요와 사랑을 느끼기 때문이다.
- 우리는 내 감정의 양면성을 인식하지 못한다.
- 또한 상대의 감정을 최대한 소화하기 쉽게 단순하게 해석하려 한다.

### 리더는 항상 상대가 양면적인 감정을 가진다는 걸 인지해야한다.
- 평소에는 호의적이더라도 리더가 실수하거나 집단에 문제가 생겼을 떄 구성원들은 리더를 비난한다.
- 사실 그 동안, 구성원들이 보여준 충성과 호의는 리더를 존경하기 때문이라기 보다는 리더에게 자신의 운명이 걸려있기 떄문이다.
- 그래서 리더는 자신의 작은 행동 하나조차 각 개인에게 무의식적인 영향을 준다는 걸 알야아 한다.
- 자신의 태도나 어떤 분위기를 조성하는지에 대단히 주의를 기울여야 한다.
- 그들의 지지를 받고 있다고 당연하게 가정하면 안된다.
- 본능적 공감능력을 발휘해라

### 권위를 형성하기 위해 해야 할 3가지
- 우리는 권위라는 현상에 대해 관찰해야한다.
- 권위를 보여주려할 때 당신에게 잘 맞는 습관과 전략을 개발해야한다.
- 이 시대의 비생산적인 편견에 넘어가지 말아야 한다."
2023-05-02 13:31:15,"김민수","[38일차 화요일] 바바라 민토 논리의 기술
4부 논리적으로 표현하기 - 10장 피라미드 원칙으로 문서 작성하기

[요약]
4부에서는 1~3부에서 피라미드로 완성한 내용을 독자에게 전달할 수 있는 글로 표현하는 방법을 다룬다.
표현하는 방법은 텍스트에 국한되지 않고 이미지와 인포그래픽, 비디오 등 다양한 시청각적 요소를 포함한다.
어떤 형태를 취하는지는 메시지의 길이와 독자의 수에 따라 결정할 수 있다.
모든 방법은 독자가 이해하기 쉽게 하는 것이 목적이다.

[발췌]
""독자가 이 생각의 구조를 쉽게 이해할 수 있는가는 시각적으로 어떻게 배치하는가에 달려 있다.""

[메모]
글이 쓰인 시점을 고려하여 미디어의 범위를 현재에 맞게 다시 고려해야 한다."
2023-05-02 15:35:51,"영동","함수형코딩 420-440 (37-38일차)

여러 타임 라인이 존재하는 함수 호출을 단순화 해본다.
자바스크립트는 단일스레드 방식이기 때문에 2개의 타임라인을 하나로 합쳐서 생각 할 수 있다.

두 타임라인을 동시에 실행하는데 공유하는 자원이 있다면 문제가 생긴다.
공유 자원을 명시적인 인자로 사용하는 함수로 변경한다.

자원을 독립해서 써야 여러번 호출하는 상황에서도 문제가 생기지 않는다.

전역변수를 독립적인 인자로 사용했다고 해서 완전한 계산이 되는건 아니다. 
무지성 액션보단 계산에 가까운 액션을 지향하자.

반환된 값을 돌려주는 방법은 콜백을 사용한다."
2023-05-02 17:16:47,"소재훈","37, 38일차 컴퓨터 네트워킹 하양식 제출입니다.
제출자: 소재훈


5. 이동성 관리: 원칙
https://geode-drizzle-777.notion.site/5-94879a65c2ce48b9a623be63c844b09b

6. 셀룰러 네트워크에서의 이동성 관리
https://geode-drizzle-777.notion.site/6-7d0e06e738bd4df085ddbfe71f952f37

7. 무선의 이동성: 상위 계층 프로토콜의 영향
https://geode-drizzle-777.notion.site/7-889a7d42594a474cac6942e071c093fa"
2023-05-02 20:14:22,"김효선","5/2 팩트풀니스

https://heady-dinghy-922.notion.site/2023-05-02-291-295p-6d9750aa870e4c6b93953ef5927abb18"
2023-05-02 20:56:28,"강민규","여러분 휴일이 오히려 여러분을 더 힘들게 하는 것인가요? 월요일 분량 하지 않으신 분이 굉장히 많군요~ 이제 다시 현실로 돌아와봅시다!

@길인식 @김채욱 @김형우 @이강욱 @이미정 @정소영 @최창훈 @Seo 

이틀 연속 결석하시면 아침에 개인적으로 연락드리는데요 여러모로 서로 불편하니 최선을 다해 규칙을 지켜봅시다~"
2023-05-02 20:56:36,"강민규","언급 되신분들은 확인하시면 체크 한번씩 부탁해요, 혹시 못보시는 분이 있으면 밤에라도 개인적으로 연락을 드리기 위함입니다!"
2023-05-02 21:09:04,"이미정","엇 저 월요일 제출했습니당"
2023-05-02 21:10:13,"강민규","앗 그렇군요 감사합니다~"
2023-05-02 21:11:24,"이미정","이모티콘"
2023-05-02 22:52:29,"Seo","5/1 월
https://seoshow.notion.site/DAY37-f82f988d321f4e8f868b1955fc9fe5b9

5/2 화 
https://seoshow.notion.site/DAY38-6c66f5c2c72b46548a8c1bf73108141c"
2023-05-02 23:09:22,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]431 ~ 440pg

[요약]

Timelines that share resources can cause problems:

- convert a global variable to a local one

calc_cart_total(): still action- updates DOM & contacts the server twice

In an async context, we use a final callback instead of a return value as our explicit output

[발췌]

[메모]

pg 347 why can’t we return a value from an async function?"
2023-05-02 23:10:08,"강민규","@김채욱 채욱님 꼭 잊지말고 해주세요~"
2023-05-03 00:29:57,"길인식","삭제된 메시지입니다."
2023-05-03 00:32:34,"길인식","[월요일]
[데이터 중심 애플리케이션 설계]
[요약]
맵리듀스는 학습하기가 유용한 도구로서 단순 명료하게 추상화 되었지만 사용하기 쉽다 보다는 이해하기 쉽다는 의미이다.
분산 파일 시스템에서 중간 상태를 구체화 할때 내결함성의 장점이 생긴다.
맵리듀스 이후 일괄처리엔진에서 고수준 Api의 발전이 있었다. 추상화 되어 사용자가 시스템을 편하게 쓸 수 있고 선언형 질의어 등으로 효율적으로 사용할 수 있다.
[메모]
고수준 api에 선언적 측면응 포함하며 질의 최적화를 한다면 mpp 데이터베이스와 비슷해지면서도 유연성을 그대로 유지할 수 있다"
2023-05-03 01:31:14,"최창훈","37일차
https://www.notion.so/Chapter7-b94f77d0d8f04556835d4190a5ab8ad7"
2023-05-03 01:43:07,"김형우","[37일차]
https://engineer-diary.tistory.com/202"
2023-05-03 02:20:57,"정소영","넛지 38일자는 다음 챕터에 대한 저자의 설명이 주로 있어 37일차 분량과 함께 읽고 같이 정리하였습니다. 🚶🏻📗
-

넛지 파이널 에디션 (37 - 38일차)

12장 사소한 것에 목숨 걸지 마라 : 보험
- 공재액 회피와 최적의 의료보험 

[요약]
중립적인 선택 설계는 일반적으로 불가능하다. 
겉으로는 합리적으로 보이는 설계라 하더라도 알 수 없는 선택과 그에 따른 값비싼 비용을 감수하는 결과를 낳을 수도 있음.
‘행동적 해이’에 대해서도 ‘도덕적 해이’만큼 염려해야 한다. 

예]
최족의 의료보험 - 미국의 의료보험 선택 설계 ‘샐러드 바’ 접근법 
모든 조건은 동일하게 세팅하고, 금액에 관련된 부분만 자유설계가 가능하도록 했음
이때 선택의 번거로움을 피하려는 사람을 위해, “기본 설정 선택지”도 정해둠
-> 기본 설정 선택지가 꽤나 최적의 선택지였음에도 “대부분의 사람이 기본 설정을 거부하는 사례” 

[메모]
우월성을 위반하는 사례 (더 좋은 우월한 선택지가 있음에도 우월하지 않은 쪽을 선택) 의료보험의 예시로는 공제액이 낮은 것을 선택한다는 공통점.
- 당장의 의료비/보험비를 더 생각하는 경향.
- 이렇게 해서 자기부담금을 아끼는 사람은 당장의 약값을 아끼는 경향도 있음. 

-> 수치로 명확하게, 쉬운말로, 이후 플랜까지 잘 설명하는 것이 잘 넛지시키는 것이지 않을까"
2023-05-03 02:35:25,"이강욱","https://velog.io/@rivolt0421/Grokking-Simplicity-3738"
2023-05-03 07:28:02,"김채욱","[네트워크 37일차 월]
[이동성 관리]

설명 : 노드의 이동은 네트워크 접속점을 변경하는 동작을 의미합니다. 이동이 없는 것은 동일한 네트워크만 사용하는 것이고, 연결을 끊고 이동 후 새로운 네트워크에 연결하는 것은 중간 이동성을 띄고, 마지막으로 노드가 이동 중에 네트워크 접속점을 변경하는 것을 높은 이동성으로 칭합니다.

용어 :

홈 네트워크 : 이동 노드의 실제 IP주소 및 영구적인 집이라고 칭합니다. 이동 노드의 이동성 관리를 책임집니다.

홈 에이전트 : 홈 네트워크 개체입니다.

방문 네트워크 : 현재 이동 노드가 머무는 네트워크입니다.

방문 에이전트 : 방문 네트워크의 개체로 이동 노드의 현재 위치 주소를 홈 에이전트에게 알리는 책임을 가집니다.

CoA : Care-of-Address, 방문 네트워크 IP주소입니다. 해당 CoA 주소는 홈 에이전트에게 등록시킴으로써, 추후 홈에이전트로 오는 데이터그램을 CoA로 전송시킵니다. 

​

[간접 라우팅]

설명 : 데이터그램을 이동 노드로 직접 보내지 않고 홈 에이전트로 보내서, 중간 연결 방식으로 간접적으로 통신합니다. 홈 에이전트는 CoA를 활용해 해당 이동노드로 데이터그램을 전송합니다. 

과정 :

이동 노드가 외부 네트워크에 도달합니다.

방문 에이전트로 부터 CoA를 할당 받고, 이를 홈 에이전트로 전달시킵니다.

홈 에이전트는 CoA를 등록하고 현재 이동 노드의 IP주소와 매핑합니다.

전송자는 이동 노드의 IP주소로 데이터 패킷을 보냅니다.

홈 에이전트는 데이터 패킷을 받고 캡슐화하여서 CoA를 새로운 IP주소로 설정합니다.

데이터 패킷은 방문 에이전트로 전송이됩니다.

이동 노드는 CoA 캡슐화된 패킷을 받고 역캡슐화를 합니다.

*IPv4에서 IPv6의 터너링과 유사합니다.

문제점 :

이동 노드가 송신자보다 가까운 거리에 있어도, 항상 송신자는 홈 에이전트로 데이터 패킷을 보내기에, 경로가 비효율적일 수도 있습니다.

​

[직접 라우팅]

설명 : 송신자가 먼저 홈 에이전트로 부터 현재 이동 노드의 CoA를 받습니다. 이후 직접 이동 노드로 데이터 패킷을 보냅니다.

요구사항 :

이동 사용자 위치 파악 프로토콜 : 송신자 에이전트는 별도의 CoA를 알기 위한 프로토콜가 필요합니다.

이동 노드가 새로운 네트워크로 이동시에는, CoA 갱신이 어렵습니다.

이를 위해 새로운 방문 에이전트가 앵커 방문 에이전트(기존 방문 에이전트)로 현재 이동 노드의 CoA를 주어서 업데이트를 시킴으로써 문제를 해결합니다.

​

[이동 IP]

설명 : IPv4의 동작 방식을 지원하는 표준입니다.

구성 :

에이전트 발견 : 홈 에이전트나 방문 에이전트가 이동 노드에게 자신이 제공할 수 있는 서비스를 알려 주기 위해서 사용하는 프로토콜과, 이동 노드가 방문 에이전트나 홈 에이전트에게 서비스를 요청하기 위해서 사용하는 프로토콜입니다.

에이전트 광고 : 방문 에이전트나, 홈 에이전트가 자신의 서비스를 브로드캐스트를 통해 주기적으로 연결된 모든 링크에게 보냅니다.

에이전트 요청 : 이동 노드가 에이전트를 찾고자 요청 메시지를 브로드캐스트합니다.

홈 에이전트와의 등록 : 이동 IP에는 이동 노드 또는 방문 에이전트가 이동 노드의 홈 에이전트와 CoA를 등록/해재하기 위해서 사용하는 프로토콜입니다."
2023-05-03 07:34:21,"길인식","[화요일]
[데이터 중심 애플리케이션 설계]
[요약]
일괄 처리는 입력 크기를 알아야 진행되고 일정 시간마다 한번에 진행됨. 반대로 매초나 이벤트 마다 처리하려면 스트림처리가 효율적
전송방법은 폴링은 비효율, 직접 전달은 유실 허용문제가 있으며 브로커가 좋은 대안이나 필연적으로 메세지 순서가 변경됨
[발췌]
복잡하지만 잘 작동하는 시스템은 예외없이 간단하지만 잘 작동하는 시스템으로부터 발전한다. 이 명제는 역도 참이다. 435p"
2023-05-03 07:45:19,"강민규","사진"
2023-05-03 07:46:09,"강민규","이틀만 더 일하면 되는군요, 요새 다들 지각도 많고 위태위태하지만 최선을 다하면 못할 것도 없습니다. 응원합니다~"
2023-05-03 09:19:00,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]441 ~ 454pg

[요약]

Ch 16 Sharing Resources Btw timelines

- how to diagnose bugs due to sharing resources
- understand how to create a resource-sharing primitive that can allow resources to be shared safely

creating reusable pieces of code: concurrency primitives 

Building a reusable way to coordinate the timelines so they share it safely

- fewer timelines are easier
- shorter timelines are easier
- sharing fewer resources is easier
- coordinate when resources are shared
- manipulate time as a first-class concept

How can we ensure that we update the DOM in the correct order?

- use queue: data structure where items are removed in the same order they are added
- wrap the variables in a function scope

[발췌]

[메모]"
2023-05-03 13:21:36,"김민수","[39일차 화요일] 바바라 민토 논리의 기술
4부 논리적으로 표현하기 - 10장 피라미드 원칙으로 문서 작성하기 - 구조 강조하기

[요약]
문서가 짧은 경우 핵심 단계 포인트를 뒷받침해주는 단락이 2개 이하인 경우 전체를 쉽게 이해시킬 수 있다.
2개보다 많은 경우 핵심 단계 포인트를 소개한 뒤 포인트를 반영한 제목을 붙인다.
계층형 제목을 붙이는 경우에는 피라미드 하부에 있는 포인트를 상부에 있는 포인트보다 오른쪽에 배치해야 한다.

[발췌]
""제목으로 인해 메시지가 더욱 명확해지거나, 독자가 메시지의 구분을 더욱 쉽게 받아들일 수 있을 때만 제목을 붙여야 한다.""

[메모]
제목을 붙이는 다양한 방법과 이유를 설명한 뒤 제목을 꼭 필요한 상황에만 붙여야함을 말하고 있는데 중요성이 잘 느껴지는 배치이다.
이런 부분들이 이 글의 매력인 것 같다."
2023-05-03 15:43:32,"영동","함수형코딩 441~454

안전하게 자원을 공유하는 방법

2가지의 비동기작업을 한 뒤 최종적으로 각각 공유 자원을 변경하는 경우 순서가 꼬이면 비즈니스 로직상에 문제가 생긴다.

좋은 타임라인은 다음과 같은 원칙을 가진다.
1. 타임라인은 적을수록 이해하기 좋다.
2. 타임라인은 짧을수록 이해하기 좋다.
3. 공유하는 자원이 적을 수록 이해하기 쉽다.
4. 자원을 공유한다면 서로 조율해야한다. 안전하게 공유한다 = 올바른 순서대로 자원을 쓰고 돌려준다.
5. 시간을 일급으로 다룬다.

큐를 이용해서 작업순서를 다룬다.

setTimeout(runNext,0)를 이용해서 runNext를 이벤트루프에 넣는다.

이벤트루프는 입력된 runNext를 실행한다."
2023-05-03 22:13:00,"강민규","여러분 늦은 밤입니다. 사정이 생기면 늦을 수 있지만 결국 하고 마는 것. 그게 중요한 것 아니겠습니까? 7주차 잘해온 만큼 저희 잘할 수 있습니다! 

@김채욱 @김현진 @김형우 @최창훈 선생님들은 화, 수 분량을 오늘 제출해보도록 합시다~"
2023-05-03 22:31:26,"김채욱","[네트워크_38,39일차]
[셀룰러 네트워크에서의 이동성 관리]

설명 : GSM, global system for mobile communications, 모바일 소통을 위한 기준입니다. 간접 라우팅 방식을 사용하여서, 모바일 장치간의 직접 연결 대신에 여러 네트워크 구조를 통해 라우팅이 되어서 메시지 혹은 call을 전달합니다.

용어 :

PLMC : public land mobile network, 텔리콤 네트워크입니다. 모바일 소통을 위해 특정 구역의 모바일 유저들에게 통신에 관한 책임을 집니다.

HLR : home location register, 홈 네트워크 혹은 홈 PLMC의 데이터베이스로 가입자의 휴대폰 번호와 개인 정보, 현재 가입자의 위치 등을 유지합니다. 

GMSC : gateway mobile switching center, 모바일 네트워크와 다른 텔레콘 네트워크 간의 인터페이스 역할을 하는 특수 스위치입니다. 

VLR : vistor location register, 방문 네트워크에서 사용하는 데이터베이스로 현재 네트워크에 구독한 모바일 유저의 정보를 임시 저장합니다. 이후 해당 정보는 홈 PLMC에 전송하여서 HLR을 최신화합니다.

PSTN : public switched telephone network, 텔레콤 네트워크로, 아날로그 음성 통신과 디지털 통신을 지원합니다.

MSRN : mobile station roaming number, 임시 위치 기반 라우팅 번호로, 홈 네트워크 외에 네트워크와 연결된 모바일 장치를 찾기 위해 사용됩니다. 이동 IP의 CoA와 유사한 개념입니다.

과정 :

Call initiate : 이동 모바일 유저에게 전화를 걸면서 전화 거는자의 장치는 PSTN에 연결을 합니다.

Routing to GMSC : 콜은 수신자의 홈 네트워크의 GMSC로 라우팅됩니다.

HLR query : GMSC에서 HLR로 쿼리를 해서 수신자의 상태 정보를 확인합니다.

MSRN assignment : HLR은 MSRN로 VLR에게 요청해서 현재 모바일 유저의 위치를 파악합니다.

MSRN forwarding : VLR은 MSRN을 HLR에게 응답한 후, GMSC로 포워딩합니다.

Call routing to MSC : GMSC는 MSRN을 이용해 현재 모바일 유저의 MSC로 콜을 라우팅합니다. 

Communication with the base station : MSC는 기지국에게 통신해서 한후 BTS(base transceiver station)으로 하여금 모바일 유저와 연결을 합니다.

​

[무선과 이동성: 상위 계층 프로토콜에의 영향]

설명 : 무선과 유선 통신은 링크계층(페이딩, 다중경로, 숨은 터미널)과 네트워크 계층(네트워크 접속점이 동적으로 바뀌는 이동 유저)의 차이점이 있습니다. 

무선 통신의 TCP 프로토콜의 영향 :

이동 유저의 핸드오프 과정의 네트워크 접속점 변경으로 인한 패킷 손실

이로 인해 TCP의 불필요한 혼잡 윈도우 감소

TCP 영향 해결 방안 :

지역 복구 : 비트 오류시, 오류 발생 지점에서 복구합니다.

TCP 송신자의 무선 랜 인자 : 네트워크 핸드오프로 인해 생기는 패킷 손실은 혼잡으로 인한 피해로 생각하지 않습니다.

연결 분리 방법 : 트랜스포트 계층을 2개로 나누어, 무선 부분과 유선부분으로 별도 관리합니다.

[네트워크 보안이란]

설명 : 네트워크 상에서 안전한 통신을 요구하기 위해 다음의 특성을 만족하는 것입니다.

특성 :

기밀성 : 수신자만이 전송된 메시지를 이해할 수 있어야 합니다.

메시지 무결성 : 전송 도중 메시지가 변경되지 않아야 합니다.

종단점 인증 : 통신의 대상을 알아야 합니다.

운영 보안 : 네트워크를 보호하기 위해 방화벽이나 침입 감지 시스템으로 보호합니다.

​

[대칭키 암호화]

정의 : 동일한 key로 암호화와 복호화를 합니다. 송신자와 수신자는 동일한 암호키를 가지고 데이터를 암호화해서 송신 후, 복호화 합니다.

추가 설명 : 암호화 된 문자는 평문과 1대1 매칭이 되는 것을 단일 문자 대응 암호인데, 이는 분석을 통해 평문을 알아 낼 수 있기에, 하나의 평문에 다중 문자를 매핑한 다중 문자 대응 암호화 방식으로 경우의 수를 늘립니다.

종류 :

블록 암호화 : 고정된 크기의 블록으로 평문 데이터를 나눕니다. 해당 블록 별로 암호화를 하되, 다양한 방식으로 진행을 합니다. SSL 프로토콜에서 대표적으로 사용합니다."
2023-05-03 22:49:49,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
일차: 39일차

### 기꺼이 따르게 만들어라
- 권위의 핵심은 사람들이 기꺼이 자발적으로 당신을 따르는 것이다.
- 그들이 당신의 지혜를 원해야한다.
- 완력, 보상, 처벌과 같은 장치가 덜 필요할수록 당신의 권위가 커진다.
- 그들의 타고난 저항과 이중적인 감정을 극복할 수 있도록 노력해야한다.

1. 당신의 권위유형을 찾아라: 진정성
- 권위는 당신이 보유한 특정한 감정에서 나온 것이어야 한다.
- 권위의 유형은 아래와 같이 여러개가 있다.
- 구원자 유형은 사람들을 악으로부터 구원하겠다는 결의가 확고한 사람이다.
- 창설자 유형은 새로운 질서를 확립하고 새로운 것을 만들어내는 사람이다.
- 진실추적자 유형은 거짓말이나 정치공작을 절대로 참지 못하는 사람이다.
- 조용한 실용주의자 유형은 망가진 것을 고치고 싶어 하며 무한한 참을성을 가진 사람이다.
- 힐러 유형은 사름들을 만족시키고 단결시킬 수 있는 것을 찾아내는 재주가 있는 사람이다.
- 스승 유형은 사람들이 행동을 개시하고 실수로부터 배우도록 만드는 사람이다.

2. 밖으로 초점을 맞춰라: 태도
- 남의 말을 듣는 기술을 연마해라(비언어적 신호에 주목!)
- 사람들의 존경을 얻는데 전념해라
- 리더가 되는 것이 많은 책임을 다른다는 걸 인지해라(모든 결정이 집단의 안녕을 결정하기 때문)

3. 제 3의 눈을 키워라: 비전
- 더 큰 비전을 가지고 큰 그림을 그리는 상상을 해라
- 외부인의 아이디어에 귀를 기울여라
- 당파적 의견에 물들지 않고 사건을 그대로 보는 연습을 해라

4. 앞으로 이끌어라: 분위기
- 누구보다 더 열심히 노력하는 모습을 보여라
- 자신에게 가장 높은 기준을 설정해라
- 희생이 필요하다면 당신이 먼저 나서서 희생해라
- 중요한 것은 처음에 물러서지 않는 모습을 보여주는 것이다.
- 처음부터 부드러운 모습을 보인다면, 만만하다는 신호를 주게 된다.

5. 상충하는 감정을 일으켜라: 아우라
- 사람들을 사로잡는 존재가 되라
- 약간은 상반되는 자질을 보여줘서, 당신을 즉각 특정 카테고리에 넣기 힘들게 해라
- 당신이 어떤 사람인지 생각해보게 해라
- 당신에 대해 생각을 많이할수록 당신의 존재감과 권위를 더 커진 것이다.
- 말을 너무 많이하면 당신의 약점이 드러날 수 있기에 침묵을 이용해라


### 자신을 계발하는 법
- 더 높은 목적에 이바지하고 싶다면 당신만의 개성을 개발해라
- 사람이나 사안에 대해 스스로 판단해라
- 초점을 맞추고 우선순위를 정해라
- 일을 할 때 가장 높은 기준을 고수해라
- 처음 떠오르는 생각이나 아이디어는 불안전하거나 부적절할 수 있기에 더 생각하고 일부는 폐기해라"
2023-05-03 23:16:21,"김효선","5/3 팩트풀니스

https://heady-dinghy-922.notion.site/2023-05-03-296-309p-e3840b6f29174833bad54f1d04278b15"
2023-05-03 23:58:54,"길인식","[수요일]
[데이터 중심 애플리케이션 설계]
[요약]
AMQP/JMS 형식의 메시징 처리는 일시적 연산이다. 데이터를 지속성 있게 하려면 로그 기반 메시지 브로커 필요.
오프셋을 통해 순서를 파악
또한 변경 데이터를 파악하기 어려운점이 있는데 이를 위한 API지원이 증가하는 추세. 카프카 커넥트
[메모]
책 후반으로 가면서 생각지도 못했거나 어려운 개념이 많다. 나중에 10장부터 일괄처리를 다시 이해가 필요하다"
2023-05-04 01:09:34,"김현진","화요일
데이터 중심 애플리케이션 설계
https://ongoingjin.notion.site/W08-2-435-442p-137eadf65d804bbc925b5f00250aeb88"
2023-05-04 02:39:25,"최창훈","네트워크 38일차
https://cautious-ocarina-cca.notion.site/Chapter7-b94f77d0d8f04556835d4190a5ab8ad7"
2023-05-04 07:17:40,"김형우","[38일차]
https://engineer-diary.tistory.com/205"
2023-05-04 07:38:28,"강민규","사진"
2023-05-04 07:38:34,"강민규","여러분 좋은 아침입니다~ 이번 주 마지막 평일! 좋은 하루되세요 "
2023-05-04 09:25:19,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]455 ~ 468pg

[요약]

Make the queue reusable

- Queue gives actions the superpower of guaranteeing order
- Move all of DOM updates to a single timeline, cannot happen out of order

Call the callback when the task is complete

Timeline diagrams: make timing problems obvious

- Can see shared resources and whether they will occur in the wrong order
- Timing bugs are incredibly hard to reproduce, not obvious in the code

Making the queue skip

- Conditional statements

[발췌]

[메모]"
2023-05-04 13:19:38,"김민수","[40일차 목요일] 바바라 민토 논리의 기술
4부 논리적으로 표현하기 - 10장 피라미드 원칙으로 문서 작성하기 - 구조 강조하기

[요약]
밑줄 긋기
생각의 계층 구조를 표현하는 또 다른 방법은 핵심 단계 계층 아래의 보조 포인트 전체에 밑줄 긋기이다.
주요 요점만 읽어도 전체 메시지를 쉽게 이해하기 위해서 지켜야 하는 규칙
1. 질의응답 논리를 엄격하게 적용
2. 포인트 문장은 최대한 간결하게 기술한다.
3. 포인트는 논리 전개에 필요한 기술에 한하여 적용한다.

번호붙이기
신속하게 파악할 수 있다는 이유로 번호를 붙이고자 한다면, 제목과 번호를 병행

들여쓰기
제목이나 번호가 필요 없을만큼 짧지만 그루핑을 하고 싶은 경우

[발췌]
""이런 방법을 사용할 때는 각각의 생각을 '동일한 기술 스타일'로 표현해야 하는 점을 기억해두어야 한다.""

[메모]
저자는 워드 프로세서의 발달이 이 글에 미치는 영향에 대해 어떻게 생각하고 있을지 궁금해졌다."
2023-05-04 15:30:00,"Seo","5/3 수
https://seoshow.notion.site/DAY39-7946bdf669594428ae262064196ef5ed

5/4 목
https://seoshow.notion.site/DAY40-7de4b71937d0400eab2dec5455e6454f

5/5 금
https://seoshow.notion.site/DAY41-52fb0ec9668e44909f07fb201f92f71a"
2023-05-04 15:30:05,"Seo","내일것까지 미리 냅니다~"
2023-05-04 15:31:05,"김민수","[41일차 금요일] 바바라 민토 논리의 기술
4부 논리적으로 표현하기 - 10장 피라미드 원칙으로 문서 작성하기 - 그룹 간의 전환 지원하기

[요약]
중점과 대시 붙이기
주요 요점을 이해하기 쉽게 하기 위함이기 때문에 모든 계층에서 사용해서는 안 된다.

도입부를 완성한 뒤 본문을 작성하게 되면 서두에서 핵심 단계에 대해 짤막하게 언급해주어야 한다.
상황-전개-질문의 스토리 구조를 만들어 답변해주는 것이 가장 자주 사용된다.

[발췌]
""(결론 요약은) 앞에서 나온 내용을 똑같이 반복해서는 안 되며, 중요한 부분과 어조를 최대한 교묘하게 재현해야 한다.""

[메모]
이 글은 내용을 적절하게 반복하는 것에 대하여 논하고 있고 본인도 같은 내용을 반복하고 있다."
2023-05-04 15:31:08,"김민수","그렇다면 저도... "
2023-05-04 19:11:16,"강민규"," 여러분 다들 퇴근 하셨나요? 내일이 어린이날이니 아마 오늘부터 놀아야할까나요.. 다들 좋은 주말 보내세요

@김현진  @최창훈  @김형우  @이강욱 @정소영  @소재훈 

 선생님들은 이틀치 분량으로 가봅시다~"
2023-05-04 19:14:30,"정소영","이모티콘"
2023-05-04 19:23:46,"김효선","5/4 팩트풀니스

https://heady-dinghy-922.notion.site/2023-05-04-310-313p-cb9b59cadfbb4751835fe778510ac346"
2023-05-04 19:29:26,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
일차: 40일차

### 공격자 유형
- 특별한 재능은 없지만 공격적 에너지를 주된 무기로 목적을 달성하는 사람이 있다.
- 공격적 에너지에는 크게 2가지 유형이 있는데 원시적 공격자는 수비게 흥분하고 자제심이 부족하다.
- 그에 비해 세련된 공격자는 자신의 최고의 위치에 오르기 위해 자신의 수법을 감추고 사람들의 감정을 가지고 놀곤 한다. 
- 세련된 공격자는 사람들이 장기전을 좋아하지 않은 걸 알기에 상대에게 겁을 주거나 지레 지쳐 나가 떨어지게 한다.
- 이 사람들은 본인에게 유리하게 법망을 활용하고 권력을 독점하고 싶어하는 경우가 있다.

### 공격자 유형에 어떻게 대처해야할까
- 우리는 그들이 투영하는 겉모습이나 강한 상대일 것 같다는 착각, 공격적이라는 평판에 무릎을 꿇곤한다.
- 이들을 상대할 때는 감정적 온도를 내려라
- 그들의 신화나 전설이 아닌 개인을 봐라
- 그들은 주위 환경이나 주변 사람들에 대한 통제력을 갖는 게 목적이다.
- 사실 공격자 유형은 통제력에 대한 욕구 이면에는 겹겹이 쌓인 불안과 초조함이 있다.
- 내 감정이 아닌 상대의 행동과 내 전략에 집중해라
- 공격자들이 종종 원하는 것을 얻어가는 이유는 당신이 지금 그들과 싸우면 잃을 게 너무 많다고 생각해 겁을 내가 때문임을 명심해라"
2023-05-04 22:50:40,"소재훈","39일,40일차 컴퓨터 네트워킹 하양식 접근 제출입니다.
제출자: 소재훈

1. 네트워크 보안이란 무엇인가?
https://geode-drizzle-777.notion.site/1-5e92fa9f51db41b58e6a7afdc37b7483 

2. 암호의 원리
https://geode-drizzle-777.notion.site/2-a856b6b6569343d7b927d6f7e7a6016c

3. 메시지 무결성과 전자서명
https://geode-drizzle-777.notion.site/3-94f0fa0357934d2c970816e62b10c9c7 
"
2023-05-04 23:54:42,"김현진","데이터 중심 애플리케이션 설계
수요일
https://ongoingjin.notion.site/W08-3-443-453p-6924fb4be62f40fc906c4d69b8eaa3e6"
2023-05-05 03:08:12,"정소영","넛지 파이널 에디션 (39일차)

13장 장기기증: 기본 설정 해법에 대한 환상

[요약]
장기기증에 대해 기본설정을 어떻게 하느냐.
사전에 기증을 하겠다는 의사표명이 기본설정인 나라에서는 극소수만이 그 설정을 변경함.
기본 설정, 유도된 선택이 생명과 연관된 부분이면서 많은 결과값을 낼 수 있음

[메모]
- 기본설정이 기증을 하지 않겠다는 나라는 대부분 동참하지 않음
- 능동적으로 선택을 바꿔야 하기 때문
- 이는 > 유도된 선택

- 장기 이식이 필요한 환자가 될 가능성은 장기 기증자가 될 가능성의 3배

• 장기기증을 둘러싼 현실
- 어떻게 잠재적 기증자에게, 유가족에게 어필하여 많은 장기 많은 생명을 살릴 수 있을까
- 기본 설정 원칙이 적용 
- 고여할 수 있는 선택지는 다양 "
2023-05-05 03:20:58,"정소영","넛지 파이널 에디션 (40일차)

13장 장기기증: 기본 설정 해법에 대한 환상

명시적 동의 ; 타성과 진짜 마음
 • 상례젹 적출 : 모든 권리는 정부에 있다
공격적으로 생명을 살릴 수 있다는 것에 접근한다면 국가의 개입이 가장 명확 
- but 개인의 몸에 대한 결정권이 위배
- 채택한 곳도 아무 곳도 없음. 

• 추정 동의 : 진정한 선택이 될 수 있을까
> 이는 명시적 취적 
- 사람들이 추정 동의의 기본설정을 거부하지 않는 이유는 동의하기 때문이 아닌 “부주의나 타성 때문일 수도 있다.”

[발췌]
•자신이 이미 그렇게 하겠다고 추정적으로 동의했는데, 굳이 따로 그 내용을 등록할 이유는 없다.
"
2023-05-05 03:30:22,"이강욱","https://velog.io/@rivolt0421/Grokking-Simplicity-3940"
2023-05-05 05:13:15,"김형우","[39일차]
https://engineer-diary.tistory.com/206"
2023-05-05 07:54:35,"최창훈","네트워크 39일차
https://cautious-ocarina-cca.notion.site/Chapter7-b94f77d0d8f04556835d4190a5ab8ad7"
2023-05-05 09:28:38,"강민규","여러분 좋은 휴일입니다! 오늘도 루틴이 망가지지않게 신경써보아요"
2023-05-05 09:29:39,"강민규","사진"
2023-05-05 12:44:06,"김효선","5/5 팩트풀니스 

https://heady-dinghy-922.notion.site/2023-05-05-314-318p-f3d498abc5344cf28a5a78a1031cede4"
2023-05-05 16:15:56,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]469 ~ 480pg

[요약]

timing issues: use timeline diagrams to analyze and diagnose timing issues

build reusable tools that help you share resources - concurrency primitives 

- take form of higher-order functions on actions : give the actions superpowers

Ch 17: coordinating timelines

- create a primitive to coordinate multiple timelines
- ordering and repetition

Principles of working with timelines

- manipulate time as a first-class concept
    - create reusable objectst that manipulate timeline

3 Steps to diagramming

- Identify actions
- draw each action
- simplify

[발췌]

[메모]"
2023-05-05 16:52:46,"영동","
함수형코딩 455~480 40~41일차
DOM같은 공유 자원을 사용 할 때 순서의 문제가 생길 수 있다.

시퀀스다이어그램을 통해 순서를 명확히 파악하자. 파악하지 못하는 것이 문제가 된다.

동시성 기본형 : 타임라인을 조율하기 위해 사용한다.

액션 확인하기
액션을 그리기
단순화하기 :
하나의 타임라인에 있는 액션은 하나로 통합한다.
타임라인이 끝나는 곳에서 새로운 타임라인이 생기면 통합한다.
언제 끝날지 모르는 비동기 작업은 모든 병렬처리가 끝날 때까지 기다린다.

function Cut(num,callback){
 var num_finished = 0;
  return function(){
  num_finished +=1;
    if (num_finished ===num){
       callback();
    };
  }
}

var done = Cut(3, ()=>{console.log(
'3 timeline done')});

done();
done();
done();
}"
2023-05-05 20:15:39,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
일차: 41일차

### 공격성은 모든 인간에게 잠재되어 있다.
- 좌절, 분노, 불안, 공포, 조바심에서 우리는 갑자기 나 자신이 평소답지 않게 단호한 걸 발견한다.
- 이때 우리는 호전적이 되고 누군가를 공격하기도 한다.
- 그리고 나의 내면의 강인함이 상대보다 낮다면, 나의 공격 수준을 낮추거나 높이기도 한다.
- 공격은 모든 개인에게 잠재적인 성향이다.
- 공격은 ‘앞으로 내딛다’라는 라틴어 어원이묘, 자신의 주장을 내세우거나 무언가를 변화시키려 할 때 이 에너지를 활용한다.
- 공격은 부정적으로 쓰일 수도 있지만 긍정적인 목적에 이바지할 수도 있다.
- 공격적 에너지는 부정적할 수도 억누룰 수도 없다. 어떤 식으로든 드러난다.
- 우리는 공격적 에너지를 자각하고 이 에너지를 어떻게 통제해 생산적이고 긍정적인 목적으로 쓸 지 고민해야한다.

### 인간의 공격성은 무력감에서 온다.
- 인간은 언제든 죽을 수 있음을 자각하고 있다.
- 그래서 우리가 삶에서 결코 안전치 않다는 것도 자각하고 있다.
- 이처럼 인간은 수 많은 원천에서 나온 무력감에 끊임없이 괴로워한다.
- 인간의 공격성은 근원적 불안으로부터 유래된다.
- 공격적 행동을 취하려는 충동이 생기기 전에 공격자는 무의식적으로 무력감, 초조함을 처리하고 있다.
- 우리는 자신이 공격적 성향을 가진다는 걸 인정하고 이 에너지를 일이나 끈기있게 무언가를 성취하는 용도로 써야한다.
- 궁금적 목표는 강한 에너지를 억누르는 게 아닌 우리를 앞으로 나아가게 만들도록 방향을 잡는 것이다."
2023-05-05 22:16:41,"강민규","좋은 휴일 보내시고 계신가요? 이제 일주일이면 길었던 두달이 끝이 나네요~ 마지막까지 힘내어봅시다!

@길인식 @김채욱 @김현진 @김형우 @최창훈 

선생님들은 목, 금 분량 모두 해보아요"
2023-05-06 09:01:40,"강민규","여러분 좋은 아침입니다. 오늘 비가 많이 오네요 집에서 따뜻하게 커피 한잔 하시면서 책 읽어보는건 어떨까요?"
2023-05-06 09:01:52,"강민규","사진"
2023-05-06 16:09:04,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]481 ~ 490pg

[요약]

Javascript threading model simplification steps 

- all actions on a single timeline go into a single box
- consolidate timelines that end by creating one new timeline

Possible reasons why timeline works in unexpected order

- larger response payload can make it longer to download
- server handling request might be busier than other server

How to guarantee right order 

- cut: divide timelines
    - allows us to analyze timelines before the cut separately from timelines after the cut
    - prevent race condition
    - other languages would need to use locks or other coordination mechanisms

[발췌]

[메모]"
2023-05-06 17:10:10,"김채욱","[네트워크 42일차]
[SSL]

정의 : secure sockets layer, 응용계층과 트랜스포트 계층 사이의 소켓이 존재하여 통신 암호화를 제공합니다. 클라이언트와 서버간의 데이터 기밀성과 무결성을 보장합니다.

설명 : 데이터 스트림을 레코드로 쪼갠 후에, 각 레코드를 MAC과 순서번호를 해시 함수에 넣어서 해시 값을 만듭니다. 이후 수신자는 각 레코드의 MAC을 사용해 데이터 무결성을 확인합니다.

주요 용어 :

핸드셰이크 : 응용 계층 혹은 SSL 계층의 3 방향 핸드셰이크를 합니다. 이 과정에서 클라이언트와 서버는 암호화를 위한 정보와 키를 공유합니다.또한 전자서명을 통한 서버의 인증과 비밀키를 나눕니다.

Master Secret Key : 공유된 비밀키로, 핸드셰이크에서 생성됩니다. 해당 키는 클라이언트와 서버에서 임의로 생성된 값을 이용해 만들어 집니다. 해당 마스터 키는 다른 인증 키를 생성하는데 사용됩니다.

MAC : message authentication code key, 마스터 키로 생성되어서 ssl 세션을 통해 전송되는 메세지의 무결성을 확인합니다. 

순서번호 : ssl 메시지의 데이터 스트림을 보장하기 위해 헤더 필드의 값입니다.

​

[IPsec & VPN]

정의 : internet protoco security, IP 프로토콜의 보안을 제공한느 네트워크 계층 보안 프로토콜입니다. 페이로드를 암호화하여서 데이터 통신 간의 인증, 기밀성, 무결성을 보장합니다.

주요 용어 : 

ESP : encapsulating security payload, IPsec 내부에 있는 프로토콜로 IP 패킷의 페이로드를 암호화하고 ESP 헤더 필드를 추가합니다. 해당 해더에는 복호화에 필요한 인덱스와 무결성 체크 값이 포함되어 있습니다.

SA : security association, 보안 parameter로 어떤식으로 종단간의 데이터 패킷을 정의할지 결정합니다. 

Tunnel Mode : VPN 통신을 위해 IPsec은 기존 IP 패킷 전체를 캡슐화해서 추가 헤더 필드를 붙입니다. 해당 필드는 암호화를 위한 것으로 데이터 무결성과 기밀성을 위해 사용됩니다."
2023-05-06 17:10:48,"소재훈","41일차, 42일차 컴퓨터 네트워킹 하양식 접근 제출입니다!
제출자: 소재훈
4. 종단점 인증
https://geode-drizzle-777.notion.site/4-5bbe9b124874440ca6a153a48767debc 

5. 전자메일의 보안
https://geode-drizzle-777.notion.site/5-dea9261b1d4e4df6b09f4c2edd9b491a 

6. TCP 연결의 보안: TLS
https://geode-drizzle-777.notion.site/6-TCP-TLS-c58cd39844b54cac9abdf8e63f6baf1b 

7. 네트워크 계층 보안: IPsec과 가상 사설 네트워크
https://geode-drizzle-777.notion.site/7-IPsec-36f0a6870c9f4951a2e0e830112f91ea 

8. 무선 랜과 4G 5G 셀룰러 네트워크 보안
https://geode-drizzle-777.notion.site/8-4G-5G-d7212e33bd884404a80620355109917d 
"
2023-05-06 18:08:14,"ㅈㅁㅁ","저는 책이 회사에 있어서 다음주 월요일에 이틀치(42, 43일차) 한 번에 올리겠습니다(금정민)"
2023-05-06 18:25:24,"김효선","5/6 팩트풀니스

https://heady-dinghy-922.notion.site/2023-05-06-319-325p-113b4752b6c24f5db70e61b1202e8d83"
2023-05-07 01:50:22,"길인식","삭제된 메시지입니다."
2023-05-07 01:50:39,"길인식","[금요일]
[데이터 중심 애플리케이션 설계]
[요약]
분산rpc 이벤트 처리하는 노드집합에 질의 맡기기 가능
일괄처리, 스트림처리에서 시간 동기화가 문제가 됨. 스트림 백로그를 처리하는 동안 요청이 비정상적으로 튀는듯한 모습
시간으로 잘랐을때 그 뒤에 오는 데이터를 무시할지, 수정값 발행할지도 정해야함
스트림 조인에는 3가지가 있다 스트림 스트림 조인, 스트림 테이블 조인, 테이블 테이블 조인
[발췌]
테이블 테이블 조인 ... 이 질의 결과의 캐시가 타임라인이 되며, 조인 대상 테이블이 변할때마다 갱신된다.472p"
2023-05-07 10:03:49,"길인식","[토요일]
[데이터 중심 애플리케이션 설계]
[요약]
마이크로 일괄처리는 스트림을 작은 블록으로 나눔
정확히 한번만 처리되는것 처럼 보일려면 성공했을때만 이벤트 처리의 부수효과가 보아게 해야함
멱등성은 여러번 수행해도 오직 한번만 수행한것 같은효과
[발췌]
모든 상황을 만족하는 이상적인 트레이드 오프는 없다. 477p"
2023-05-07 13:48:32,"영동","함수형코딩 481-490 42일차

의도한 순서로 비즈니스 로직을 수행하기 위해서는 동시성을 만족시켜야한다.

비동기적으로 시행되는 여러개의 로직이 있을경우 다음단계로 넘어가기전에 모든 병렬처리를 기다려야한다.

function calcCartTotal {
  var total =0
  var done = Cut(2, ()=>callback(total))

  const ajax {
logic()
done()
}
 const ajax2{
logic()
done()
}
}

js에서는 promise.all이라는 동시성 기본형이 있다.

다른 언어에서 동시성 기본형이없다면 구현할줄 알아야한다"
2023-05-07 22:14:57,"강민규","여러분 즐거운 주말 보내고 계신가요~ 저는 홍콩에서 여러분의 출석 체크를 하고있습니다! 다행히 대부분 여러분들 잘해주고 계시군요

@김현진 @김형우 @이강욱 @정소영 @최창훈 선생님께선 내일 아침까지 금요일 분량은 반드시 해주세요~"
2023-05-08 01:31:57,"정소영","넛지 : 파이널 에디션 (41일차)

13장 장기기증 : 기본 설정 해법에 대한 환상

• 유도된 선택 - 장기기증률을 높이는 넛지의 대안들 

[요약]
*우리(설계자)가 선호하는 설정을 유도된 선택이라고 부름. 

- 유도된 선택의 기본적인 기능은 미적거림과 타성, 그리고 제한된 주의력을 극복하는 것
- 단게적으로 본다면
1. 과정을 쉽게 만드는 것 
2. 사람들의 관심을 끄는 것 - 관심을 가질 수 있는 즉시 가입해달라고 넛지하기. 예시) 운전면허 발급 및 재발급 시 질문하기
3. 기증자의 바람이 이루어 지게 하는 것 

2번과 연관된 선한 넛지의 사례
- 애플 건강앱의 장기기증 넛지 : 건강앱을 처음 설치할 때 생명기부에 관해 안내, 기증자가 되라는 안내. 

• 강제된 선택 - 명령과 넛지

[요약] 
유도된 선택과 강제된 선택은 무엇이 다르고 무엇이 나은가?
- 유도된 선택은 대답하지 않겠음 이라는 선택지를 선택할 수 있게 함.
- 무엇이 나은지는 답을 내세울 수 없지만 강제대신 유도의 요소를 넣을 수 있음. 
예) “장기기증 답변에 대답을 하지 않았다. 신청 완료 전 대답하시겠습니까?“"
2023-05-08 01:32:36,"최창훈","네트워크 41일차
https://cautious-ocarina-cca.notion.site/Chapter8-1b15222b128a480484b21e8912ab7c63"
2023-05-08 01:59:28,"정소영","넛지 : 파이널 에디션 (42일차)

13장 장기기증 : 기본 설정 해법에 대한 환상

장기기증에 대한 추정 동의가 많은 사람의 생명을 살릴 수 있을까?
-경험적인 차원의 질문만 가능. 결과는 제각각.
- 예) 가톨릭 신자들은 장기 기증에 호의적인 경향이 있고, 가톨릭이 중심적인 종교인 나라들은 추정 동의 제도를 채택할 가능성이 상대적으로 높다. 만약 이런 나라에서 장기 기증 비율이 상대적으로 높다면 이것은 종교 때문일까, 아니면 공공 정책 때문일까?

[요약]
기본 설정이 유도된 선택에 대해 강력한 도구가 될 수 있지만 기본 설정을 변경하는 것이 만병통치약은 아님.
- 추가로 추정 동의는 겉보기 보다 더 허약한 도구"
2023-05-08 02:58:21,"이강욱","https://velog.io/@rivolt0421/Grokking-Simplicity-4142"
2023-05-08 03:08:37,"김형우","[41일차]
https://engineer-diary.tistory.com/211"
2023-05-08 04:59:45,"김현진","데이터중심 애플리케이션 설계
금요일분량
https://ongoingjin.notion.site/W08-5-465-473p-06838747f3b044d29567ccdffd7564d5"
2023-05-08 06:50:18,"강민규","오랜만에 출근... 괜찮으신가요? 새마음으로 월요일을 시작해봅시다~"
2023-05-08 06:50:32,"강민규","사진"
2023-05-08 09:28:51,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]491 ~ 501pg

[요약]

Parallel Execution

Complexity of 3 things that we are dealing with

1. Async web requests
2. 2 API responses that need to be combined to form an answer
3. Uncertainty of the user’s interaction

1,3 - due to architectural choices

[발췌]

Function JustOnce(action) {
var alreadyCalled = false;
return function (a,b,c) {
if(alreadyCalled) return;
alreadyCalled = true;
Return action(a,b,c);
};
}

[메모]"
2023-05-08 12:59:16,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
일차: 42일차

### 수동적 공격자로부터 우리를 보호하는 법
- 우리는 간접적으로 내 주장을 펼치면서 최대한 교모하게 영향력을 발휘하고 통제력을 얻기위한 행동을 한다.
- 수동적 공격의 예시로, 늦게 답변하기, 겉으로 칭찬하면서 비꼬기 등이 있다.
- 이러한 수동적 공격에는 총 6가지 유형이 있다.
1. 교묘한 우월성으로 공격하는 유형 
- 이 유형은 상대가 어떤 잘못을 하여 따지려들 때 당신을 깐깐하고 몰상식한 사람으로 만든다.
- 이런 행동의 뿌리는 본인이 어떤 식으로든 우월하다는 것을 당신에게 분명히 하려는 욕구 때문이다.
- 권력을 가진 자가 당신을 계속 기다리게 한다며 그들은 노골적으로 자신이 우월하다는 점을 주장하는 것이다.
- 최선의 대응은 최대한 차분함을 유지하고, 참을성과 쿨한 면모를 통해 당신의 우월성을 보여주는 것 뿐이다.
2. 동정심 유발을 이용하는 유형
- 항상 희생자인 척하는 유형으로 자신의 무력함을 과대포장한다.
- 이 유형은 상대의 문제점을 들을 때 지루한 표정을 내비친다.
- 종종 죄책감을 느끼는 사람들을 먹잇감으로 삼는다.
- 이 유형을 상대하기 위해선 내면의 거리를 두는 게 중요하다.
3. 의존하게 만들기 유형
- 상대가 자신에게 의존하게 만드는 유형이다.
- 이 유형은 상대에게서 영향력을 획득하는 게 핵심이다.
- 이 유형을 대할 때는 서로 간의 약속은 경계하도록 하고 거기에 의존하지 않는 것이다.
4. 의심을 심는 유형
- 당신을 모욕하는 말을 살짝 끼워넣어 당신의 기분을 나쁘게 만들어 며칠씩 그가 한 말을 곱씹게 만든다.
- 그들은 당신의 자존삼에 타격을 주고 싶어한다.
- 이 유형을 대할 때는 그런 즐거움을 주지 않고 그들의 어쭙잖은 칭찬에 동의하는 것이다.
5. 화살 돌리기 유형 
- 이 유형은 상대에게 화살을 돌려 온갖 불쾌한 행동을 은폐한다.
- 상대의 반응이 어떻든 간에 당신은 내가 줄곧 잘못해온 것인가 하는 기분이 들게 만든다.
- 우리가 해야할 일은 적당한 거리를 유지해서 상대를 간파하고 그들과의 관계를 끊는 것이다.
6. 수동적 독재자 유형
- 당신의 상사는 에너지가 넘치지만 할일이 너무 많아 당신의 도움을 필요로 한다.
- 그리고 당신이 실망을 주면 비난을 퍼붓기 때문에 절대로 편안한 마음으로 일할 수 없게 한다.
- 그들은 당신에 대한 영향력을 갖게 되고, 자신의 지시를 따른다면 비난을 받을 이유가 없다고 말한다.
- 권력자가 부하에게 주로 이런 행동을 한다.
- 이런 학대를 당한다면, 일을 그만두고 그 상사와의 연을 끊는 게 제일 좋다.
"
2023-05-08 12:59:26,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
일차: 43일차

### 통제된 공격성
- 우리는 자신을 대담하고 모험적으로 만들고 여러 사상을 탐색하고 지식을 흡수하게 하는 에너지를 가진다. 이 에너지는 의지력 혹은 공격성이라고도 볼 수 있다.
- 그러나 우리는 외부로 이 에너지를 표출하는 걸 사회적으로 거부받기에, 우리의 공격성을 막는 내면의 훼방꾼이 생겨난다.
- 내면의 훼방꾼은 이 공격적 에너지를 박해하고 우리는 겸손하고 자기를 드러내지 않는 가짜 자아를 만들게 한다.
- 우리는 내면의 훼방꾼으로인해 정신적 능력이 약화되고 우리가 대담하고 모험적인 생각을 하지 못하게 한다.
- 인간은 본성적으로 적극적이고 공격적인데 이 에너지는 긍정적으로 사용하도록 하는 게 중요하다.

### 공격성을 긍정적으로 사용하는 방법
1. 야망
- 우리는 최초의 야망을 떠올리고 그것을 지금의 현실에 맞추고 구체적으로 만드는 게 중요하다.
- ex) 자신의 생각을 글로 쓰고 싶다는 야망, 늘 관심을 가지던 사업을 시작하고 싶은 야망 등
- 정확한 목표점이 어디고 어떻게하면 그곳에 도달할 수 있는지 분명히 시각화해라 
- 목표를 실행하고 나면 새로운 야망, 프로젝트를 설정해라
2. 집요함
- 목표에 도달하기 위해 필요한 욕망을 채워라
- 간절히 바라고 과거처럼 쉽게 포기하지 않도록 자신을 훈련해라
3. 겁 없음
- 특이한 것을 만들고 비판이나 실패에 겂없이 직면해라
- 이러한 근육을 키우면 자신감이 생겨 어떤 역경도 두려움 없이 대할 수 있다.
4. 분노
- 특정한 유형의 사람을 보고 분노하는 건 자연스러운 일이다.
- 자신의 분노를 분석해라. 분노의 원인, 방향 그리고 이 감정을 활용할 최선의 방법을 분석해라
- 오히려 분노를 포착해서 방향을 잡는다면 당신의 작품에 생동감, 역동성을 불어넣어줄 것이다."
2023-05-08 16:47:04,"영동","함수형코딩 491~501 43일차

지금까지는 여러요청을 모두 기다린 뒤 수행하는 Cut-done로직을 구현했다.

추가적인 동시성 기본형중 다른 형태로는 딱 한번만 호출하는 기본형도 있다.
'첫 번째 실행되는 타임라인이 done을 실행할때 콜백이 실행되는 기본형'

액션을 여러번 호출하더라도 한 번만 실행되도록한다.
JustOnce()

function JustOnce(action){
 var alreadyCalled = false;
  return function(a,b,c){   
    if (alreadyCalled){
      return;
    }
    return action(a,b,c)
  }
  
}"
2023-05-08 18:02:37,"김현진","데이터 중심 애플리케이션 설계
토요일 분량
https://ongoingjin.notion.site/W08-6-474-486p-d575eedda0874728949e4cd0d3b16881

월요일 분량
https://ongoingjin.notion.site/W09-1-487-496p-356ac520909c4d14822c32ebc1570996"
2023-05-08 20:45:44,"김효선","5/8 팩트풀니스

https://heady-dinghy-922.notion.site/2023-05-08-326-331p-8bfb06ee0e744cf3a00c5e17eaced7d8"
2023-05-08 22:08:17,"강민규","여러분 마지막 주차입니다! 보통 끝부분은 책이 재미가 없는 경우가 많지만 끝까지 읽는 경험 자체가 인생에 있어서 도움이 되니까 마지막 주차까지 잘마무리 해보아요~

@김민수 @김형우 @최창훈 @Seo  선생님들은 지난 주 분량 마무리지어 이번주 깔끔하게 시작해보도록 해요!!"
2023-05-08 22:33:22,"김형우","[42일차]
https://engineer-diary.tistory.com/212"
2023-05-08 22:34:00,"김민수","내일 꼭 올리겠습니다..."
2023-05-08 22:34:15,"김민수","대학원이 이제 끝나서"
2023-05-08 22:34:33,"영동","이모티콘"
2023-05-08 23:08:22,"Seo","5/6 토
https://seoshow.notion.site/DAY42-cfee620d30234de2b638020359eca610

5/8 월
https://seoshow.notion.site/DAY43-73d8a27e4a37435bb27ec0da12697452"
2023-05-09 04:06:45,"최창훈","42일차 https://www.notion.so/Chapter8-1b15222b128a480484b21e8912ab7c63"
2023-05-09 08:36:42,"길인식","[월요일]
[데이터 중심 애플리케이션 설계]
[요약]
모든 쓰기의 순서를 결정하는 단일 시스템으로 사용자 입력을 밀어넣으면 데이터 파생이 쉽다.
분산 트랜잭션은 많이 사옹되어 왔으나 결함에 취약하고 성능이 약하다. 반대로 로그 기반 파생데이터가 장래성 있다
람다아키택쳐는 입력데이터를 불변이벤트로서 증가하기만 하는 데이터셋에 추가하는 방식으로 기록해야한다는것
[발췌]
데이터 통합의 필요성은 나무가 아닌 숲을 보기 위해 줌아웃해서 조직 전체 데이터플로를 고려할 때야 비로소 명확해진다. 489p"
2023-05-09 09:07:59,"강민규","사진"
2023-05-09 09:08:24,"강민규","여러분 오늘은 44일차입니다~ 오늘도 화이팅"
2023-05-09 09:30:17,"이미정","삭제된 메시지입니다."
2023-05-09 09:30:47,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]501 ~ 513pg

[요약]

In languages with multiple threads, we would have to use some kind of atomic update

idempotent: action that only has an effect the first time you call  it

Implicit model of time: ordering and repetition

1. Sequential statements execute in sequential order
2. Steps in 2 diff timelines can occur in left-first or right-first order
3. Async events are called in new times
4. An action is executed as many times as you call it

All concurrency primitives aren’t always higher-order functions

Cells: used for sharing state

Ch 18: Reactive and onion architectures

- Build pipelines from actions using reactive architecture
- Create a common mutable state primitive
- Construct the onion architecture to interface your domain with the world
- See how the onion architecture applies
- Learn how the onion architecture compares to the traditional layered architecture

Reactive architect:

- flips the way actions are sequenced
- Used at the level of individual sequence of actions
- Specify what happens in response to events

Onion architect:

- high level perspective on the structure of functional programs
- Operates at the level of an entire service

Two patterns complement each other but neither requires the other

[발췌]

[메모]"
2023-05-09 12:23:56,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
일차: 44일차
### 시대의 변화를 받아들여라
어떤 세대에 태어났느냐에 따라 우리는 많은 것이 결정되고 규정된다.
우리 세대의 정신과 내가 사는 시대를 깊이 이해하면 시대정신을 잘 활용할 수 있다.
젊은 사람들은 새로운 방식으로 사귀고 교류하고 있다.
젊은 사람들은 당신이 존경했던 어떤 가치나 제도를 더이상 당신 수준으로 존경치 않는다.
우리는 이제 변화를 마주했을 때 진부한 해석을 버리고 훈계하려는 성향을 버려야 한다.
당신은 전체적인 분위기를 느낄 수 있어야 한다.
사람들이 갈망하는 것은 무엇인가 그들은 왜 이 새로운 형식을 향해 몰려드는가 
무슨 일이 일어나고 있는지 제대로 느꼈다면 대응은 대담하게 해라

우리 시대는 출산의 순간이자 과도기이다.
마음은 그 모든 것을 깊은 과거 속에 가라앉게 놔두고 스스로 변화를 모색한다.
질서가 흔들리고 무언가 알려지지 않은 것에 대한 막연한 예감이 든다면 곧 변화가 다가오고 있다는 전조이다.
이 전조에 맞게 자신의 생각을 유연하게 바꿔 받아들여라
"
2023-05-09 12:32:59,"김민수","[42일차 토요일] 바바라 민토 논리의 기술
4부 논리적으로 표현하기 - 10장 피라미드 원칙으로 문서 작성하기

[요약]
전체적인 결론 만들기
이론적으로는 잘 쓰여진 글이라면 결론은 불필요하다.
일반적으로는 결론을 첨가하는 이유는 자신의 메시지가 얼마자 중요한지 되새겨보고 싶다고 생각하기 때문이다.

다음 단계 기술하기
독자가 제안을 받아들일 것으로 생각한다면 앞으로의 조치를 기술해야 한다.

[발췌]
""글의 주제와 독자에 따라 표현을 달리해야 할 수도 있으므로 문서마다 적절한 결론이 다를 수도 있다.""

[메모]
하지만 그럼에도 불구하고 결론만 읽는 사람이 많은 곳이 많기 때문에 결론을 잘 작성하는 것은 중요하다."
2023-05-09 12:33:04,"김민수","[43일차 월요일] 바바라 민토 논리의 기술
4부 논리적으로 표현하기 - 11장 피라미드 원칙으로 프레젠테이션하기

[요약]
대부분의 화자는 글보다는 말로 전달하고 싶어하지만 청자는 지겨워하기 마련이다.
1. 가장 중요한 아이디어만 넣어서 적절히 묶고 요약
2. 명확한 도표로 뒷받침
3. 꼼곰히 따져보고 제작
도표와 텍스트의 비중은 90:10이 적당하다.

[발췌]
""당신은 그들의 반응을 예측하고, 그들의 관심을 사로잡고, 그들이 당신의 메시지를 듣고 싶게 만드는 데 역량을 집중해야 한다.""

[메모]
청자를 사로잡는 발표를 하는 것은 어려운 일이다.
적당한 도표를 만드는 작업은 많은 시간이 소요되며 도표가 있더라도 이해하는 것은 매우 어려운 일이다.
그렇다면 발표의 횟수를 줄이는 것이 결국 발표의 질을 높이는 데에 도움이 되는 일이 아닐까.
회사를 다니다보면 그런 생각이 든다."
2023-05-09 15:10:33,"소재훈","43일차,44일차 컴퓨터 네트워킹 하양식 접근 제출입니다!
제출자: 소재훈
9.방화벽과 침입 탐지 시스템
https://geode-drizzle-777.notion.site/9-54131ee773fd4941942714db22b0607b

1.멀티미디어 네트워킹 애플리케이션
https://geode-drizzle-777.notion.site/1-b2283f3ff0224ec797fd5b974bf4bdd8
"
2023-05-09 19:16:21,"김효선","5/9 팩트풀니스

https://www.notion.so/2023-05-09-332-337p-e1c6254e48fc4f2fbd8c48b70b39d8c1"
2023-05-09 21:34:26,"강민규","여러분 퇴근은 다들 하셨나요? 밤이되면 쉬고싶은 마음이 굴뚝같겠지만 시간을 내서 공부하지않으면 아무것도 더 나아지지 않는답니다~ 오늘도 화이팅이에요

@김채욱 @김현진 @김형우 @이강욱 @정소영 @최창훈 
선생님들은 미루지마시고 이틀분량 빠르게 해보세요~ 얼마 안걸립니다"
2023-05-09 22:58:29,"김채욱","[네트워크_43,44일차]
[방화벽]

정의 : 전체 인터넷으로부터 기관의 내부 네트워크를 분리시킨 하드웨어 소프트웨어의 조합으로 패킷들을 필터링하는 장치입니다.

목표 : 

외부와 내부를 오가는 모든 트래픽은 방화벽을 거칩니다.

로컬 보안 정책에 정의된 대로 승인된 트래픽만이 통과가 허용됩니다.

방화벽 자체가 침입 시도에 안전해야 합니다.

종류 :

전통적인 패킷 필터 : 패킷 헤더를 기반으로 관리자의 의해 정의된 패킷만 통과 시킵니다.

IP 출발지/목적지 주소, TCP/UDP 포트, SYN/ACK 등

ex) 외부 ACK 비트가 0인 것을 막으면, 처음 TCP 연결시 처으 ACK비트가 0이기에, 해당 세그먼트만 거르면 모든 외부 연결을 막습니다.

상황 고려 패킷 필터 : TCP 연결을 추적하여 패킷 차단 결정에 사용됩니다. 내부 연결 테이블에 TCP 연결된 주소 및 포트를 저장합니다. 해당 정보로, 연결된 패킷만 받도록 합니다.

응용 게이트웨이 : 패킷 헤더 외에 응용 계층의 데이터를 이용해, 특정 조건 혹은 데이터에 맞는 패킷을 분별합니다. 

프록시 서버도 응용 게이트웨이 입니다. 사용자의 주소를 남기지 않고 서버와의 연결이 가능하며 중간에 보안, 서버 로드 밸런싱 드으이 역할을 합니다.

​​

[비디오 특성]

설명 :  2019년 전 세계 트래픽의 80%가 저장형 혹은 스트리밍 비디오인 만큼, 높은 비트 전송을 요구합니다.

특징 : 

압축 : 

공간적 중복 : 이미지 내에 중복 현상이 나타나는 부분을 압축 가능합니다.

시간적 중복 : 연속되는 이미지인 경우에는 중복 이미지를 인코딩하지 않습니다.

여러 단계의 버전 : 사용자의 대역폭을 고려해 별도의 화질을 선택할 수 있습니다.

​

[오디오 특성]

설명 : 비디오에 비해 훨씬 적은 대역폭을 요구하지만 약간의 오류도 훨씬 민감하게 반응 됩니다.

특성 : 

일정함 : 아날로그 오디오 신호는 일정한 속도로 샘플링이 됩니다.

양자화 : 각 샘플은 유한개의 값 중의 하나로 정수화 됩니다.

압축 : 스트림 비트율을 줄이기 위해 여러 비트율 버전으로 압축이 가능합니다.

​

[저장 오디오와 비디오 스트리밍]

설명 : 오디오와 비디오가 혼합된 비디오 스트리밍이 현재 발생하는 트래픽은 50% 이상을 차지합니다.

특성 : 

스트리밍 : 클라이언트가 재생을 시작하기 전부터 파일을 수신하기 시작합니다.

상호작용성 : 콘텐츠를 미리 서버에 저장해, 정지, 되감기, 인덱싱 등의 기능을 제공합니다.

연속적인 재생 : 클라이언트는 파일을 적절한 시점에 수신되어야 합니다."
2023-05-09 23:50:09,"김현진","데이터중심 애플리케이션 설계
화요일분량
https://ongoingjin.notion.site/W09-2-497-506p-57c65f17581144fb822445380545fd33"
2023-05-10 00:20:35,"길인식","[화요일]
[데이터 중심 애플리케이션 설계]
[요약]
추상화 수준에서 데이터베이스와 운영체제는 데이터를 저장하고 처리, 질의한다
모든 상황에 만족하는 단일 장치는 없고 복수의 장치에 읽기를 통합하든지 쓰기를 통합해 사용하는 길이있다.
이때 멱등성을 기반으로 쓰기를 수행하는 비동기 이벤트 로그를 사용하는 편이 더 좋다.
[발췌]
로그 기반 통합의 큰 장점은 다양한 구성요소간 느슨한 결합이다. 500p
"
2023-05-10 01:15:51,"이강욱","삭제된 메시지입니다."
2023-05-10 01:16:19,"이강욱","https://velog.io/@rivolt0421/Grokking-Simplicity-4344"
2023-05-10 02:49:21,"김형우","[43일차]
https://engineer-diary.tistory.com/215"
2023-05-10 03:10:56,"최창훈","43일차 https://www.notion.so/Chapter8-1b15222b128a480484b21e8912ab7c63"
2023-05-10 03:33:41,"정소영","넛지 : 파이널 에디션 (43일차)

14장 기후변화 앞에서 지구 구하기

기후변화, 현상에 적응하는 정책이 필요.

[요약]
사람들은 문제에 대해 “지속적으로” 의식하지 못한다. 

•퍼펙트 스톰이라 불리는 문제 
전 인류 차원에서 총체적인 행동을 신천하기 어렵게 만듦. (인간의 본성과 같은)
1. 현재 중시 편향 
- 특이한 사례로 코로나 팬데믹은 나와 가족 친구가 겪는 문제로 바로 인식
2. 현저성 
- 눈에 보이지 않는 것은 대수롭지 않게 여김
3. 특정해서 지목할 악당이 없음
4. 확률적인 차원의 피해
- 확률적으로만 존재하면 사람들은 어렵지 않은 일이라고 왜곡되고 악용될 수 있음
5. 손실 회피"
2023-05-10 03:34:01,"정소영","넛지 : 파이널 에디션 (44일차)

14장 기후변화 앞에서 지구 구하기

[요약]
근본적인 문제는 무임승차자 관련. 공유지의 비극을 해법은 구성원이 동의하는 강제성을 챙기는 것

공유지의 비극에 관련하여, 긍정적인 모습이 보이다가도 언젠가 나쁜 소식이 들린 다면 조건부 협력자가 될 확률 높음.

사람은 무엇이 공정한지 판단할 때 자기중심적 편견에 사로잡힌다.

• 경제적 인센티브
인센티브의 중요성은 바뀌어야 할 행동의 많은 부분이 기업의 몫이기 때문. 벌금을 부과하는 형태로. "
2023-05-10 09:13:14,"강민규","사진"
2023-05-10 09:13:40,"강민규","여러분 오늘은 45일차입니다! 오늘도 좋은하루 보내세요"
2023-05-10 09:44:48,"이미정","# [쏙쏙 들어오는 함수형 프로그래밍]514 ~ 523pg

[요약]

Make state first-class

- Turn the variable into an object to control its operation

ValueCell: inspired by spread sheets, implement a reactive architect, meaning if you update on spreadsheet cell, formulas are recalculated in response

FormulaCells: watch another cell and recalculate their value when the upstream cell changes

ValueCells:

- Clojure: atoms
- React: redux and recoil atoms
- Elixir: agents
- Haskell: TVars
- Guarantee any value stored in them is valid

Reactive Architect

- Decouples effects from their causes
- Treats servers of steps as pipelines
- Creates flexibility in your timeline

ValueCells & FormulaCells: actions since they are mutable state

JavaScript: promises provide a way to construct pipelines of actions and calculations

[발췌]

[메모]

https://www.reactivemanifesto.org/"
2023-05-10 10:28:37,"김현진","데이터중심 애플리케이션 설계
수요일
https://ongoingjin.notion.site/W09-3-507-519p-3421ff513bcd445aaeb1f38e4ded9a57"
2023-05-10 12:14:26,"김민수","[44일차 화요일] 바바라 민토 논리의 기술
4부 논리적으로 표현하기 - 11장 피라미드 원칙으로 프레젠테이션하기 - 텍스트 슬라이드 디자인하기

[요약]
발표자료를 만들 때에는 화자가 자신이라는 것을 인지해야 한다.
발표자료는 시각적 보조물이며 발표에서 가장 흥미로운 것은 자신이어야 한다.
1. 한 번에 한 가지 아이디어
2. 캡션이 아닌 문장을 사용 
3. 텍스트를 간결하게 유지
4. 간단한 단어와 숫자 사용
5. 글자 크기 최적화
6. 흥미로운 디자인
7. 쌓기식 슬라이드 사용

[발췌]
""최고의 텍스트 슬라이드는 가능한 한 극명하고 단순하게 메세지를 전달한다.""

[메모]
최근 작성하는 논문 발표 슬라이드의 경우 빠지면 안 되는 내용이 너무 많아서 위 규칙을 지키기 어렵다.
본 게시글은 아주 많은 사람들과 적정 거리가 떨어져있는 상태를 가정하기 때문에 이를 감안해야 한다."
2023-05-10 12:14:29,"김민수","[45일차 수요일] 바바라 민토 논리의 기술
4부 논리적으로 표현하기 - 11장 피라미드 원칙으로 프레젠테이션하기 - 스토리보드 짜기

[요약]
피라미드로부터 발표자료로 이동하는 방법
1. 도입부를 전부 기재
2. 빈 스토리보드 양식 사용
3. 각 요점마다 부연 설명할 시각적 방식을 대략적으로 기재
4. 흐름을 고려하여 해줄 말 작성
5. 디자인
6. 예행연습

[발췌]
""청중에게는 (발표자료를) 연구하고, 그 안에 든 다양한 요소들의 의미를 따져볼 시간이 없다.""

[메모]
저자는 발표자료 디자인을 아웃소싱 할 수 있는 행복한 근무환경을 가진 사람이라는 것을 알게 되고 약간의 배신감이 들었다."
2023-05-10 13:02:36,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
일차: 45일차

### 세대의 변화는 반복되는 역사의 일부이다.
- 세대 간 긴장에 의해 만들어지는 변화는 주로 젊은이로부터 비롯된다.
- 자신의 정신은 인생의 다양한 단계를 지남에 따라 바뀐다.
- 마치 50대가 된 우리가 이해하는 방식이 20대와 다른 것처럼 말이다.
- 그러나 때떄때 세대 인격에서는 어떤 것은 손상되지 않은 채로 남을 것이다.
- 여러 세대가 섞여서 긴장감을 형성하고 가끔은 충돌하면서 우리가 흔히 시대정신이 만들어진다.
- 우리가 원하는 것은 비슷한 거리감을 가지고 지금 현재의 정신을 가늠하는 능력이다.
- 역사의 전체 속에서 우리 세대가 어디에 해당하는지, 앞으로 모든 게 어떻게 흘러갈지 감을 잡는 능력말이다.

### 인간 역사의 패턴
- 학자 이븐 칼툰은 인간 역사에서 4가지 패턴이 있다고 말했다.
- 현재 우리가 어떤  패턴에 있는지 파악하고 그 정신을 활용하는 게 중요하다.
- 요즘은 변화의 흐름이 빨라 사소한 변화라도 획기적으로 보여 균형을 잃곤 하는데, 세대 현상에 대한 인식과 차분한 역사적 관점이 중요하다.

1. 과거와의 근본적 단절을 만들어내는 혁명가들의 새대
- 새로운 가치관을 정립하고 그 과정에서 약간의 혼돈을 생성
- 뚜렷한 흔적을 남김 
2. 질서를 갈망하는 세대
- 그들은 아주 어린 나이에 혁명을 겪어봤기에 아직 혁명의 열기를 느끼고 있음
- 하지만 세상을 안정시키며 관습과 신조를 만들고 싶어함
3. 실용주의자 세대
- 문제를 해결하고 삶을 최대한 안락하게 만드는 게 목표
- 혁명에 대한 열정은 없음
- 물질적 관심이 지배적이고 상당수가 개인주의적 상향을 띰
4. 냉소적인 세대
- 자신이 물려받은 가치관을 의심
- 상당히 냉소적임
- 더이상 무엇을 믿어야할지 아무도 알지 못함
- 인간은 무엇가를 믿어야할 깊은 욕구를 가지기에, 가치관에 공백이 생기면 혁명을 시작함
- 그래서 이 냉소 세대가 끝나면 다시 혁명가의 세대가 시작됨

"
2023-05-10 14:58:19,"영동","함수형코딩 502~523 44~45일차


502~523

명시적 시간모델

동시성 상황에서 의도하지 않은 순서로 로직이 실행되는 것을 막기 위한 방법
1. Queue : 큐에 추가된 항목은 독립적으로 하나의 타임라인에서 실행된다. 
2. Cut : 모든 타임라인이 완료되면 콜백을 불러 새로운 타임라인을 시작한다.
3. JustOnce : 여러번 불러도 한번만 실행된다.
4. DroppingQueue : 큐와 비슷하지만 항목이 빠르게 늘어나면 작업을 건너뛴다.


타임 라인의 수를 줄인다. 타임라인의 길이를 줄인다. 공유 자원을 없앤다, 동시성 기본형으로 자원을 공유한다. 동시성 기본형으로 조율한다. 




반응형 아키텍처

원인과 효과를 분리한다. X가 일어나면 언제나 Y를 한다. 데이터 변환 단계를 파이프라인으로 처리한다. 계산을 조합할 수 있다.


셀
```javascript
function ValueCell(initialValue) {
  let currentValue = initialValue;
  return {
    val: () => {
      return currentValue;
    },
    update: (f) => {
      const oldValue = currentValue;
      const newValue = f(oldValue);
      currentValue = newValue;
    },
  };
}

cell = ValueCell(1);
console.log(cell.val());
cell.update((x) => x + 1);
console.log(cell.val());


1
2
```


감시자 <Watcher, Observer, listener, eventHandler, callback>


```javascript
function ValueCell(initialValue) {
  let currentValue = initialValue;
  let watchers = [];
  return {
    val: () => {
      return currentValue;
    },
    update: (f) => {
      const oldValue = currentValue;
      const newValue = f(oldValue);
      if (oldValue !== newValue) {
        currentValue = newValue;
        watchers.forEach((watcher) => watcher(newValue));
      }
    },
    addWatcher: (f) => {
      watchers.push(f);
    },
  };
}

cell = ValueCell(1);
console.log(cell.val());
cell.update((x) => x + 1);
console.log(cell.val());

cell.addWatcher((x) => console.log('watcher1', x));
cell.addWatcher((x) => console.log('watcher2', x));

cell.update((x) => x + 1);

1
2
watcher1 3
watcher2 3


```



FormulaCell은 파생된 값을 계산한다.
다른셀의 변화가 감지되면 값을 다시 계산한다.


```javascript
function ValueCell(initialValue) {
  let currentValue = initialValue;
  let watchers = [];
  return {
    val: () => {
      return currentValue;
    },
    update: (f) => {
      const oldValue = currentValue;
      const newValue = f(oldValue);
      if (oldValue !== newValue) {
        currentValue = newValue;
        watchers.forEach((watcher) => watcher(newValue));
      }
    },
    addWatcher: (f) => {
      watchers.push(f);
    },
  };
}

function FormulaCell(upstreamCell, f) {
  //계산을 한 값을 초기값으로 세팅
  let myCell = ValueCell(f(upstreamCell.val()));

  upstreamCell.addWatcher((newUpstreamValue) => {
    myCell.update((currentValue) => {
      return f(newUpstreamValue);
    });
  });
  return {
    val: myCell.val,
    addWatcher: myCell.addWatcher,
  };
}

// A1 셀에 2를 세팅하고, A2 셀에 3을 세팅합니다.
let A1 = ValueCell(2);
let A2 = FormulaCell(A1, (a) => a + 3);

console.log(A1.val()); // 2
console.log(A2.val()); // 5

// A1 셀의 값을 5로 변경합니다.
A1.update(() => 5);

console.log(A1.val()); // 5
console.log(A2.val()); // 8

// B1 셀에 4를 세팅하고, B2 셀에 B1 셀의 값에 2를 곱하는 계산식을 설정합니다.
let B1 = ValueCell(4);
let B2 = FormulaCell(B1, (b) => b * 2);

console.log(B1.val()); // 4
console.log(B2.val()); // 8

// B1 셀의 값을 6으로 변경합니다.
B1.update(() => 6);

console.log(B1.val()); // 6
console.log(B2.val()); // 12

```




값을 기준으로 카피온라이트를 반복하며 값을 전달한다. 하위 셀들은 상위 셀로부터 전달한 값만들 사용하기 때문에 최상위셀의 값을 사용하는 일은 하지 않는다.


같은 효과가 여러군데 있다면 한 군데로 합칠 수 있다.

결합의 분리는 원인과 효과의 중심을 관리한다.

분리 하지 않는다면 5*4 가지의 코드를 수정해야하지만 분리 된다면 5+4가 된다.

단일 이벤트 대신 데이터 스트림이라면 RX를 사용하자.

Kafka나 RabbitMQ같은 외부 스트림 서비스로 파이프라인을 구현 할 수 있다.

데이터를 전달하지 않으면 파이프라인이 아니다.


공유하는 자원이 없다면 타임라인이 많아져도 문제가 없다. 

"
2023-05-10 20:09:29,"김효선","삭제된 메시지입니다."
2023-05-10 20:09:59,"김효선","5/10 팩트풀니스

https://www.notion.so/2023-05-10-338-343p-aef249113ae5481f902db5f8d550adba"
2023-05-10 20:29:05,"Seo","어제부터 본가에 와있어서 책읽을시간이없네요ㅠㅠ 내일 삼일치 꼭 올리도록하겠습니다! "
2023-05-10 20:32:02,"강민규","넵 여러분 저희 원래 규칙은 이틀 연속 결석 시에 탈락입니다~ 이렇게 미리 말씀해주시면 괜찮기는하지만 이틀 연속으로 할 수 없을 것 같다싶을 때는 미리 해놓도록해봅시다!"
2023-05-10 21:22:37,"강민규","여러분들 벌써 한주가 꺾였네요~ 이번 주도 후회없이 살아가고있나요? 아직 절반이 남았으니 아쉬움이 남는다면 지금도 늦지 않았습니다!

@김형우 @최창훈 @길인식  여러분 44일차 분량은 오늘 꼭 제출 바랍니다~"
2023-05-10 22:10:32,"길인식","44일차 어제 올렸습니다 👍"
2023-05-10 22:31:47,"김채욱","[네트워크 45일차(수)]
[HTTP 스트리밍]

설명 : HTTP Live Streaming(HLS) 프로토콜을 활용해 서버에 특정 URL을 갖는 파일을 지속적으로 요청 및 다운로드를 합니다.

추가 설명 : 서버의 파일이 애플리케이션까지 오는데, 데이터가 저장되는 버퍼가 3가지가 있습니다. 1개는 서버의 TCP 송신 버퍼, 클라이언트의 TCP 수신 버퍼, 그리고 애플리케이션의 버퍼입니다. 만약 서버의 전송률이 애플리케이션의 소비률보다 높을 경우 애플리케이션의 버퍼가 차게 될 것입니다. 만약 버퍼 오버 플로우가 나면, TCP는 전송률을 낮춥니다. 이로 인해, 애플리케이션 버퍼 가용 공간이 간접적으로 서버의 전송률에 대한 제한을 가합니다.

장점 :

방화벽 통과 : 대부분의 UDP 트래픽은 중간 방화벽에서 필터링이 되지만, http 트래픽은 통과되는 것이 쉽습니다.

선인출 : 클라이언트가 비디오를 소비되는 비율보다 더 빠르게 다운로드 하는 것입니다. 이로인해 혼잡제어와 신뢰성 있는 데이터 전송 기법으로 인한 지연율을 낮춥니다.

​

[VoIP]

정의 : 인터넷 전화 혹은 음성 통신 기술입니다.음성 시그널을 디지털 시그널로 전환해, 네트워크 상으로 데이터를 전달합니다.

설명 : 방화벽으로 인해 TCP 프로토콜을 사용해야만하는 경우를 제외하면, 대부분 UDP 프로토콜을 사용합니다. 소량의 데이터 패킷을 분실하여도 패킷 복귀 기법을 통해 적당히 좋은 데이터 품질을 유지 가능합니다.

용어 : 

Jitter : 음성 데이터를 작은 chunk로 분리해 전송하는데, 여러 라우터를 타고 다른 순서로 수신자에게 전달됩니다. 이때 지터는 공유된 데이터 지역에 데이터를 모으는 버퍼 역할을 해서, 수신자가 일정한 간격으로 데이터를 수신할 수 있겠끔하여서, 통화 품질을 보장합니다.

손실 복구 기법 :

Forward Error Correction : 데이터 전송시 신뢰성을 증가 시키는 기법입니다. 전송자는 추가 여분의 데이터를 메시지에 더해서 일정 패킷이 손실되어도 수신자에서 품질 복구가 가능케 합니다.

Interleaving : 데이터 전송 전에 데이터 전송 범위를 재조정하는 기법입니다. 데이터가 전송시 burst 에러 영향을 완화시킵니다."
2023-05-11 00:48:05,"최창훈","44일차
https://cautious-ocarina-cca.notion.site/Chapter8-1b15222b128a480484b21e8912ab7c63"
2023-05-11 00:49:20,"김형우","[44일차]
https://engineer-diary.tistory.com/216"
2023-05-11 08:32:02,"강민규","삭제된 메시지입니다."
2023-05-11 08:35:21,"강민규","사진"
2023-05-11 08:35:33,"강민규","46일차입니다! 오늘도 좋은 하루 보내세요~"
2023-05-11 08:37:22,"김민수","[46일차 목요일] 바바라 민토 논리의 기술
4부 논리적으로 표현하기 - 12장 피라미드 원칙으로 문장 표현하기

[요약]
글로 쓰는 작업은 전달하고자 하는 포인트를 결정한 다음 말로 바꾸는 두 가지 단계로 이루어진다.
본 장에서는 후자를 다룬다.
독자가 이해하기 쉽고 즐겁게 받아들일 수 있는 글을 쓰는 것은 당연하지만 실천하기 어렵다.
이 때 자신의 메시지를 만들어간 이미지를 시각화하는 기술이 도움이 된다.
추상적 개념보다는 전체를 포괄하는 하나의 이미지로 표현해야 한다.

[발췌]
""뛰어난 생각에 졸렬한 언어라는 옷을 입혀서는 안 된다.""

[메모]
전문가와 대화할 때에는 전문용어를 사용하는 것이 좋지만 난해하기 위해서 난해할 필요는 없다."
2023-05-11 08:37:31,"김민수","요즘은 점심시간에 책을 읽는데, 오늘은 국제인공지능대전(AI EXPO)이라는 컨퍼런스가 회사 앞에서 하길래 점심에 거기 다녀오려고 아침에 좀 일찍 일어났네요. 다들 좋은하루되세요~"
2023-05-11 08:38:02,"길인식","[수요일]
[데이터 중심 애플리케이션 설계]
[요약]
검색색인에서 쓰기경로와 읽기경로거 만난다.
오프라인 대응 가능하도록 상태저장하는 클라이언트를 볼 수 있다. 이때 각 장치는 이벤트 스트림을 구독하는 작은 구독자이다.
읽기도 이벤트로 볼 수 있다
정확성을 위해 정확히 한번만 실행시키려면 멱등성 필요. 이때 연산 식별자를 활용하나 종단 간 논증에서 모든 경로에 트랜잭션을 포함하는 방법이 완전하다는 의견
[발췌]
특히 장치 상 상태를 서버 상 상태 캐시로 생각할 수 있다. ... 화면의 화소는 클라이언트 앱의 모델 객체를 보여주는 구체화 뷰다 510p"
2023-05-11 12:52:35,"ㅈㅁㅁ","제목: 인간 본성의 법칙 
참여자: 금정민 
일차: 46일차

### 세대의 틀에서 벗어나는 전략
- 시대정신을 잘 활용하려면 ‘당신이 태어난 세대가 당신의 생각과 가치관을 형성함’을 알아야 한다.
- 사람의 단점은 그 시대에서 온 것이다. 사람의 미덕과 위대함은 온전히 그의 것이다.
1. 과거를 밀어내라
: 과거와 과거의 가치관이나 생각을 내가 큰 힘을 갖고 밀어낼 수 있는 대상으로 활용해라
2. 과거를 현재의 정신에 맞게 각색해라
: 역사적 사건에서 감정을 일으키는 상징이나 스타일을 취해 각색해라
3. 어린시절의 정신을 부활시켜라
: 어린시절, 당신에게 영향을 주었던 느낌을 되살린다면 그 시기를 함께 경험했던 모든 사람들이 귀를 기울여줄것이다. 과거를 재창조하는 게 아닌 그 정신을 포작하려해라
4. 새로운 사회 구성을 창조해라
: 새로운 아이디어나 가치관을 중심으로 혹은 비슷한 생각을 가진 사람들을 참신한 방식으로 한 자리에 모을 수 있는 최신 기술을 중심으로 집단을 조직해라
5. 시대정신을 전복하라
: 시대정신이 마치 조수나 물살과 같다면 그에 맞서 싸우는 게 아닌 부드럽게 그 방향을 돌릴 방법을 찾아라
6. 계속해서 진화해라
: 당신은 나이가 들면서 이시기의 특징이었던 가치관과 생각, 스타일에 계속 갇혀있게 된다.
: 당신의 경험과 시각을 진행중인 변화와 혼합하여 새롭고 더 넓은 고객층을 확보해라
: 당신을 보기 드물고 호소력이 있는 잡종으로 만들어라
"
2023-05-11 20:26:38,"강민규","여러분 이제 거의 끝났네요"
2023-05-11 20:26:47,"강민규","부록 읽고 계신 분도 계시고"
2023-05-11 20:27:17,"강민규","마지막까지 화이팅 해봅시다"
2023-05-11 20:31:31,"김채욱","방장님 혹시 책읽기 말고 ""스택너두"" 이런거는 없나요. 2달 동안 책 일고 2달 정도는 새로운 기술 연마하고 싶은데 강제성이 있으면 좋을거 같아서 물었습니다."
2023-05-11 20:31:51,"강민규","아 한번 모집해볼까요"
2023-05-11 20:32:23,"강민규","어떤 기술을 연마하고싶으신가요"
2023-05-11 20:33:15,"강민규","안그래도 책 대규모 시스템 설계 기반으로 스터디를 해볼까 했습니다"
2023-05-11 20:34:25,"김채욱","카프카랑 elk 연마하고 싶어요 ㅎ"
2023-05-11 20:34:43,"강민규","책에 나오는 사례들 직접 구현 해보고 다하면 코딩인터뷰 완전 분석의 시스템 설계에 나오는 문제 중 3개 정도를 함께 설계해서 만들어보려고 했었죠"
2023-05-11 20:36:00,"강민규","제가 한번 두달 과정으로 빡쎄게 만들어보겠습니다"
2023-05-11 20:38:18,"김채욱","오 👍 "
2023-05-11 21:26:27,"김효선","5/11 팩트풀니스

https://www.notion.so/2023-05-11-344-348p-d3b221851f64455a82bcc5cdc8a1fcb9?pvs=4"
2023-05-11 21:43:56,"김현진","데이터중심 애플리케이션 설계
목요일
https://ongoingjin.notion.site/W09-4-520-526p-8c9ec241ae314fa189fc3f734ad325b3"
2023-05-11 22:08:11,"강민규","여러분 퇴근은 하셨나요? 내일 즐거운 불금을 보내기 위해 오늘은 결석 없이 다 해보도록 해요!!

@김형우 @소재훈 @이강욱 @정소영  선생님들은 15일차부터 다 해봐요~

@Seo 선생님은 약속대로 3일치 모두 올려주세요!"
2023-05-11 22:08:49,"강민규","저희 이제 오늘만 넘어서면 탈락은 없습니다. 힘드시겠지만 화이팅이에요"
